*TC 00:00:07;06
こんにちは、Stephanie Liu です

*TC 00:00:10;00
YouTube API とツールのチームに所属しています 

*TC 00:00:11;06
今回は、新しいプレーヤー API と
クロムレス プレーヤーを使った

*TC 00:00:13;21
簡単な例をご紹介しますまずは、背景知識から

*TC 00:00:16;24
ご説明します  これまで、YouTube の動画を
自分のサイトに埋め込むには

*TC 00:00:19;06
YouTube 標準の埋め込みプレーヤーを
サイトに設置するしか

*TC 00:00:21;21
方法がありませんでしたデベロッパーのみなさんは

*TC 00:00:24;24
その仕組みについて何もわかりませんでした

*TC 00:00:26;15これからはカスタマイズできる範囲が広がります新しくリリースした

*TC 00:00:26;15
JavaScript と Flash API を使用すれば
YouTube の埋め込みプレーヤーを

*TC 00:00:31;27
自分で制御できるようになります
コマンドを発行して

*TC 00:00:35;00
再生、一時停止、
動画の特定の位置からのシーク再生、

*TC 00:00:38;12
ミュート、音量設定を行ったり、
動画の経過時間やバッファ率といったデータを

*TC 00:00:42;09
取得したりできますプレーヤーの状態変更などのイベントに

*TC 00:00:44;12
登録することもできます
対してクロムレス プレーヤーは

*TC 00:00:47;18
プレーヤー コントロールのない swf ですYouTube ボタンや YouTube の

*TC 00:00:51;03
プログレス バーもありません自分でボタンを作成して
サイトのデザインに合うように

*TC 00:00:53;18
自由にカスタマイズできますそれでは

*TC 00:00:57;09
JavaScript プレーヤー API の
機能を見ていきましょう

*TC 00:01:00;29
ここに標準の YouTube 埋め込みプレーヤーが
ありますこれは

*TC 00:01:03;11
みなさんよくご存知だと思います

*TC 00:01:06;29
このように再生しますが、これから
このプレーヤーを埋め込む方法を

*TC 00:01:11;11
ご説明して、埋め込みプレーヤーを呼び出す
API コールをみなさんが作れるようにしますまず始めに

*TC 00:01:14;26
「swfobject.js」を含める必要がありますここで

*TC 00:01:19;02
swf オブジェクトの使用をお勧めするのは
Flash コンテンツの埋め込みが 

*TC 00:01:21;05
ずっと簡単になるためです
ユーザーの Flash のバージョンを

*TC 00:01:23;20
検出したりできますオリジナルのプレーヤーを

*TC 00:01:27;02
正しく表示するには
バージョン 8 以降が必要です

*TC 00:01:29;20ここにある DIV 要素で
埋め込みプレーヤーの設定を行います

*TC 00:01:36;20「ytapiplayer」という名前に
なっていますね

*TC 00:01:40;17
これは後ほど必要になりますユーザーがバージョン 8 以上の

*TC 00:01:43;26
Flash をインストールしてない場合、
壊れたプレーヤーではなく

*TC 00:01:46;02
このテキストが表示されます
ではそろそろ本題に入りましょう

*TC 00:01:50;02ここで実際に
埋め込みオブジェクトを

*TC 00:01:52;17
設定します 

*TC 00:01:58;08
ここで埋め込みオブジェクトに
含めるパラメータを

*TC 00:02:00;28
設定しています
 

*TC 00:02:02;28
常に「allowScriptAccess:」が必要ですこれは、YouTube の swf から

*TC 00:02:07;10
あなたの HTML ページを呼び出す
ことができるということですまた、あなたの HTML ページからは

*TC 00:02:10;10
プレーヤー SWF を呼び出せます次に設定する属性は

*TC 00:02:14;22
「myytplayer」の ID ですこれは埋め込みオブジェクトの

*TC 00:02:20;10
名前になります後ほど、ID により get 要素を使用して

*TC 00:02:24;01
JavaScript を介して
プレーヤーの参照を取得できます

*TC 00:02:33;22
ここで「swfobject.embedSWF」が
実際に YouTube からプレーヤーを読み込んで

*TC 00:02:37;07
あなたの HTML ページに埋め込みます 

*TC 00:02:41;10 
必要なパラメータを見てみましょう最初のパラメータは

*TC 00:02:45;28
swf の URL である「enableksopi=1」です

*TC 00:02:53;04
これにより、プレーヤーが API コールを
受け取れるようになります 

*TC 00:02:57;25 
「playerapiid」は
プレーヤーの読み込みが完了し

*TC 00:03:02;03
再生可能になったときに

*TC 00:03:05;24
「onYouTubePlayerReady」に
最初の引数として渡されます次にプレーヤーに名前を付けます

*TC 00:03:09;06
複数の動画をページに読み込む場合

*TC 00:03:12;18
どの動画が再生可能なのかを

*TC 00:03:16;21
知るために名前が必要です次のパラメータは

*TC 00:03:23;15
HTML の div タグの ID です
ここに埋め込みプレーヤーが

*TC 00:03:26;24
設定されますこれは、ここで呼び出している

*TC 00:03:31;18
「ytopiplayer」ですそれから動画の幅、高さ、

*TC 00:03:36;15
必要な Flash のバージョンを設定しますコンテンツを正しく表示するには

*TC 00:03:41;06
バージョン 8 以上が必要であることに

*TC 00:03:43;18
注意してくださいこれらのパラメータは

*TC 00:03:48;09
使用しませんこのパラメータと属性は

*TC 00:03:51;03
ここで設定していますこれで、埋め込みプレーヤー
API コールを受け取る準備ができました

*TC 00:03:55;03
次にもう少し楽しいことをしてみましょう

*TC 00:03:57;15
コマンドを入力してみます

*TC 00:03:58;27
ここにいくつかリンクを追加しました

*TC 00:04:01;14
ボタンの代わりにこれを使って
プレーヤーをコントロールすることができます

*TC 00:04:03;17再生して、一時停止します停止しますミュートしますミュートを解除します 

*TC 00:04:12;08
この設定を行うのに必要な
非常にシンプルな呼び出しを

*TC 00:04:15;11
お見せします前にお話したように
プレーヤーが読み込まれ

*TC 00:04:18;20
再生の準備が整うと
「onYouTubePlayerReady」を

*TC 00:04:20;29
呼び出します

*TC 00:04:23;02
ここに機能を定義しますそれからプレーヤーの参照を

*TC 00:04:26;23
取得して保存し
プレーヤーに API コールを

*TC 00:04:29;14
発行できるようにしますこれで

*TC 00:04:33;11
準備が整いました

*TC 00:04:35;17
次はリンクの設定方法ですこれはとてもシンプルです

*TC 00:04:39;29
play 機能に「onclick」へのリンクを
追加するだけですplay 機能は

*TC 00:04:44;20
このように定義しますここではエラーの検証を行って

*TC 00:04:44;20
null でないことを確認しています
それから

*TC 00:04:50;08
「ytplayer.playVideo」を呼び出します
簡単ですね同様に

*TC 00:04:55;23
一時停止には「pauseVideo」
停止には「stopVideo」を使用します

*TC 00:04:59;20
それから「mute」と「unmute」ですねこのようなコマンドを

*TC 00:05:05;16
プレーヤーに発行するだけですさて

*TC 00:05:08;07
基本的なコマンドは発行しました
ではデータを入力して

*TC 00:05:10;28
この動画の 90 秒地点から
シーク再生してみましょう

*TC 00:05:18;19
これも他のコマンドと同様
とても簡単です

*TC 00:05:21;01
方法をご説明します

*TC 00:05:22;28
この部分では、動画の何秒目から
シーク再生するのかを

*TC 00:05:27;16
ユーザーに入力させています「seekTo」機能を呼び出して

*TC 00:05:30;16
テキスト ボックスに入力された値を取得します

*TC 00:05:33;10そして「ytplayer.seekTo」を
使って機能を定義します

*TC 00:05:36;13
先にお話した定義の仕方と
非常に

*TC 00:05:38;16
よく似ていますこれが今渡した秒数

*TC 00:05:42;16
これは「seekTo」の位置が
まだ読み込まれていない場合に

*TC 00:05:46;01
新しいリクエストをサーバーに
送信するかどうかですここで

*TC 00:05:52;07
プレーヤーにコマンドを発行しました
次はデータを取得してみましょう

*TC 00:05:54;07プレーヤーの経過時間、
つまり、ユーザーが動画を

*TC 00:05:58;10
再生した時間は
有用なデータです 

*TC 00:06:01;24
ここで [Play] をクリックすると
経過時間が

*TC 00:06:07;18
更新されますね

*TC 00:06:10;09
動画の経過時間を
常に表示するには

*TC 00:06:12;09
「onYouTubePlayerReady」を

*TC 00:06:13;21
使います間隔を 250 ミリ秒に

*TC 00:06:18;21
設定しますこれで
250 ミリ秒ごとに

*TC 00:06:21;24
「updateCurrentTime」が呼び出されこれにより

*TC 00:06:23;18
「ytplayer.getCurrentTime」が呼び出されて

*TC 00:06:26;15
HTML が更新されますその他にも動画の長さや

*TC 00:06:30;06
動画の URL、埋め込みコード

*TC 00:06:34;18
などのデータを取得できますここまでで、プレーヤーに
コマンドを発行して

*TC 00:06:38;15
データを取得しました次はイベントに登録する方法を
見てみましょう

*TC 00:06:41;24
ここでは、プレーヤーの状態が
変わる度に

*TC 00:06:46;06
通知されるようにしますここを見ると、プレーヤーの状態が
5 であることがわかります

*TC 00:06:49;09
これは動画を読み込み中ということです[Play] をクリックすると

*TC 00:06:53;21
動画がバッファされ、状態が 1 に変わります
再生中ということです

*TC 00:06:58;03
一時停止すると 2 に変わりますではイベントに登録する方法を

*TC 00:07:01;08
ご説明します
プレーヤーの状態を常に

*TC 00:07:04;20
表示したい場合、

*TC 00:07:07;26
「onYouTubePlayerReady」で

*TC 00:07:10;20
「ytplayer.addEventListener」を
定義してイベント リスナを追加します

*TC 00:07:15;20
「onStateChange」イベントに登録して

*TC 00:07:19;08
「onStateChange」イベントが
コールバック関数を使用して

*TC 00:07:22;29
それを現在の状態に渡します

*TC 00:07:28;11
ここでは HTML の更新が行われますJavaScript API の基礎は

*TC 00:07:33;11
ご存知ですよね
コマンドの発行、

*TC 00:07:36;02
データの取得、イベントのリッスン
などですFlash API にも

*TC 00:07:39;08
同じ呼び出しと同じ機能が
ありますが

*TC 00:07:41;29
YouTube プレーヤーの swf を
他の swf に読み込むのは

*TC 00:07:44;14
少し複雑ですプレーヤーの swf の構造により

*TC 00:07:47;11
アクション スクリプトに内蔵の
「MovieClipLoader」を使用しても

*TC 00:07:49;08
プレーヤーの準備が整っているか
どうかの正確な情報が

*TC 00:07:51;17
得られません

*TC 00:07:52;26
そこでこのスニペットを使って
YouTube プレーヤーを

*TC 00:07:55;05
Flash に読み込みます新しい「new MovieClipLoader」を作りました

*TC 00:08:01;13
ここで YouTube swf を読み込み
「ytPlayer」と名前を付けます

*TC 00:08:07;10
このリスナは 250 ミリ秒ごとにプレーヤーが読み込まれているかどうかを

*TC 00:08:12;07
確認しますこの呼び出しは JavaScript API にはありません

*TC 00:08:16;13
この「ytplayer.isPlayerLoaded」は

*TC 00:08:20;07
アクション スクリプトで使用し
プレーヤーが読み込まれているかどうかを

*TC 00:08:22;16
確認しますtrue の場合は
既にご説明した

*TC 00:08:27;25
JavaScript API の機能を
実行します

*TC 00:08:30;01
addEventListeners などです

*TC 00:08:33;13
プレーヤー API については以上です

*TC 00:08:36;04
次にクロムレス プレーヤーについてご説明します

*TC 00:08:37;25
クロムレス プレーヤーは

*TC 00:08:40;07
ボタンのない swf です見た目を好きなように

*TC 00:08:44;07
カスタマイズできますたとえば
クロムレス プレーヤーを使用している

*TC 00:08:48;07
このサイトではオリジナルのボタンを

*TC 00:08:51;04
使っており
プレーヤー API で制御しています

*TC 00:09:03;03
これは、これまでにお見せした
プレーヤーと非常によく

*TC 00:09:05;12
似ていますが
クロムレス プレーヤーを使っていますボタンがひとつもなく

*TC 00:09:07;24
プログレス バーもありませんね

*TC 00:09:10;09
YouTube ロゴだけが

*TC 00:09:13;03
右下にありますこれまでにご説明した
JavaScript API を

*TC 00:09:16;09
使っているので、このリンクで
制御できます

*TC 00:09:19;09
再生一時停止
このリンクの設定方法も

*TC 00:09:23;21
ご存知ですね
swf URL だけが違いますではイベントに登録する方法を

*TC 00:09:26;27
お見せしましょうクロムレス プレーヤーと

*TC 00:09:29;15
通常の埋め込みプレーヤーとの
違いは

*TC 00:09:32;12
アクセスするのに
デベロッパー キーが必要な点ですデベロッパー キーを

*TC 00:09:35;03
お持ちでない場合は
code.google.com にアクセスして

*TC 00:09:38;12
取得してください無料で簡単に登録できます 

*TC 00:09:43;18
このコードはもうおなじみですねクロムレス プレーヤーと

*TC 00:09:47;15
通常の YouTube 埋め込みプレーヤーを

*TC 00:09:49;21
埋め込む場合の唯一の違いが

*TC 00:09:52;00
swf URL ですここを見ると
クロムレス プレーヤーの swf が

*TC 00:09:55;24
gdata.youtube.com/apiplayer
であることがわかります

*TC 00:10:00;27
ここにデベロッパー キーを入れます

*TC 00:10:03;06
その他 2 つのパラメータは同じです

*TC 00:10:09;06
クロムレス プレーヤーを読み込む
方法はわかりましたね

*TC 00:10:11;12
通常の JavaScript API との違いをご説明します

*TC 00:10:13;15
クロムレス プレーヤーを

*TC 00:10:16;24
最初に読み込んだときには
動画 ID がないため

*TC 00:10:18;21
このような見た目になります

*TC 00:10:21;03
ここにある、動画 ID の読み込み
機能を呼び出します

*TC 00:10:28;09
動画が読み込まれます動画のキュー機能もあります

*TC 00:10:36;03
この機能ではサムネイルを読み込んで

*TC 00:10:40;12
動画を取得しますが
再生は開始されません 

*TC 00:10:44;27
新しい動画をクロムレス プレーヤーに読み込むには

*TC 00:10:47;06 
「ytplaer.loadVideoById」を呼び出し
ID を渡します

*TC 00:10:51;21
オプションで動画の開始地点を
指定します 

*TC 00:10:56;06
同様に「cueNewVideo」でも「ytplaer.cueVideoBGyId」を呼び出し

*TC 00:11:00;29
ID を渡して
プレーヤーから再生コマンドが

*TC 00:11:04;29
発行されたときに動画の再生を
開始する位置を指定しますこのチュートリアルで

*TC 00:11:09;29
新しいツールの機能と使い方を
理解していただければ幸いです

*TC 00:11:12;05
また、ご説明できなかったことも
多数ありますので

*TC 00:11:14;05
code.google.com にある
ドキュメントも

*TC 00:11:16;17
あわせてご覧ください



