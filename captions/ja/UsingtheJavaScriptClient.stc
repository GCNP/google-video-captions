*TC 00:00:06;19
こんにちは、Austin Chau です

*TC 00:00:08;05
Calendar Data API チームに
所属しています

*TC 00:00:10;22
Calendar Data API は
自分の Google カレンダー アカウントの

*TC 00:00:14;08
データを表示する API です

*TC 00:00:16;08
この API を使うと
イベントの作成や検索を行ったり

*TC 00:00:18;26
新しいカレンダー プログラムを丸ごと

*TC 00:00:21;23
自動的に作成することもできます

*TC 00:00:23;12
今回は、JavaScript Client Library を使って

*TC 00:00:25;21
Calendar Data API と対話する方法
についてご説明します

*TC 00:00:29;02
また、新しい対話型のデベロッパー ガイドの
デモもお見せします

*TC 00:00:31;18
これは私が開発しました

*TC 00:00:33;29
この新しいデベロッパー ガイドでは

*TC 00:00:36;01
ブラウザ上で直接コードを編集できます

*TC 00:00:37;06
クライアント ライブラリの使用方法を
初めて学ぶ方に

*TC 00:00:39;16 
ぴったりのツールです

*TC 00:00:41;07
JavaScript Client Library は
最新のクライアント ライブラリとして

*TC 00:00:43;18
Google が公式にサポートしている
クライアント ライブラリのリストに加えられました

*TC 00:00:45;19
このリストにはほかに

*TC 00:00:49;15
Java、CSharp、PHP、Phython
が含まれています

*TC 00:00:50;26
この中でも JavaScript Client Library
は特に便利です

*TC 00:00:53;16
HTML との統合を容易に行えるほか

*TC 00:00:56;18
サービス サイドに依存していません

*TC 00:00:58;24
JavaScript Client Library
にはドメイン間の通信を可能にする

*TC 00:01:00;20 
構築テクノロジーが組み込まれています

*TC 00:01:04;09
これはJavaScript を使って
再操作を実行するだけでなく

*TC 00:01:06;10
書き込みもできるということです

*TC 00:01:08;21
JavaScript Client Library を使えば
これはとても簡単です

*TC 00:01:11;09 
それでは JavaScript Client Library を
使用するために必要なコードを

*TC 00:01:13;20
設定する手順をご説明します

*TC 00:01:16;27
ステップ 1: まずはデベロッパー キーを
登録します

*TC 00:01:20;03
登録はこのウェブサイトで行います

*TC 00:01:22;20
ステップ 2: デベロッパー キーにこのスクリプトを含めて

*TC 00:01:26;01
クライアント ライブラリ ローダーを

*TC 00:01:28;07
自分のウェブサイトに含めます

*TC 00:01:30;05
ステップ 3: JavaScript のコードを置く
同じドメインに

*TC 00:01:32;17
画像をアップロードしますこのイメージは

*TC 00:01:35;13
非表示になっていても構いません 

*TC 00:01:36;09
ご覧のように、私はこの画像を
ページの隅に置いています

*TC 00:01:39;06
これはドメイン間通信を
行うために

*TC 00:01:40;12
必要な操作です

*TC 00:01:42;12
ステップ 4: JavaScript Client Library で
読み込みを行うには

*TC 00:01:45;04
ローダーを使う必要があります

*TC 00:01:46;23
ステップ 5: 次にライブラリが読み込まれ
準備が整ったときに

*TC 00:01:49;14
コールバック関数が呼び出されるように
設定します

*TC 00:01:52;02
ステップ 6: コールバック関数の内部では、まず
ユーザーがログインしているかどうかを

*TC 00:01:55;10
確認する必要があります 

*TC 00:01:56;19
ログインしていない場合はユーザーを
Google アカウント ページに転送して

*TC 00:01:58;29
ログインさせます

*TC 00:02:00;26
承認されたユーザーは

*TC 00:02:03;00
あなたのページに戻ってきます

*TC 00:02:04;19
JavaScript Client Library を使って
Calendar Data API を操作する

*TC 00:02:06;15
呼び出しを行う準備ができました

*TC 00:02:09;28
それでは、対話型のデベロッパー ガイドを見てみましょう

*TC 00:02:12;09
このアドレスからアクセスできます

*TC 00:02:17;03
対話型のデベロッパー ガイドは
通常のデベロッパー ガイドと同じく

*TC 00:02:19;03
サンプル コードや

*TC 00:02:21;12
API を使用して行う一般的な事例を
ご紹介しています

*TC 00:02:24;13
通常のデベロッパー ガイドと異なる点は
ブラウザ上で直接

*TC 00:02:26;16
組み込みのテキスト エディタを使用して
ソース コードを編集したり

*TC 00:02:29;05
コードを実行したりできることです

*TC 00:02:31;14
実行した操作の結果をすぐに
確認できるので

*TC 00:02:34;06
直感的に楽しく身に付けることができます

*TC 00:02:37;16
それではサンプル コードを

*TC 00:02:39;12
いくつか実行してみましょう

*TC 00:02:40;28
このサンプル コードを実行して
結果を見てください

*TC 00:02:44;21
実行したスニペットは
あなたのカレンダーの全リストを取得して

*TC 00:02:47;02
タイトルを表示しましたね

*TC 00:02:49;25
埋め込み型の Google カレンダーを
引き出して

*TC 00:02:52;03
すべてあなたのカレンダーかどうかを
確認することもできます

*TC 00:02:58;20
それではコードを見ながら
この操作の仕組みを確認しましょう

*TC 00:03:02;12
まず、カレンダー サービス オブジェクトを作成して

*TC 00:03:05;18
アプリケーション名を渡す必要があります

*TC 00:03:09;27
次にこのリクエストを送信するフィード URL を

*TC 00:03:12;18
指定します

*TC 00:03:15;09
ここでは「allcalendar」フィードを
使用します

*TC 00:03:17;16
次にコールバック関数を定義します

*TC 00:03:20;13
この機能では、あなたのカレンダーのリストを
すべて確認し

*TC 00:03:24;17
タイトルを印刷します

*TC 00:03:27;08
印刷機能を使います

*TC 00:03:29;13 
この機能は、このデベロッパー ガイドで提供する

*TC 00:03:31;15
便利な方法です

*TC 00:03:34;13
「error handling」用にも
コールバック関数を

*TC 00:03:37;02
作成する必要があります

*TC 00:03:39;13
今、Output タブに
エラー メッセージを

*TC 00:03:41;27
出力しました

*TC 00:03:43;08
最後にこのリクエストを
サーバーに送信します

*TC 00:03:45;04
フィード URL、コールバック、エラー コールバックを渡して

*TC 00:03:49;10
カレンダー サービス オブジェクトを通じて

*TC 00:03:52;23
getALLCalendarsFeed を呼び出します

*TC 00:03:55;21
ではコードを編集してみましょう

*TC 00:03:58;04
カレンダーからタイムゾーンを
印刷するコードを

*TC 00:03:59;29
追加してみます

*TC 00:04:01;17
これは、テキスト エディタで
コードを変更するだけで

*TC 00:04:03;12
簡単に行えます

*TC 00:04:07;02
それではこのコードを実行します

*TC 00:04:12;22
タイトルとタイムゾーンを
カウントして出力しなければならない

*TC 00:04:15;25
ことがわかりますね

*TC 00:04:18;19
カレンダーからデータを読み込むのは
楽しいですね

*TC 00:04:20;29
さらにカレンダーにデータを
書き込んでみましょう

*TC 00:04:23;14
自分の Google カレンダー アカウントに
イベントを作成してみます

*TC 00:04:26;04
まず、もう一度サービス オブジェクトを
作成します

*TC 00:04:29;16
次にイベントの作成を行う
別の URL を指定する

*TC 00:04:31;25
必要があります

*TC 00:04:33;21
この「private/full」URL を 

*TC 00:04:35;24
これから使用します

*TC 00:04:38;24
次にこの新しいイベントを表す
MDB オブジェクトを

*TC 00:04:41;06
作成します

*TC 00:04:43;08
タイトルは「youtube video shoot」とします。

*TC 00:04:48;18
イベントと時間を関連付けるために
When オブジェクトを

*TC 00:04:50;16
作成します

*TC 00:04:51;24 
次に When オブジェクトが
daytime strain を使用する

*TC 00:04:53;09
開始時刻と終了時刻を設定します

*TC 00:04:56;03
ここでは
開始時刻を

*TC 00:04:58;23
本日の午前 9 時に

*TC 00:05:00;16
終了時刻は本日の午前 10 時に設定します

*TC 00:05:06;04
そして When オブジェクトに
時刻を設定します

*TC 00:05:11;06
When オブジェクトをイベントに追加します

*TC 00:05:14;11
イベントが作成される時間を
通知するコールバック関数を

*TC 00:05:16;13
指定する必要もあります

*TC 00:05:19;05
エラーの発生時に備えてerror handling メソッドも

*TC 00:05:21;23
指定します

*TC 00:05:23;16
最後に insert event メソッドを
呼び出して

*TC 00:05:26;06
このリクエストをサーバーに送信します

*TC 00:05:30;07
ではコードを実行してみましょう

*TC 00:05:35;09
データ カレンダーを見てみます

*TC 00:05:40;20
できましたね

*TC 00:05:44;13
JavaScript Client Library は
簡単に使えるということを

*TC 00:05:46;13
おわかりいただけたかと思います

*TC 00:05:48;07
対話型のデベロッパー ガイドでは
Calendar Data API のさまざまな

*TC 00:05:50;19
機能をご紹介するサンプルを
ご覧いただけます

*TC 00:05:53;10
ぜひご利用ください

*TC 00:05:56;00
その他のリソースについては
code.google.com にある

*TC 00:05:58;06
Calendar Data API のホームページを
ご覧ください

*TC 00:06:01;03
それではコーディングをお楽しみください