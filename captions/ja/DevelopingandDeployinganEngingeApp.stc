*TC 00:00:02;24
こんにちは
Brett Slatkin です


*TC 00:00:05;08
Google App Engine チームの
ソフトウェア エンジニアです

*TC 00:00:06;28
App Engine を使えば
Google のインフラ上で

*TC 00:00:09;05
ウェブ アプリケーションを
作成できます

*TC 00:00:10;20
今日は App Engine で
ゲスト ブック アプリケーションを

*TC 00:00:12;15
作成する方法についてご紹介します
さあ、始めましょう

*TC 00:00:16;10
まず新しいアプリケーション用の
ディレクトリを作成して

*TC 00:00:18;24
これをエディタに持ってきます

*TC 00:00:24;00
アプリケーション構成で
「app.yamo」ファイルを

*TC 00:00:25;14
作成します

*TC 00:00:29;23
アプリケーション名を入力します

*TC 00:00:32;06
アプリケーションのバージョン
ここでは

*TC 00:00:34;11
最初のバージョン

*TC 00:00:36;01
使用する API のバージョン

*TC 00:00:38;05
そしてランタイム
これは「python」

*TC 00:00:42;00
次に URL をアプリケーション
にマッピングする方法を

*TC 00:00:43;13
宣言します

*TC 00:00:45;19
ここでは、すべての URL を

*TC 00:00:48;16
「main」という Python
スクリプトにマッピングします

*TC 00:00:51;09
メインの Python ファイルを
作成しましょう

*TC 00:00:56;18
ごく基本的な「Hello world」
アプリケーションを入力します

*TC 00:01:06;17
では、ターミナルへ移動して
開発ウェブ サーバーを

*TC 00:01:08;01
開始します

*TC 00:01:12;00
サーバーは稼働しているので
移動して

*TC 00:01:13;29
「Hello World」アプリケーションを確認できます

*TC 00:01:19;26
もう少し複雑なことをしてみましょう

*TC 00:01:21;16
ウェブ アプリケーションを作成します

*TC 00:01:23;28
このために Google は
「Web App」という

*TC 00:01:26;10
基本的なウェブ アプリケーション
フレームワークを提供しています

*TC 00:01:28;01
「Web App」モジュールをインポートして

*TC 00:01:33;19
次にハンドラを定義し
これでアプリケーションからの


*TC 00:01:35;21
リクエストを処理します

*TC 00:01:42;03
このクラスのメソッドは
HTP リクエストを処理します

*TC 00:01:45;03
ここでは GET リクエストを処理し

*TC 00:01:47;22
「Hello World」メッセージを出力します

*TC 00:01:54;03
「スキーマ ハンドラ」を指定しますここでは
「wsgiref」を使用します

*TC 00:01:57;09
これは Python 標準のウェブ 
アプリケーション コンテナです

*TC 00:02:11;28
次に
「WSGIApplication」を定義してごく基本的なハンドラに

*TC 00:02:15;00
すべての URL アクセスをマッピングします

*TC 00:02:31;10
もちろんメイン機能を実行するために
Phython を指定します

*TC 00:02:40;08
ブラウザで確認してみましょう

*TC 00:02:44;19
表示されました正常に動作しています

*TC 00:02:48;01
ページの外観をよくするため
テンプレートを実行しましょう

*TC 00:02:50;23
このための基本的な
ライブラリが用意されています

*TC 00:02:54;22
Django を使ってテンプレート 
ファイルを作成しましょう

*TC 00:03:01;23
まず

*TC 00:03:04;00
「Hello World」と表示するHTML を作成します

*TC 00:03:09;08
テンプレート モジュールをインポートします

*TC 00:03:18;02
テンプレートをレンダリングします

*TC 00:03:28;12
これで、ブラウザで確認できます

*TC 00:03:34;06
ウェブ アプリケーションに基本の 
UI を実装してみましょう

*TC 00:03:37;26
テンプレート ファイルに戻り
UI と HTML.の記述を

*TC 00:03:40;23
始めます
それではまずフォームからです

*TC 00:03:47;05
今回は post にします

*TC 00:03:49;18
フォームにはいくつかの
フィールドがあります 

*TC 00:03:51;00
これはゲスト ブックですから

*TC 00:03:53;13
メッセージで始めましょう

*TC 00:03:55;19
ここではテキスト フィールドを
「message」にします

*TC 00:04:01;29
「submit」ボタンを変更して
「shout」にします

*TC 00:04:08;03
ブラウザに戻って表示します

*TC 00:04:12;07
このウェブ アプリケーションに
POST リクエストを処理させ

*TC 00:04:14;00
何か面白いことをさせてみましょう

*TC 00:04:18;05
「GET」だけでなく「POST」も
処理できるように

*TC 00:04:20;23
「MyHandler」を変更します

*TC 00:04:36;07 
データ ストアと関連付けてみましょう

*TC 00:04:39;02
データ ストアを使用するには
dv モジュールをインポートし

*TC 00:04:41;25
モデル クラスを見つけて
データ ストアに保存する

*TC 00:04:45;24
フィールドを定義します

*TC 00:04:48;02
ここでのモデル クラスは
「Shout」と呼ばれます

*TC 00:04:54;27
2 つのフィールドがあります
1 つ目はメッセージ

*TC 00:05:02;04
2 つ目はメッセージが
残された時刻です

*TC 00:05:13;05
POST メソッドで
リクエスト パラメータを使って

*TC 00:05:16;07
新しく「Shout」を作成し
データ ストアに置きます

*TC 00:05:28;16
ユーザーをメイン ページへ
リダイレクトします

*TC 00:05:32;26
ブラウザへ戻り
正常に動作していることを

*TC 00:05:34;18
確認します

*TC 00:05:38;25
POST を処理しデータ ストアに
POST とデータを置いていますが

*TC 00:05:40;13
データを取り出してはいません

*TC 00:05:42;12
そこでクエリを作成します
データを取り出して

*TC 00:05:44;19
ユーザーに表示できるようにするのです

*TC 00:05:46;14
これを行うために
「GqlQuery」を作成します

*TC 00:05:57;13
次に、クエリの結果を使用して

*TC 00:06:00;03
テンプレートを入力します

*TC 00:06:04;23
テンプレート レンダリングに値を渡します

*TC 00:06:10;22
これでテンプレートに行ったとき
クエリの結果を使用して

*TC 00:06:12;22
ユーザーにレンダリングできます

*TC 00:06:19;10
ここでは Django テンプレートを
使用しています

*TC 00:06:30;16
ブラウザへ戻って
すぐに動作していることを

*TC 00:06:32;14
確認します

*TC 00:06:36;15
前のリクエストが
2 つあります

*TC 00:06:39;21
メッセージをもういくつか入力します

*TC 00:06:43;08
これらは特定の順序で並んで
いるわけではありません

*TC 00:06:45;07
そこでクエリにソート順序を
追加したいと思います

*TC 00:06:59;21
新しいメッセージが一番上に来ます

*TC 00:07:04;29
モデルを変更して

*TC 00:07:07;07
「メッセージを送信する人」という
別のプロパティを持たせます

*TC 00:07:09;16
既にいくつかのメッセージを
明示的な送信者なしで

*TC 00:07:11;17
送信しているので
これはオプションにします

*TC 00:07:15;24
テンプレートへ行き
新しいフィールドを

*TC 00:07:16;24
追加します

*TC 00:07:29;07
入力フィールドにラベルを
付けてもよいでしょう

*TC 00:07:33;06
ショットを作成するとき
「who」フィールドを正しく入力したかを

*TC 00:07:35;04
確認する必要があります

*TC 00:07:41;03
各メッセージを送信した人を
レンダリングすることにします

*TC 00:07:43;03
テンプレートへ戻り
これも追加しましょう

*TC 00:07:51;18
ここでは「who」フィールドは
空です

*TC 00:07:53;12
匿名の送信者から
ということにします

*TC 00:08:10;06
ブラウザへ戻ると

*TC 00:08:11;09
このように表示されます

*TC 00:08:13;29
メッセージはすべて
匿名になっていますね

*TC 00:08:15;29
送信者のオプションが
なかったからです

*TC 00:08:17;08
送信者を私にしてメッセージを
追加してみます

*TC 00:08:24;10
私の名前が出てきました

*TC 00:08:27;11
最後に、表示するタイトルを
変えましょう

*TC 00:08:30;08
これは「shoutout!」という
私のアプリケーションです

*TC 00:08:36;00
このアプリケーションには
App Config ツールを使います

*TC 00:08:39;09
「appcfig update」と入力し
アプリケーションをデプロイし

*TC 00:08:41;21
アプリケーション ディレクトリに
名前を付けます

*TC 00:08:48;18
これで完了です

*TC 00:08:49;26
appspot.com でアプリケーションに
アクセスできます

*TC 00:08:57;24
メッセージを残しましょう

*TC 00:09:04;25
以上がアプリケーションを作成し
デプロイするプロセスです

*TC 00:09:08;10
Google App Engine を
是非ご検討ください 

*TC 00:09:10;02
コメントをお待ちしています

*TC 00:09:12;01
App Engine についてもっと
学びたい方は

*TC 00:09:13;23
5 月 28、29 日に
開催される

*TC 00:09:16;16
Google の開発者イベント
Google IO にご参加ください

*TC 00:09:18;17
ご視聴ありがとうございました



