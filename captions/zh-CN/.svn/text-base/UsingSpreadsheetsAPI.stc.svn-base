
*TC 00:00:06;27
您好！我是 Jeff Scudder，
我负责

*TC 00:00:09;21
Google 电子表格 Data API。 您可能
已经熟悉了

*TC 00:00:12;29
Google 电子表格。 它是一种网上电子表格
应用程序，

*TC 00:00:15;27
可用于进行
实时协作。

*TC 00:00:18;15
它是 Google 文档套件
的一部分。 电子表格 API

*TC 00:00:21;29
可让您通过使用您所选择的
语言进行编程来

*TC 00:00:24;24
访问和修改您的
电子表格数据。

*TC 00:00:28;13
Google 提供了
多种语言的客户端库，

*TC 00:00:31;04
从而简化了
电子表格 API

*TC 00:00:33;07
的使用。

*TC 00:00:34;23
最近，我又向 Python 库中
添加了一些东西，

*TC 00:00:37;26
这样便可以更为方便地
将电子表格作为简单的

*TC 00:00:40;14
文本数据库来使用。

*TC 00:00:42;22
将 Google 电子表格作为
简单的数据库来使用，

*TC 00:00:45;13
最大的好处之一就是
您可以通过一个友好的

*TC 00:00:49;09
用户界面来查看和修改
您的所有数据。

*TC 00:00:52;00
而且，您可以在任意一台
计算机上获取您的数据，

*TC 00:00:55;16
因为只要您接入互联网
即可处理

*TC 00:00:58;18
Google 文档中的数据。

*TC 00:01:00;10
让我们开始吧。

*TC 00:01:05;02
首先，Python 客户端库
是开源库，

*TC 00:01:08;12
您可以在
code.google.com/p/gdata-python-client 上获得。

*TC 00:01:16;07
该模块被称为
“文本数据库”，

*TC 00:01:19;26
位于 Google Data 客户端库的 
Google Data 电子表格包中。

*TC 00:01:24;21
电子表格模块可让您使用
电子表格 API 中的

*TC 00:01:28;02
所有功能，并且新的
“文本数据库”模块

*TC 00:01:31;17
就是以其为基础创建起来的。

*TC 00:01:33;09
“文本数据库”模块
可简化特定的使用情况， 

*TC 00:01:35;25
并且让电子表格 
API 在实际使用时能像使用

*TC 00:01:39;11
简单的数据库一样。

*TC 00:01:41;26
您还可以使用电子表格 API 
做很多其他的事情，

*TC 00:01:45;04
例如，使用公式、从
其他来源获取数据，

*TC 00:01:49;06
以及一次性更新大量
单元格。 

*TC 00:01:51;24
但我决定要讲的是如何
方便地使用该模块。

*TC 00:01:55;10
我们先来看一个
有关如何使用

*TC 00:01:57;26
“文本数据库”模块的示例。

*TC 00:02:00;15
我们首先导入
具有类的模块，

*TC 00:02:03;16
这些类可以让您随心所欲地将 
Google 电子表格作为

*TC 00:02:06;08
简单的云网数据库来使用。

*TC 00:02:08;16
接下来，我将导入一个演示模块，
它将为我输入我的电子邮件地址，

*TC 00:02:11;15
这样就不会因为这个
视频而让我的电子邮件地址

*TC 00:02:14;15
让众人皆知。

*TC 00:02:16;20
现在就可以使用我们的客户端
创建一个新的 Google 电子表格。

*TC 00:02:20;13
这非常简单， 只需提供
一个名称即可。

*TC 00:02:24;25
该数据库对象代表我们的
新 Google 电子表格，

*TC 00:02:28;22
现在就可以创建表格了。

*TC 00:02:30;19
但首先，让我们来看看
Google 文档中的这个文档。

*TC 00:02:37;01
好，让我们创建一个有关
骑士的表格，我们希望

*TC 00:02:40;12
知道他们的姓名、任务以及
最喜欢的颜色。

*TC 00:02:44;07
我们的电子表格中现在
有了一个新的工作表，

*TC 00:02:47;09
我们可以向其中添加一些信息。

*TC 00:02:49;08
现在让我打开它。

*TC 00:02:52;01
现在我们看到一条新行
显示在我们的电子表格中。

*TC 00:02:57;28
我们还可以通过
电子表格的用户界面

*TC 00:03:01;19
来添加信息。

*TC 00:03:06;04
如果要使用现有数据，
则可能需要先找到

*TC 00:03:09;14
该电子表格，您可通过
查找电子表格的名称或

*TC 00:03:12;12
唯一的电子表格关键字 ID 
来完成这一操作。

*TC 00:03:19;08
由于有多个电子表格
具有相同的该名称，

*TC 00:03:21;20
因此“getdatabases”
方法返回了一个列表。

*TC 00:03:26;09
您可以用多种方式
检索数据行。

*TC 00:03:29;11
您可以查找单个行，也可以
使用“getrecords”查找

*TC 00:03:32;26
某个范围内的行。

*TC 00:03:35;03
由于我们只有三行数据，
因此“rows”也就只包含

*TC 00:03:38;18
三个条目。

*TC 00:03:41;02
您也可以使用
电子表格结构化查询语言

*TC 00:03:43;25
来搜索符合
某些要求的行。

*TC 00:03:49;08
结构化查询可以使用“与”、
“或”、“小于”、“大于”、

*TC 00:03:54;06
“完全匹配”以及“非”等运算符。

*TC 00:03:57;22
最喜欢的颜色为蓝色的
骑士有两个。

*TC 00:04:02;02
因此，正如您所看到的一样，
我们有两个匹配项。

*TC 00:04:07;03
有了行之后，即可对 
Google 电子表格中的数据

*TC 00:04:10;17
进行更改。

*TC 00:04:12;02
在云网中存储数据的
潜在问题之一就是

*TC 00:04:14;22
读写操作可能会比较缓慢，
因为这些数据要通过

*TC 00:04:19;02
缓慢且可能会出现问题的
网络连接

*TC 00:04:22;15
来进行传输。 为了避免“文本数据库”库中
出现这种问题，

*TC 00:04:26;16
对本地对象的更改仅在
调用推进方法时

*TC 00:04:30;04
才发送到服务器。 在刚才的
示例中，

*TC 00:04:34;20
我们忘记输入 
Galahad 的任务。

*TC 00:04:36;26
现在我们就来为其输入任务。

*TC 00:04:38;27
让我们来看看
记录中的内容。

*TC 00:04:43;10
现在，我们要将此更改
发送至服务器，

*TC 00:04:46;20
在电子表格更新之后，
我们应该就可以看到该任务了。

*TC 00:04:50;22
我还看到，我们把 
Galahad 最喜欢的颜色

*TC 00:04:52;29
给弄错了。

*TC 00:04:54;06
要显示在数据本地副本外
所发生的检索更新，

*TC 00:04:57;04
我们要在
电子表格中

*TC 00:05:00;02
进行更改。

*TC 00:05:01;25
我们的本地副本尚未
发生更改，但在获取

*TC 00:05:06;04
数据之后，您就会看到
内容已经被更新了。

*TC 00:05:19;06
我刚刚向您展示了
通过“文本数据库”

*TC 00:05:21;25
像使用云网数据库一样
使用 Google 电子表格的

*TC 00:05:25;06
一个简单示例。

*TC 00:05:27;06
这只是使用
电子表格 API

*TC 00:05:29;08
的一种方法。

*TC 00:05:30;21
尽管该示例使用的是 
Python 语言，但

*TC 00:05:34;05
构建一个类似的库
几乎可以用到所有语言。

*TC 00:05:37;03
我在示例中所使用的
所有代码都是开源代码，

*TC 00:05:40;13
因此您可以按照自己的喜好
对其随意复制和修改。

*TC 00:05:43;22
如果您想到有关使用
电子表格 API

*TC 00:05:45;26
的一些有趣创意，
我们很乐意听听

*TC 00:05:48;27
您的意见。

*TC 00:05:50;14
您可以通过 Google 文档数据 API 
网上论坛与我们联系。

*TC 00:05:54;13
您也可以访问
 code.google.com

*TC 00:05:57;29
来查看 API 的文档























