*TC 00:00:02;24
您好！我叫 Brett Slatkin，是 
Google App Engine 团队的

*TC 00:00:05;08
软件工程师。

*TC 00:00:06;28
App Engine 可让编辑器
在 Google 的基础架构上构建

*TC 00:00:09;05
网络应用程序。

*TC 00:00:10;20
现在
我在这里向您展示

*TC 00:00:12;15
如何使用 App Engine 快速构建
访客留言簿应用程序。
让我们开始吧。

*TC 00:00:16;10
首先，我们为新应用程序
创建一个目录

*TC 00:00:18;24
并且将其放入我的编辑器。

*TC 00:00:24;00
然后
我会创建

*TC 00:00:25;14
具有我的应用程序配置的“app.yamo”文件。

*TC 00:00:29;23
我会键入我的应用程序名称。

*TC 00:00:32;06
该应用程序的版本，
在这种情况下，

*TC 00:00:34;11
是第一个版本。

*TC 00:00:36;01
我将要使用的 
API 版本。

*TC 00:00:38;05
以及运行时间
“python”。

*TC 00:00:42;00
然后我解释
我的网址如何映射到

*TC 00:00:43;13
我的应用程序。

*TC 00:00:45;19
在这种情况下，
我将把所有网址都转到

*TC 00:00:48;16
名为“main”的单一 python 脚本中。

*TC 00:00:51;09
我将创建
自己的主 python 文件。

*TC 00:00:56;18
我将在一个非常基本
的“Hello world”应用程序中键入。

*TC 00:01:06;17
现在我将到达终端
并开始

*TC 00:01:08;01
开发网络服务器。

*TC 00:01:12;00
现在该服务器正在运行，
我可以转入并查看

*TC 00:01:13;29
“Hello World”应用程序。

*TC 00:01:19;26
现在让我们进行更为复杂的操作
并构建

*TC 00:01:21;16
网络应用程序。

*TC 00:01:23;28
为了进行该操作，
我们提供了非常基本的

*TC 00:01:26;10
名为“Web App”的网络应用程序框架。

*TC 00:01:28;01
我将导入该“Web App”模块，
然后定义一个

*TC 00:01:33;19
处理程序，它会处理
来自该应用程序的

*TC 00:01:35;21
请求。

*TC 00:01:42;03
此类方式
会处理 HTP 请求。

*TC 00:01:45;03
在这种情况下，我只想要
处理获取请求，

*TC 00:01:47;22
并打印
“Hello World”讯息。

*TC 00:01:54;03
文本“概要处理程序
” 我将要使用“wsgiref”，

*TC 00:01:57;09
它是 python 标准网络应用程序容器。

*TC 00:02:11;28
我会将定义
“WSGIApplication”，贯穿

*TC 00:02:15;00
到所有对我的
基本处理程序网址的访问。

*TC 00:02:31;10
当然，要告知 phython 
运行我的主功能。

*TC 00:02:40;08
现在
让我们在浏览器中看一下。

*TC 00:02:44;19
太棒了。 它显示出来了
并且正在运行。

*TC 00:02:48;01
现在让我们创建一些模板，使该页面看起来更漂亮。

*TC 00:02:50;23
我们提供一个基本库
来进行此操作。

*TC 00:02:54;22
让我们使用 Django 模板
创建模板文件。

*TC 00:03:01;23
起初，
我仅有一些标有

*TC 00:03:04;00
“Hello World”的 HTML。

*TC 00:03:09;08
我将会导入
我们的模板模块，

*TC 00:03:18;02
然后呈现该模板。

*TC 00:03:28;12
接下来，就可以在我的浏览器中
对其进行查看。

*TC 00:03:34;06
现在让我们为网络应用程序
执行基本 UI。

*TC 00:03:37;26
我将返回到我的模板文件
并开始编写

*TC 00:03:40;23
我的 UI 和 HTML。
不过首先，我要有一个表格。

*TC 00:03:47;05
在这种情况下，我想要发帖。

*TC 00:03:49;18
该表格
将有若干个字段。 

*TC 00:03:51;00
因为这是一个访客留言簿，
所以让我们开始撰写

*TC 00:03:53;13
我的留言。

*TC 00:03:55;19
在这种情况下，
它只是具有“留言”的文本字段。

*TC 00:04:01;29
我们会把“提交”
按钮更改为“Shout”。

*TC 00:04:08;03
现在我们可以返回
并在我们的浏览器中对其进行查看。

*TC 00:04:12;07
现在，让我们用网络应用程序
处理发帖请求，

*TC 00:04:14;00
然后进行
更有趣的操作。

*TC 00:04:18;05
我会修改“我的处理程序”
来处理发帖请求，

*TC 00:04:20;23
以及“获取”请求。

*TC 00:04:36;07 
现在让我们
将其连接至数据存储。

*TC 00:04:39;02
为了使用数据存储，我要
导入 dv 模块


*TC 00:04:41;25
并查找表明
哪些字段必须存储在数据存储中

*TC 00:04:45;24
的模型类。

*TC 00:04:48;02
在这种情况下，我的模型类
将称为“Shout”。

*TC 00:04:54;27
我将拥有两个字段。
首先是留言。

*TC 00:05:02;04
然后是发布留言的
时间。

*TC 00:05:13;05
现在，以这种发帖方式，
我将使用请求参数

*TC 00:05:16;07
来创建新的“Shout”并
将其放置在数据存储中。

*TC 00:05:28;16
然后将用户
重新引导回主页。

*TC 00:05:32;26
接下来，我可以返回
我的浏览器并看到

*TC 00:05:34;18
它正在运行中。

*TC 00:05:38;25
现在我们正在处理帖子并在
数据存储中放置帖子和数据，

*TC 00:05:40;13
但是我们
没有对其进行检索。

*TC 00:05:42;12
所以让我们创建一个查询
以找回数据

*TC 00:05:44;19
并将它显示给用户。

*TC 00:05:46;14
要执行该操作，
我要创建“GqlQuery”。

*TC 00:05:57;13
然后使用
查询结果

*TC 00:06:00;03
来填充我的模板。

*TC 00:06:04;23
并且将值传递
到模板呈现器中。

*TC 00:06:10;22
这样，如果进入我的模板，
我便可以使用查询的结果

*TC 00:06:12;22
并且将其呈现
给用户。

*TC 00:06:19;10
在这种情况下，
我会使用 Django 模板。

*TC 00:06:30;16
现在我可以返回
我的浏览器并看到其

*TC 00:06:32;14
立即开始运行。

*TC 00:06:36;15
并且
有我以前的两个请求。

*TC 00:06:39;21
现在我可以键入
更多的留言。

*TC 00:06:43;08
您会看到它们没有
任何特定的顺序。

*TC 00:06:45;07
所以我想要为我的查询添加
一个排序顺序。

*TC 00:06:59;21
新的留言显示在顶部。

*TC 00:07:04;29
我将修改我的模型以获得
另一特性，

*TC 00:07:07;07
其为
“谁设置了留言？”

*TC 00:07:09;16
在这种情况下，这是可选的，
因为某些留言

*TC 00:07:11;17
是匿名发布的。

*TC 00:07:15;24
然后我会转入我的模板
并添加

*TC 00:07:16;24
该新字段。

*TC 00:07:29;07
您也可以在这些输入字段上
添加标签。

*TC 00:07:33;06
然后我需要确保
当我自己尝试时，

*TC 00:07:35;04
“作者”字段已正确填充。

*TC 00:07:41;03
我还想说明发布每个
留言的作者。

*TC 00:07:43;03
所以我返回我的模板
并将其添加。

*TC 00:07:51;18
在这种情况下，“作者”字段为空，
我只能说

*TC 00:07:53;12
这是匿名发布。

*TC 00:08:10;06
现在让我们返回浏览器并
查看

*TC 00:08:11;09
它的外观显示。

*TC 00:08:13;29
您可以看到所有留言都是
匿名发布，

*TC 00:08:15;29
因为它们全都没有发布者。

*TC 00:08:17;08
让我们添加一个
带有发布者的新留言。

*TC 00:08:24;10
您将会看到
我的名字。

*TC 00:08:27;11
我要做的最后一件事
是决定标题，

*TC 00:08:30;08
以指明这是我的名为“shoutout!”的
应用程序。

*TC 00:08:36;00
对于该应用程序，
我将使用 App Config 工具。

*TC 00:08:39;09
我只需键入“appcfig
update”来部署我的应用程序，

*TC 00:08:41;21
然后命名
应用程序目录。

*TC 00:08:48;18
我们完成了。

*TC 00:08:49;26
现在我可以在 appspot.com 上
访问该应用程序。

*TC 00:08:57;24
现在让我们留言。

*TC 00:09:04;25
就是这样。 我们构建了应用程序
并对其进行了部署。

*TC 00:09:08;10
我们希望
您试试 Google App Engine。 

*TC 00:09:10;02
我们期盼能看到
您的评论。

*TC 00:09:12;01
如果您想要了解更多有关 App Engine 的信息，
请参加 Google IO，

*TC 00:09:13;23
即 Google 的
开发人员活动，时间为

*TC 00:09:16;16
5 月 28 日和 29 日。

*TC 00:09:18;17
感谢观看。



