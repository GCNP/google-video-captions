1
00:00:01,100 --> 00:00:02,501
Lee: All right, thanks,
everyone, for coming.

2
00:00:02,501 --> 00:00:05,767
Um, first off,
my name's Bob Lee.

3
00:00:05,767 --> 00:00:09,000
And I'll be introducing you
to your speakers today.

4
00:00:09,000 --> 00:00:11,067
Before we get started,
I just want to remind you

5
00:00:11,067 --> 00:00:12,534
at the end of the session

6
00:00:12,534 --> 00:00:14,767
if you'd share your thoughts
and give us some feedback,

7
00:00:14,767 --> 00:00:17,534
we'd really appreciate it.

8
00:00:17,534 --> 00:00:20,567
Um, so I created Guice
about three years ago.

9
00:00:20,567 --> 00:00:23,501
And we open sourced it
two years ago.

10
00:00:23,501 --> 00:00:25,267
And it went on to win
the Jolt Award.

11
00:00:25,267 --> 00:00:30,701
And just last week,
we introduced Guice 2.

12
00:00:30,701 --> 00:00:33,467
And nowadays at Google,

13
00:00:33,467 --> 00:00:36,033
pretty much just about every
Java application

14
00:00:36,033 --> 00:00:38,501
also happens to be
a Guice application.

15
00:00:38,501 --> 00:00:40,000
And there are--
we found that they're

16
00:00:40,000 --> 00:00:43,100
a lot smaller and a lot more
maintainable for it.

17
00:00:43,100 --> 00:00:46,334
So our first speaker
is Dhanji.

18
00:00:46,334 --> 00:00:48,767
And Dhanji has been
working on Guice

19
00:00:48,767 --> 00:00:50,567
since before he even
came to Google.

20
00:00:50,567 --> 00:00:52,367
And he's responsible
for kind of our

21
00:00:52,367 --> 00:00:53,567
more Enterprise layer.

22
00:00:53,567 --> 00:00:55,767
You know, it integrates
Guice with servlets

23
00:00:55,767 --> 00:00:57,133
and whatnot.

24
00:00:57,133 --> 00:00:58,701
And Dhanji's also
written a book

25
00:00:58,701 --> 00:01:00,033
on dependency injection,

26
00:01:00,033 --> 00:01:01,767
which is heavily
focused on Guice,

27
00:01:01,767 --> 00:01:05,167
and I sure hope
he'll plug it in the talk.

28
00:01:05,167 --> 00:01:08,534
And Dhanji also works
on Google Wave,

29
00:01:08,534 --> 00:01:10,100
which you guys
learned about this morning,

30
00:01:10,100 --> 00:01:12,767
and, uh...

31
00:01:12,767 --> 00:01:14,467
which also happens to be
a Guice user.

32
00:01:14,467 --> 00:01:16,501
Next, we have Jesse Wilson.

33
00:01:16,501 --> 00:01:18,767
Uh, Jesse Wilson's
kind of the Guice star.

34
00:01:18,767 --> 00:01:22,200
He is responsible for--
"player."

35
00:01:22,200 --> 00:01:24,367
[laughing] He's responsible
for most of the development

36
00:01:24,367 --> 00:01:27,501
on Guice 2,
and he did an incredible job.

37
00:01:27,501 --> 00:01:29,767
Thanks.
Jesse: Cool.

38
00:01:29,767 --> 00:01:32,133
All right, uh...

39
00:01:32,133 --> 00:01:33,534
you've already got our names.

40
00:01:33,534 --> 00:01:37,300
Um, so I guess we should
get started.

41
00:01:37,300 --> 00:01:40,300
Uh, so we'll start out
by just saying

42
00:01:40,300 --> 00:01:41,734
what are you
expecting to get

43
00:01:41,734 --> 00:01:43,634
by sitting with us
for the next hour?

44
00:01:43,634 --> 00:01:46,467
Um, Guice is all about
dependency injection,

45
00:01:46,467 --> 00:01:48,767
and that is
the Hollywood principle.

46
00:01:48,767 --> 00:01:51,467
You know, don't call us,
we'll call you.

47
00:01:51,467 --> 00:01:53,300
So if you take
that principle

48
00:01:53,300 --> 00:01:56,467
and apply it to your
Java classes,

49
00:01:56,467 --> 00:01:59,133
Guice is sort of
what comes out of it.

50
00:01:59,133 --> 00:02:04,701
It's dependency injection
invented by Martin Fowler,

51
00:02:04,701 --> 00:02:07,167
and we'll just talk about
how Guice works

52
00:02:07,167 --> 00:02:08,734
and what you will--

53
00:02:08,734 --> 00:02:10,400
by applying Guice
to your application,

54
00:02:10,400 --> 00:02:13,300
you'll get more reusable code,
more modular code,

55
00:02:13,300 --> 00:02:14,667
more testable code,

56
00:02:14,667 --> 00:02:16,467
and you'll actually write
less code to do this.

57
00:02:16,467 --> 00:02:18,801
So...

58
00:02:18,801 --> 00:02:20,300
uh, do you want to do...

59
00:02:20,300 --> 00:02:22,167
Dhanji: Okay, so our talk
is split up

60
00:02:22,167 --> 00:02:23,334
into three parts.

61
00:02:23,334 --> 00:02:25,767
The Motivation,
Using Guice,

62
00:02:25,767 --> 00:02:27,434
and Leveraging Guice.

63
00:02:27,434 --> 00:02:30,534
So most of it's gonna
be introductory.

64
00:02:30,534 --> 00:02:32,400
We're gonna talk about
why we think

65
00:02:32,400 --> 00:02:34,234
you need
dependency injection

66
00:02:34,234 --> 00:02:36,701
or what the drawbacks are

67
00:02:36,701 --> 00:02:38,534
of not using
dependency injection.

68
00:02:38,534 --> 00:02:42,000
Uh, most applications,
sadly, even today

69
00:02:42,000 --> 00:02:43,767
don't make use of dependency
injection,

70
00:02:43,767 --> 00:02:46,467
and by that, I mean
the design pattern,

71
00:02:46,467 --> 00:02:47,767
not necessarily Guice

72
00:02:47,767 --> 00:02:50,033
or any of the other frameworks
that are out there.

73
00:02:50,033 --> 00:02:52,033
So it's important
to understand

74
00:02:52,033 --> 00:02:53,267
where we're coming from
when we say

75
00:02:53,267 --> 00:02:55,067
Guice makes your lives
easier

76
00:02:55,067 --> 00:02:57,000
by first looking
at how your lives

77
00:02:57,000 --> 00:02:58,100
are currently difficult.

78
00:02:58,100 --> 00:02:59,200
[Jesse laughs]

79
00:02:59,200 --> 00:03:00,767
Uh, so, and then we're
gonna talk about

80
00:03:00,767 --> 00:03:02,567
the API itself,

81
00:03:02,567 --> 00:03:04,100
what @Inject means.

82
00:03:04,100 --> 00:03:07,467
How @Inject replaces
your factory code.

83
00:03:07,467 --> 00:03:09,567
And, uh, and then finally
we'll take a look

84
00:03:09,567 --> 00:03:11,400
at the ecosystem

85
00:03:11,400 --> 00:03:12,734
and we'll spend some time
looking at

86
00:03:12,734 --> 00:03:14,767
all the extensions
that people have built

87
00:03:14,767 --> 00:03:18,767
around Guice that make
your lives really easy.

88
00:03:18,767 --> 00:03:22,200
Jesse: Okay, so we're gonna
write a Twitter client.

89
00:03:22,200 --> 00:03:23,334
Um, Twitter is taking
the world by storm,

90
00:03:23,334 --> 00:03:24,667
including Google.

91
00:03:24,667 --> 00:03:27,767
And so just to demo
the code that you might write,

92
00:03:27,767 --> 00:03:29,467
we'll use Twitter
as our example.

93
00:03:29,467 --> 00:03:30,767
We'll start by writing
some code

94
00:03:30,767 --> 00:03:32,033
using the factory pattern,

95
00:03:32,033 --> 00:03:34,267
and we'll show
all the drawbacks.

96
00:03:34,267 --> 00:03:36,267
And then we'll move to Guice
and show what happens

97
00:03:36,267 --> 00:03:37,634
and how your code changes.

98
00:03:37,634 --> 00:03:39,501
So hopefully, the code
that you're looking at

99
00:03:39,501 --> 00:03:41,868
will be familiar,
and you can see, you know,

100
00:03:41,868 --> 00:03:43,767
"Oh, that's code I would have
written," or something.

101
00:03:43,767 --> 00:03:46,100
And then we'll show
how your code would change

102
00:03:46,100 --> 00:03:47,534
if you were to use
dependency injection,

103
00:03:47,534 --> 00:03:51,133
and then if you were to use
dependency injection and Guice.

104
00:03:51,133 --> 00:03:53,000
So here's some code
you might write.

105
00:03:53,000 --> 00:03:56,767
This is the ClickHandler
for a--

106
00:03:56,767 --> 00:03:58,534
the post button on
a Twitter client.

107
00:03:58,534 --> 00:04:00,701
And so the idea is
is that

108
00:04:00,701 --> 00:04:02,400
when somebody clicks "post,"

109
00:04:02,400 --> 00:04:04,133
we pull the text
out of the text field,

110
00:04:04,133 --> 00:04:05,601
see if it's too long.

111
00:04:05,601 --> 00:04:07,300
If it's too long,
we try to shorten it

112
00:04:07,300 --> 00:04:09,767
using TinyURL shortener.

113
00:04:09,767 --> 00:04:11,567
And then we tweet it off,

114
00:04:11,567 --> 00:04:14,200
and we're using SMS
as our transport

115
00:04:14,200 --> 00:04:16,767
to send our tweet
to Twitter servers.

116
00:04:16,767 --> 00:04:19,701
So you may have noticed
that the code

117
00:04:19,701 --> 00:04:21,167
in this example

118
00:04:21,167 --> 00:04:24,067
actually builds
its dependencies immediately.

119
00:04:24,067 --> 00:04:27,167
So we say
new TinyUrl.Shortener

120
00:04:27,167 --> 00:04:28,767
and new SmsTweeter.

121
00:04:28,767 --> 00:04:31,334
And this is--
this is really convenient

122
00:04:31,334 --> 00:04:32,501
and it's really terse

123
00:04:32,501 --> 00:04:33,834
but there's a lot
of problems with it.

124
00:04:33,834 --> 00:04:36,567
Most notably, this code
doesn't lend itself to testing.

125
00:04:36,567 --> 00:04:39,467
Um, we can't run this code
and say,

126
00:04:39,467 --> 00:04:40,601
"I'm gonna write a test

127
00:04:40,601 --> 00:04:41,667
to make sure
everything's working,"

128
00:04:41,667 --> 00:04:43,767
because every time
you run that test

129
00:04:43,767 --> 00:04:45,767
you're actually gonna end up
doing an SMS.

130
00:04:45,767 --> 00:04:47,601
So that means that you have
to have a device

131
00:04:47,601 --> 00:04:50,067
that has an SMS
to run the code on,

132
00:04:50,067 --> 00:04:51,767
and you have to pay the SMS
bill at the end of the month

133
00:04:51,767 --> 00:04:53,100
if you do that.

134
00:04:53,100 --> 00:04:54,767
And also, you're also
sort of at the mercy

135
00:04:54,767 --> 00:04:57,767
of whether or not
Tiny URL is working today.

136
00:04:57,767 --> 00:04:58,834
Dhanji: And it
doesn't really help

137
00:04:58,834 --> 00:05:00,767
with testing automation.

138
00:05:00,767 --> 00:05:03,000
Jesse: Yeah.

139
00:05:03,000 --> 00:05:05,767
So tell us
what factories are, Dhanji.

140
00:05:05,767 --> 00:05:07,601
Dhanji: Okay,
so the traditional solution

141
00:05:07,601 --> 00:05:09,567
to that problem
has been factories.

142
00:05:09,567 --> 00:05:11,767
So a factory
is a third-party object

143
00:05:11,767 --> 00:05:15,267
it's just--it's another
class that we've written--

144
00:05:15,267 --> 00:05:19,067
that separates
the post button clicked method

145
00:05:19,067 --> 00:05:20,267
and the class
that it contains

146
00:05:20,267 --> 00:05:22,767
from the actual services
that it requires.

147
00:05:22,767 --> 00:05:25,334
So here, we don't have
a direct dependency.

148
00:05:25,334 --> 00:05:27,033
We have
an indirect dependency.

149
00:05:27,033 --> 00:05:30,133
So the shortener is now
not necessarily

150
00:05:30,133 --> 00:05:31,634
a tiny URL shortener.

151
00:05:31,634 --> 00:05:34,133
It's just something we get
from the shortener factory.

152
00:05:34,133 --> 00:05:36,334
And similarly,
for the tweeter factory.

153
00:05:36,334 --> 00:05:38,400
All right?

154
00:05:38,400 --> 00:05:40,501
Now, the factory itself

155
00:05:40,501 --> 00:05:43,634
is directly dependent
on the SMS tweeter,

156
00:05:43,634 --> 00:05:44,734
for instance.

157
00:05:44,734 --> 00:05:46,667
Uh, so in this case,
what we've done

158
00:05:46,667 --> 00:05:48,667
is we've taken
that hard dependency

159
00:05:48,667 --> 00:05:52,267
that we had between
the post button handler

160
00:05:52,267 --> 00:05:54,767
and the actual services
that we want,

161
00:05:54,767 --> 00:05:57,767
and we've inserted
one layer of abstraction

162
00:05:57,767 --> 00:05:58,868
in between.

163
00:05:58,868 --> 00:06:01,534
It helps us, but not quite.

164
00:06:01,534 --> 00:06:03,234
Let's see why not.

165
00:06:03,234 --> 00:06:04,767
Jesse: So immediately,
one problem is

166
00:06:04,767 --> 00:06:06,434
you have to actually write
this factory class.

167
00:06:06,434 --> 00:06:08,434
And so, if you have
a whole bunch of classes,

168
00:06:08,434 --> 00:06:10,167
that means you have to write
a whole bunch of factories.

169
00:06:10,167 --> 00:06:11,300
And this is code
that slows you down.

170
00:06:11,300 --> 00:06:12,767
It's not very interesting.

171
00:06:12,767 --> 00:06:16,200
Uh, it's another thing that
you have to version control

172
00:06:16,200 --> 00:06:18,300
and code review,
and it's just more code

173
00:06:18,300 --> 00:06:20,067
that doesn't actually
get you anywhere

174
00:06:20,067 --> 00:06:22,767
in writing tweet--
Twitter clients.

175
00:06:22,767 --> 00:06:25,767
So, uh,
as Dhanji alluded to,

176
00:06:25,767 --> 00:06:28,267
the factory adds
an interaction layer

177
00:06:28,267 --> 00:06:30,701
between the Tweet client
and the SMS twit--tweeter

178
00:06:30,701 --> 00:06:33,367
that is actually going to be
doing the implementation for us.

179
00:06:33,367 --> 00:06:35,767
But, unfortunately,
the dependency is still there,

180
00:06:35,767 --> 00:06:37,267
indirectly.

181
00:06:37,267 --> 00:06:39,467
And so what happens is
when we write applications

182
00:06:39,467 --> 00:06:41,033
in this style,

183
00:06:41,033 --> 00:06:42,400
anything that you depend on

184
00:06:42,400 --> 00:06:44,400
you need to compile
at the same time.

185
00:06:44,400 --> 00:06:47,000
So you've got this
compilation time dependency,

186
00:06:47,000 --> 00:06:48,267
and what ends up happening

187
00:06:48,267 --> 00:06:50,601
is you have to build
your entire application

188
00:06:50,601 --> 00:06:52,767
any time you want to build
any part of your application.

189
00:06:52,767 --> 00:06:54,667
Your application
isn't very modular.

190
00:06:54,667 --> 00:06:57,634
And so if we take this
to the logical extreme,

191
00:06:57,634 --> 00:06:59,200
what happens
is your application blows up

192
00:06:59,200 --> 00:07:01,367
in a firestorm of pain
and dependencies

193
00:07:01,367 --> 00:07:05,501
because now everything
depends on everything.

194
00:07:05,501 --> 00:07:07,767
So the other problem
with the factory

195
00:07:07,767 --> 00:07:09,000
is it's awkward to test.

196
00:07:09,000 --> 00:07:11,701
So I was writing a test
for our tweeter client,

197
00:07:11,701 --> 00:07:12,767
and I wrote this.

198
00:07:12,767 --> 00:07:15,501
And so I set up,
uh, a mock tweeter,

199
00:07:15,501 --> 00:07:17,634
which lets me intercept
the text that gets tweeted.

200
00:07:17,634 --> 00:07:19,167
Instead of sending it to SMS,

201
00:07:19,167 --> 00:07:21,234
I can actually just take
an in-memory object

202
00:07:21,234 --> 00:07:22,234
and get the tweet from there.

203
00:07:22,234 --> 00:07:24,767
So I wrote this test.

204
00:07:24,767 --> 00:07:27,767
Dhanji: Well, that's a good
start that you have there.

205
00:07:27,767 --> 00:07:30,100
So you're using
a special mock tweeter

206
00:07:30,100 --> 00:07:31,133
in your factory.

207
00:07:31,133 --> 00:07:32,234
So now, when you call "get,"

208
00:07:32,234 --> 00:07:35,033
it's gonna get
the mock instance.

209
00:07:35,033 --> 00:07:36,767
But I'm not quite
satisfied with this.

210
00:07:36,767 --> 00:07:38,534
Can you tell me
what's wrong?

211
00:07:38,534 --> 00:07:40,767
Jesse: So the problem is that

212
00:07:40,767 --> 00:07:42,367
when I'm using
this mock tweeter,

213
00:07:42,367 --> 00:07:43,767
my test is gonna run,

214
00:07:43,767 --> 00:07:45,000
we're gonna click
the post button,

215
00:07:45,000 --> 00:07:46,400
we're gonna get the text
out of the tweet--

216
00:07:46,400 --> 00:07:47,767
out of the mock tweeter
at the very end

217
00:07:47,767 --> 00:07:49,267
on this last line.

218
00:07:49,267 --> 00:07:51,767
But the problem is
is that, now,

219
00:07:51,767 --> 00:07:53,434
I've left
my mock tweeter behind.

220
00:07:53,434 --> 00:07:55,167
I forgot to clean up
after myself.

221
00:07:55,167 --> 00:07:57,200
Fortunately,
there's an easy fix,

222
00:07:57,200 --> 00:07:59,667
and that is that you have
to actually add code

223
00:07:59,667 --> 00:08:01,434
to tear down the mock tweeter
at the end.

224
00:08:01,434 --> 00:08:03,534
So whenever you write
this factory pattern,

225
00:08:03,534 --> 00:08:04,801
you don't even need to worry

226
00:08:04,801 --> 00:08:06,167
about just setting up
your mocks

227
00:08:06,167 --> 00:08:08,267
and getting your tests--
your application testable,

228
00:08:08,267 --> 00:08:09,467
you have to also worry

229
00:08:09,467 --> 00:08:11,367
about tearing everything down
afterwards.

230
00:08:11,367 --> 00:08:14,601
Dhanji: This is a lot better,
but it's still not perfect.

231
00:08:14,601 --> 00:08:16,033
Jesse: Oh, okay.

232
00:08:16,033 --> 00:08:17,200
So...it turns out

233
00:08:17,200 --> 00:08:18,501
that this still
isn't sufficient

234
00:08:18,501 --> 00:08:19,767
to test with factories

235
00:08:19,767 --> 00:08:21,100
because you still
need to worry about

236
00:08:21,100 --> 00:08:23,467
the case where,
if my test fails,

237
00:08:23,467 --> 00:08:25,100
it'll throw in
the assert method

238
00:08:25,100 --> 00:08:27,033
and it won't actually
get to tear down my fac--

239
00:08:27,033 --> 00:08:28,834
tear down my mock tweeter.

240
00:08:28,834 --> 00:08:30,067
So you actually need
to put it

241
00:08:30,067 --> 00:08:31,400
try finally clause.

242
00:08:31,400 --> 00:08:32,734
This is really ugly code.

243
00:08:32,734 --> 00:08:34,367
You don't want to see it
in your application.

244
00:08:34,367 --> 00:08:36,300
It adds another layer
of control flow

245
00:08:36,300 --> 00:08:37,767
that you don't really
have to think about.

246
00:08:37,767 --> 00:08:39,400
And we haven't even gotten
to the point

247
00:08:39,400 --> 00:08:43,200
of setting up
the TinyURL mock yet, so...

248
00:08:43,200 --> 00:08:46,200
Dhanji: So you guys see
it's not just your factories

249
00:08:46,200 --> 00:08:48,467
that get polluted with
all this extra code

250
00:08:48,467 --> 00:08:50,601
in order to enable testing.

251
00:08:50,601 --> 00:08:52,400
But even your tests
are polluted

252
00:08:52,400 --> 00:08:54,567
with all this extra code
in order to enable testing.

253
00:08:54,567 --> 00:08:55,834
Jesse: Yeah, yeah.

254
00:08:55,834 --> 00:08:57,567
Uh...the problem is
is that

255
00:08:57,567 --> 00:09:00,234
when testing becomes
this complicated,

256
00:09:00,234 --> 00:09:02,033
you just don't want
to write any tests.

257
00:09:02,033 --> 00:09:03,367
And if you don't write tests,

258
00:09:03,367 --> 00:09:04,601
you don't have confidence
in your application,

259
00:09:04,601 --> 00:09:06,267
and you don't
get to ship Wave on time.

260
00:09:06,267 --> 00:09:08,767
So, uh, Dependency Injection
by hand.

261
00:09:08,767 --> 00:09:11,667
And Dependency Injection
is sort of

262
00:09:11,667 --> 00:09:13,334
a technology
or design pattern

263
00:09:13,334 --> 00:09:16,133
that addresses this problem
very delicately.

264
00:09:16,133 --> 00:09:19,167
So the principle is
instead of saying,

265
00:09:19,167 --> 00:09:21,434
"Hey, shortener factory,
give me a shortener;

266
00:09:21,434 --> 00:09:23,000
hey, tweeter factory,
give me a tweeter,"

267
00:09:23,000 --> 00:09:24,534
we pass those in.

268
00:09:24,534 --> 00:09:26,501
So here's the constructive
for TweetClient.

269
00:09:26,501 --> 00:09:29,033
And it actually takes
a shortener and a tweeter.

270
00:09:29,033 --> 00:09:31,434
And now it's the caller's
responsibility to decide

271
00:09:31,434 --> 00:09:33,501
which implementations
to use.

272
00:09:33,501 --> 00:09:35,767
This is this Hollywood
principle again.

273
00:09:35,767 --> 00:09:37,300
We'll call you
with your dependencies.

274
00:09:37,300 --> 00:09:40,400
Don't ask for them.
They'll just be passed in.

275
00:09:40,400 --> 00:09:42,567
And what's absolutely
brilliant about this

276
00:09:42,567 --> 00:09:44,400
is that now we don't need
to worry about

277
00:09:44,400 --> 00:09:46,767
passing in real dependencies
in our, uh,

278
00:09:46,767 --> 00:09:47,767
we don't
have to worry about

279
00:09:47,767 --> 00:09:49,767
setting up teardown
in our test.

280
00:09:49,767 --> 00:09:51,467
And since we're passing them
into the constructer

281
00:09:51,467 --> 00:09:52,701
of TweetClient here--

282
00:09:52,701 --> 00:09:54,000
so I say new TweetClient,

283
00:09:54,000 --> 00:09:55,767
and I pass in the dependencies
I want to use--

284
00:09:55,767 --> 00:09:58,601
not only do I have to not
worry about tearing it down,

285
00:09:58,601 --> 00:10:01,601
but I also don't have to worry
about forgetting something.

286
00:10:01,601 --> 00:10:03,767
So you may have written
applications where,

287
00:10:03,767 --> 00:10:05,567
you know, you get your test,
you get everything compiled,

288
00:10:05,567 --> 00:10:06,767
and you run your test,

289
00:10:06,767 --> 00:10:08,434
and then at runtime
it fails immediately

290
00:10:08,434 --> 00:10:11,267
because you forgot
to prepare some factory.

291
00:10:11,267 --> 00:10:13,234
You know, you forgot
to initialize something

292
00:10:13,234 --> 00:10:15,100
or get something started up.

293
00:10:15,100 --> 00:10:17,667
And so now your application
gets this sort of gross,

294
00:10:17,667 --> 00:10:19,234
bootstrap system where

295
00:10:19,234 --> 00:10:20,767
in order to actually
write a test,

296
00:10:20,767 --> 00:10:22,534
you need to, you know,
start the service,

297
00:10:22,534 --> 00:10:24,767
connect to the database,
do this, the other thing,

298
00:10:24,767 --> 00:10:26,501
test that the SMS radio
is turned on,

299
00:10:26,501 --> 00:10:27,534
and now we can test.

300
00:10:27,534 --> 00:10:29,234
Well,
with dependency injection,

301
00:10:29,234 --> 00:10:31,000
your dependencies
are obvious

302
00:10:31,000 --> 00:10:34,767
and they're part
of your API.

303
00:10:34,767 --> 00:10:39,367
But this is where dependency
injection breaks down.

304
00:10:39,367 --> 00:10:43,200
Okay, so what we have here
is a client factory,

305
00:10:43,200 --> 00:10:45,734
and it does all of the work
of providing

306
00:10:45,734 --> 00:10:48,534
the dependencies
to our object.

307
00:10:48,534 --> 00:10:50,601
But we've just moved it
one step further.

308
00:10:50,601 --> 00:10:52,501
We had the tweeter factory

309
00:10:52,501 --> 00:10:53,868
and we had
the shortener factory.

310
00:10:53,868 --> 00:10:57,000
Uh, but now we've, like,
pushed it one step further

311
00:10:57,000 --> 00:10:59,267
in order to make
our tweet client

312
00:10:59,267 --> 00:11:00,968
dependency injectable.

313
00:11:00,968 --> 00:11:02,767
So, I mean,
we've saved a little,

314
00:11:02,767 --> 00:11:05,167
but we've still got our
factory code

315
00:11:05,167 --> 00:11:06,534
to write and maintain,

316
00:11:06,534 --> 00:11:07,701
and it still looks ugly,

317
00:11:07,701 --> 00:11:10,501
and there's still
the same problem.

318
00:11:10,501 --> 00:11:12,000
It's just one step removed.

319
00:11:12,000 --> 00:11:15,434
So the idea of all
this dependency injection

320
00:11:15,434 --> 00:11:17,400
is we've broken
this hard dependency

321
00:11:17,400 --> 00:11:20,734
from tweet client onto
its TinyURL shortener

322
00:11:20,734 --> 00:11:22,334
and SMS tweeter,

323
00:11:22,334 --> 00:11:25,200
and by moving it, we only
depend on the interfaces,

324
00:11:25,200 --> 00:11:26,501
which is just fantastic.

325
00:11:26,501 --> 00:11:29,334
It means we can compile and test
and do all these things.

326
00:11:29,334 --> 00:11:32,133
But we've really just
shifted the dependency

327
00:11:32,133 --> 00:11:34,200
over to our tweet clients
in our factories,

328
00:11:34,200 --> 00:11:36,033
and we just had to write
a lot of factories

329
00:11:36,033 --> 00:11:37,200
to get this done, right?

330
00:11:37,200 --> 00:11:38,767
There's--there's
three factors here.

331
00:11:38,767 --> 00:11:40,734
That's a lot of code
that you have to write.

332
00:11:40,734 --> 00:11:43,501
And so we have to have
something else.

333
00:11:43,501 --> 00:11:44,934
There's got to be
something better.

334
00:11:44,934 --> 00:11:47,267
And that something is Guice.

335
00:11:47,267 --> 00:11:49,767
So with Guice,
you take your factories

336
00:11:49,767 --> 00:11:51,767
and you replace them

337
00:11:51,767 --> 00:11:54,367
with a combination
of injectors and modules.

338
00:11:54,367 --> 00:11:57,400
And so instead of writing
all about

339
00:11:57,400 --> 00:11:58,801
imperative code
to figure out

340
00:11:58,801 --> 00:12:01,367
how to build an SMS tweeter,
and, uh,

341
00:12:01,367 --> 00:12:03,133
an URL shortener,

342
00:12:03,133 --> 00:12:04,267
instead, you create a module,

343
00:12:04,267 --> 00:12:06,667
and this maps
the implementations,

344
00:12:06,667 --> 00:12:08,334
the interfaces
to their implementations.

345
00:12:08,334 --> 00:12:10,767
And injector
is a Guice-applied class

346
00:12:10,767 --> 00:12:13,601
that basically acts
as your factory,

347
00:12:13,601 --> 00:12:15,434
and it's one-stop-does-
everything factory

348
00:12:15,434 --> 00:12:16,801
for your application,

349
00:12:16,801 --> 00:12:20,334
and it does it in
a dependency injection idiom.

350
00:12:20,334 --> 00:12:21,701
Dhanji:
And, more importantly,

351
00:12:21,701 --> 00:12:23,534
it's a factory
that you don't have to write

352
00:12:23,534 --> 00:12:25,367
and you never
have to maintain.

353
00:12:25,367 --> 00:12:26,868
Jesse: Yeah, yeah.

354
00:12:26,868 --> 00:12:29,968
All right, so now can
configure our dependencies

355
00:12:29,968 --> 00:12:31,634
using a module.

356
00:12:31,634 --> 00:12:33,567
And so, instead of writing
that 12 lines of factory

357
00:12:33,567 --> 00:12:35,767
for tweeter and 12 lines
of factory for shortener

358
00:12:35,767 --> 00:12:37,767
and 12 lines of factory
for everything else,

359
00:12:37,767 --> 00:12:40,267
instead,
we have one statement

360
00:12:40,267 --> 00:12:43,100
which is bind interface
to implementation.

361
00:12:43,100 --> 00:12:44,767
And this is how
you configure Guice,

362
00:12:44,767 --> 00:12:49,200
and that creates an injector
that works the way you'd like.

363
00:12:49,200 --> 00:12:52,133
So the change
to the client code

364
00:12:52,133 --> 00:12:54,234
is you add
the inject annotation,

365
00:12:54,234 --> 00:12:56,767
and that just is a signal
to Guice to say

366
00:12:56,767 --> 00:12:59,501
whenever somebody
wants to factory construct

367
00:12:59,501 --> 00:13:01,100
a tweet client,

368
00:13:01,100 --> 00:13:04,300
call this constructor,
so...

369
00:13:04,300 --> 00:13:06,701
Dhanji: So it's--we've
taken that entire factory

370
00:13:06,701 --> 00:13:08,767
with all
of that boilerplate code

371
00:13:08,767 --> 00:13:11,434
and that testing code
that accompanied it,

372
00:13:11,434 --> 00:13:14,434
and shortened it to the one
little @Inject annotation

373
00:13:14,434 --> 00:13:15,734
that you see there.

374
00:13:15,734 --> 00:13:16,934
And that's all Guice needs

375
00:13:16,934 --> 00:13:18,767
in order to be able
to provide this class

376
00:13:18,767 --> 00:13:20,701
with its dependencies.

377
00:13:20,701 --> 00:13:22,267
Now, that's a great saving.

378
00:13:22,267 --> 00:13:23,667
Jesse: [whispering]
Yeah, yeah!

379
00:13:23,667 --> 00:13:26,634
Especially since
it's such a savings encode,

380
00:13:26,634 --> 00:13:27,968
you'll actually
tend to do it.

381
00:13:27,968 --> 00:13:30,067
And we believe that when
you use dependency injection,

382
00:13:30,067 --> 00:13:31,400
you'll write better codes.

383
00:13:31,400 --> 00:13:32,634
You'll write better code,
more testable code,

384
00:13:32,634 --> 00:13:33,934
more modular code.

385
00:13:33,934 --> 00:13:36,534
Um, here are the four lines
of code that you need

386
00:13:36,534 --> 00:13:38,234
to bootstrap Guice.

387
00:13:38,234 --> 00:13:40,033
Uh, you need to create
an injector

388
00:13:40,033 --> 00:13:43,367
with your module
or your list of modules.

389
00:13:43,367 --> 00:13:44,767
Then you can
use that injector

390
00:13:44,767 --> 00:13:46,100
to get an instance
of something.

391
00:13:46,100 --> 00:13:49,234
So this is just like
your factory used to do.

392
00:13:49,234 --> 00:13:51,701
Now you can say, "Hey, injector,
give me a tweet client,"

393
00:13:51,701 --> 00:13:54,767
and it's parameterized on
what you want it to construct.

394
00:13:54,767 --> 00:13:56,501
And it's fully type-safe.

395
00:13:56,501 --> 00:13:58,267
So if you've ever used

396
00:13:58,267 --> 00:14:00,100
Spring dependency
injection tools,

397
00:14:00,100 --> 00:14:02,667
then you'll notice that
it's not type-safe,

398
00:14:02,667 --> 00:14:03,767
and you'll to do
a lot of casting

399
00:14:03,767 --> 00:14:05,734
and you need to do
a little finger crossing

400
00:14:05,734 --> 00:14:07,567
to make sure that what
you ask the injector for

401
00:14:07,567 --> 00:14:08,701
is what you get.

402
00:14:08,701 --> 00:14:10,100
With Guice,
it's fully type-safe.

403
00:14:10,100 --> 00:14:12,767
The type that you pass in
is the type it will return.

404
00:14:12,767 --> 00:14:15,434
And if it's not there,
it'll blow up spectacularly

405
00:14:15,434 --> 00:14:19,200
and tell you all of the details
of what went wrong.

406
00:14:19,200 --> 00:14:22,767
So that's
the motivation for Guice.

407
00:14:22,767 --> 00:14:24,634
And now we're gonna just
dive into

408
00:14:24,634 --> 00:14:27,367
all of the minutiae
of the Guice API

409
00:14:27,367 --> 00:14:28,767
and explain how you use it,

410
00:14:28,767 --> 00:14:32,701
what the day-to-day life
of Guice development is like.

411
00:14:32,701 --> 00:14:35,767
So why?

412
00:14:35,767 --> 00:14:38,767
Dhanji: Okay, so we've already
said that boilerplate code

413
00:14:38,767 --> 00:14:42,400
is messy and it's difficult
to test and maintain.

414
00:14:42,400 --> 00:14:44,467
And it's just
nothing that, uh, we--

415
00:14:44,467 --> 00:14:47,400
as a developer, you want
to spend your time doing.

416
00:14:47,400 --> 00:14:49,767
But there are also
other reasons to use Guice.

417
00:14:49,767 --> 00:14:52,701
Like Jesse said,
there's a lot of type safety

418
00:14:52,701 --> 00:14:54,300
that you gain from Guice.

419
00:14:54,300 --> 00:14:56,434
And this is because
when you tell Guice,

420
00:14:56,434 --> 00:14:58,767
when you give it
that bind statement,

421
00:14:58,767 --> 00:15:00,267
that's actually
a signal to Guice

422
00:15:00,267 --> 00:15:02,534
to go out there
and look at that class

423
00:15:02,534 --> 00:15:04,501
and make sure that
all the dependencies

424
00:15:04,501 --> 00:15:06,467
for that class
are also available,

425
00:15:06,467 --> 00:15:09,567
and that's valid in a way
in which

426
00:15:09,567 --> 00:15:11,667
it can construct it
at runtime for you.

427
00:15:11,667 --> 00:15:13,100
And that's--
that's really useful.

428
00:15:13,100 --> 00:15:14,601
More often than not,
you'll find

429
00:15:14,601 --> 00:15:17,767
that fixing one small error
by hand in a factory

430
00:15:17,767 --> 00:15:20,200
and then recompiling--

431
00:15:20,200 --> 00:15:21,734
you go a bit further
down the line,

432
00:15:21,734 --> 00:15:22,868
you find another error,

433
00:15:22,868 --> 00:15:24,767
but Guice does
all of this type checking

434
00:15:24,767 --> 00:15:26,133
upfront for you

435
00:15:26,133 --> 00:15:27,767
and gives you
a long error list

436
00:15:27,767 --> 00:15:30,634
the first time
you deploy it.

437
00:15:30,634 --> 00:15:32,767
Jesse: It gives you
JavaC-style errors

438
00:15:32,767 --> 00:15:34,267
that you can even click on

439
00:15:34,267 --> 00:15:35,501
and navigate
right in your code

440
00:15:35,501 --> 00:15:37,467
to the bind statement
that didn't work.

441
00:15:37,467 --> 00:15:39,701
Um, in addition,
when you use Guice--

442
00:15:39,701 --> 00:15:42,100
this is really
the real value of Guice,

443
00:15:42,100 --> 00:15:46,367
and this is growing
as our community matures.

444
00:15:46,367 --> 00:15:49,534
You get scopes, which is
an absolutely humungous,

445
00:15:49,534 --> 00:15:50,701
cool feature.

446
00:15:50,701 --> 00:15:53,067
You get aspect-oriented
programming,

447
00:15:53,067 --> 00:15:55,133
which is something
that you may like.

448
00:15:55,133 --> 00:15:56,767
It turns out to be
very, very convenient

449
00:15:56,767 --> 00:15:58,400
in your larger,

450
00:15:58,400 --> 00:15:59,734
Enterprisey-style
applications,

451
00:15:59,734 --> 00:16:01,667
as well as any application
where you have

452
00:16:01,667 --> 00:16:02,767
cross-cutting concerns.

453
00:16:02,767 --> 00:16:04,467
And there's
tight integration

454
00:16:04,467 --> 00:16:06,300
with a whole bunch
of different APIs

455
00:16:06,300 --> 00:16:07,734
that you already
are using,

456
00:16:07,734 --> 00:16:10,267
such as servlets
and databases

457
00:16:10,267 --> 00:16:12,901
and RPC systems, et cetera.

458
00:16:12,901 --> 00:16:14,767
Oh! And, uh--

459
00:16:14,767 --> 00:16:16,467
Dhanji: Google Wave.

460
00:16:16,467 --> 00:16:18,701
Jesse: If all these technical
reasons weren't enough,

461
00:16:18,701 --> 00:16:20,234
well, Wave uses Guice,

462
00:16:20,234 --> 00:16:22,701
so why aren't you, right?

463
00:16:22,701 --> 00:16:26,100
All right,
so in a nutshell,

464
00:16:26,100 --> 00:16:29,033
classes have dependencies.

465
00:16:29,033 --> 00:16:30,334
And modules define

466
00:16:30,334 --> 00:16:31,734
how these dependencies
are resolved.

467
00:16:31,734 --> 00:16:34,067
This is the--this
is the whole concept, right?

468
00:16:34,067 --> 00:16:36,400
You have code,
it has dependencies.

469
00:16:36,400 --> 00:16:38,033
Today, you use factories,

470
00:16:38,033 --> 00:16:40,100
And with Guice,
it's the same thing.

471
00:16:40,100 --> 00:16:41,567
You have dependencies.

472
00:16:41,567 --> 00:16:43,434
And then you configure it
with Guice.

473
00:16:43,434 --> 00:16:44,767
You configure
your dependencies

474
00:16:44,767 --> 00:16:46,767
and the resolution
using modules.

475
00:16:46,767 --> 00:16:50,467
So let's investigate
that, uh, module resolution.

476
00:16:50,467 --> 00:16:53,767
And that's called a binding.

477
00:16:53,767 --> 00:16:55,701
Dhanji: Okay, so--

478
00:16:55,701 --> 00:16:57,000
Jesse: I'll go.
Dhanji: You want to do it?

479
00:16:57,000 --> 00:16:59,033
Jesse: All right,
so we've got a module

480
00:16:59,033 --> 00:17:00,601
with four bindings here.

481
00:17:00,601 --> 00:17:02,767
Uh, there are the three
statements in the code,

482
00:17:02,767 --> 00:17:05,234
the bind tweak line--
the bind tweeter,

483
00:17:05,234 --> 00:17:06,634
bind string,
those lines.

484
00:17:06,634 --> 00:17:10,100
And then method that has
@Provides annotation.

485
00:17:10,100 --> 00:17:11,767
And so these
are four bindings

486
00:17:11,767 --> 00:17:12,767
and we'll go into detail

487
00:17:12,767 --> 00:17:15,601
and explain how
each of them works.

488
00:17:15,601 --> 00:17:16,767
All right, so...

489
00:17:16,767 --> 00:17:18,767
Dhanji: [laughs]

490
00:17:18,767 --> 00:17:21,400
Okay, so this
is a simple bind statement.

491
00:17:21,400 --> 00:17:24,434
All this says
is it tells Guice

492
00:17:24,434 --> 00:17:27,701
to look in that class
and use it any time

493
00:17:27,701 --> 00:17:30,701
it appears as a dependency
in any other code

494
00:17:30,701 --> 00:17:32,033
that you have.

495
00:17:32,033 --> 00:17:34,767
So what you need to do
in the tweet client

496
00:17:34,767 --> 00:17:37,267
is place an @Inject
annotation,

497
00:17:37,267 --> 00:17:38,634
like we saw just earlier,

498
00:17:38,634 --> 00:17:40,767
on the constructor
that you want to use,

499
00:17:40,767 --> 00:17:43,167
and all the dependencies
of that constructor

500
00:17:43,167 --> 00:17:46,300
will be filled in
for you by Guice.

501
00:17:46,300 --> 00:17:48,200
Jesse: So, uh...

502
00:17:48,200 --> 00:17:51,300
Whoops, this one.

503
00:17:51,300 --> 00:17:53,100
All right, so the next
type of binding

504
00:17:53,100 --> 00:17:54,267
is called a provider method,

505
00:17:54,267 --> 00:17:55,567
and this is really,
really handy,

506
00:17:55,567 --> 00:17:57,100
and its new
in Guice version 2,

507
00:17:57,100 --> 00:17:58,767
which we released last week.

508
00:17:58,767 --> 00:18:01,534
So a provider method is

509
00:18:01,534 --> 00:18:04,400
whenever somebody
asks me for this type,

510
00:18:04,400 --> 00:18:05,801
run this little bit of code

511
00:18:05,801 --> 00:18:07,767
in order to calculate it
or to compute it

512
00:18:07,767 --> 00:18:09,767
or to fetch it
or to construct it.

513
00:18:09,767 --> 00:18:12,667
So this sort of is your
traditional factory method

514
00:18:12,667 --> 00:18:15,634
type of operation where
you can create something,

515
00:18:15,634 --> 00:18:17,334
configure it,
and then return it.

516
00:18:17,334 --> 00:18:19,334
And the way you do
a provider method binding

517
00:18:19,334 --> 00:18:22,133
is somewhere
in your module class

518
00:18:22,133 --> 00:18:25,267
you have a method with
the @Provides annotation

519
00:18:25,267 --> 00:18:27,200
and the return type
that you'd like to bind.

520
00:18:27,200 --> 00:18:29,100
So in this case, we say,

521
00:18:29,100 --> 00:18:30,601
@Provides Shortener,

522
00:18:30,601 --> 00:18:33,701
which says this method
is a binding for Shortener,

523
00:18:33,701 --> 00:18:36,100
and then whenever Guice
needs to inject

524
00:18:36,100 --> 00:18:37,667
a shortener or to find
a shortener

525
00:18:37,667 --> 00:18:39,067
for somebody else's
dependency,

526
00:18:39,067 --> 00:18:40,601
it will run this code.

527
00:18:40,601 --> 00:18:42,767
And what's really handy
about provider methods

528
00:18:42,767 --> 00:18:45,534
is that they can have
dependencies of their own.

529
00:18:45,534 --> 00:18:47,501
So if you want to provide
a shortener

530
00:18:47,501 --> 00:18:50,400
and it has a dependency
on some HTP factory

531
00:18:50,400 --> 00:18:51,601
or something like that,

532
00:18:51,601 --> 00:18:53,367
you can pass
that dependency in

533
00:18:53,367 --> 00:18:55,000
via the parameter
of the method.

534
00:18:55,000 --> 00:18:58,000
So not only can
your classes have methods,

535
00:18:58,000 --> 00:19:01,000
but your providers--your
provider methods themselves

536
00:19:01,000 --> 00:19:02,067
can have dependencies,

537
00:19:02,067 --> 00:19:05,100
because your application
is effectively

538
00:19:05,100 --> 00:19:07,767
a big graph
of this depends on that.

539
00:19:07,767 --> 00:19:09,000
You know, my user interface

540
00:19:09,000 --> 00:19:11,000
depends on the components
inside of it.

541
00:19:11,000 --> 00:19:13,501
Et cetera.

542
00:19:13,501 --> 00:19:17,434
All right.

543
00:19:17,434 --> 00:19:20,767
Dhanji: Okay, so this
is a slightly longer form

544
00:19:20,767 --> 00:19:22,133
of the bind statement.

545
00:19:22,133 --> 00:19:25,234
And what we're saying here
is bind this interface

546
00:19:25,234 --> 00:19:26,767
to this implementation.

547
00:19:26,767 --> 00:19:29,400
So tweeter is the interface
that we have.

548
00:19:29,400 --> 00:19:31,767
We don't know how the tweets
actually go out.

549
00:19:31,767 --> 00:19:34,067
Um, but SmsTweeter
does now.

550
00:19:34,067 --> 00:19:37,367
SmsTweeter sends them
over the short message service.

551
00:19:37,367 --> 00:19:39,667
So all this is saying
is every place

552
00:19:39,667 --> 00:19:41,701
that you see tweeter
as a dependency,

553
00:19:41,701 --> 00:19:44,767
make sure that SmsTweeter
is provided.

554
00:19:44,767 --> 00:19:47,234
And the great saving here is,
of course,

555
00:19:47,234 --> 00:19:48,667
none of the client code

556
00:19:48,667 --> 00:19:50,767
knows that there
is an SmsTweeter

557
00:19:50,767 --> 00:19:52,234
being used underneath.

558
00:19:52,234 --> 00:19:55,200
It just uses it when
it's available at runtime.

559
00:19:55,200 --> 00:19:57,767
Jesse: Yeah, so, you know,
six months down the road,

560
00:19:57,767 --> 00:20:00,000
if we decide that
the SmsTweeter isn't optimal,

561
00:20:00,000 --> 00:20:02,067
or if we want to use
a JSONTweeter

562
00:20:02,067 --> 00:20:03,601
or some other protocol,

563
00:20:03,601 --> 00:20:05,767
all we have to do is change
this one statement

564
00:20:05,767 --> 00:20:08,234
and say, "Okay, now I'm gonna
bind my tweeter

565
00:20:08,234 --> 00:20:11,200
"to my JSONTweeter
of my AJAXTweeter

566
00:20:11,200 --> 00:20:13,033
or my XML,"
or something like that,

567
00:20:13,033 --> 00:20:15,434
any transport
that would be used.

568
00:20:15,434 --> 00:20:19,133
Uh, so what's actually happening
behind the scenes here

569
00:20:19,133 --> 00:20:20,467
is there's two bindings.

570
00:20:20,467 --> 00:20:22,734
There's the binding
for tweeter to SmsTweeter.

571
00:20:22,734 --> 00:20:24,133
And then there's
a second binding,

572
00:20:24,133 --> 00:20:27,000
which is SmsTweeter
to its own constructor.

573
00:20:27,000 --> 00:20:28,767
So when Guice sees this,

574
00:20:28,767 --> 00:20:30,300
it's actually going to create
a binding for tweeter,

575
00:20:30,300 --> 00:20:32,767
and then it'll look
at the SmsTweeter's binding.

576
00:20:32,767 --> 00:20:36,501
And in this case, it'll just
use that class as constructor.

577
00:20:36,501 --> 00:20:38,534
All right.

578
00:20:38,534 --> 00:20:39,734
Uh, Binding Annotations.

579
00:20:39,734 --> 00:20:42,767
So, so far, we've always
been talking about

580
00:20:42,767 --> 00:20:45,234
the unit of a dependency
is a type.

581
00:20:45,234 --> 00:20:47,400
So you can say, "Okay,
I depend on a tweeter

582
00:20:47,400 --> 00:20:48,767
or a shortener."

583
00:20:48,767 --> 00:20:52,534
But oftentimes, the type
doesn't uniquely identify

584
00:20:52,534 --> 00:20:54,601
what you really want
in your dependency.

585
00:20:54,601 --> 00:20:58,200
So if you say, "Okay,
I want my database address,"

586
00:20:58,200 --> 00:21:01,100
or, "I want the port
I'm supposed to bind on,"

587
00:21:01,100 --> 00:21:02,767
it's not really
sufficient to say,

588
00:21:02,767 --> 00:21:03,767
"Just inject a string,"

589
00:21:03,767 --> 00:21:05,400
because there may be
multiple strings

590
00:21:05,400 --> 00:21:06,767
and you need to really
identify,

591
00:21:06,767 --> 00:21:09,267
"Okay, I want the string
that is the database addressed,

592
00:21:09,267 --> 00:21:10,767
"or the string that is--

593
00:21:10,767 --> 00:21:12,501
the integer
that is the port number."

594
00:21:12,501 --> 00:21:15,100
And so Guice uses
a type-safe way

595
00:21:15,100 --> 00:21:16,601
to identify bindings

596
00:21:16,601 --> 00:21:19,234
in addition
to the bindings type itself.

597
00:21:19,234 --> 00:21:21,200
And these are called
binding annotations.

598
00:21:21,200 --> 00:21:24,501
And so you can annotate
a parameter

599
00:21:24,501 --> 00:21:26,801
with an annotation
that you define

600
00:21:26,801 --> 00:21:30,934
that identifies which instance
of that type you want.

601
00:21:30,934 --> 00:21:35,400
So in this case,
I'm binding the string "jesse"

602
00:21:35,400 --> 00:21:37,234
annotated with Username.

603
00:21:37,234 --> 00:21:38,767
And this is, again, indirect.

604
00:21:38,767 --> 00:21:41,234
So we can say,
"Okay, I want a...

605
00:21:41,234 --> 00:21:43,667
uh, an annotation
called port number

606
00:21:43,667 --> 00:21:45,701
or an annotation called
database address."

607
00:21:45,701 --> 00:21:47,567
So you can use Guice
to configure not only

608
00:21:47,567 --> 00:21:49,200
your class dependencies,

609
00:21:49,200 --> 00:21:51,267
but also, all of your
configuration dependencies.

610
00:21:51,267 --> 00:21:52,767
So you can--you don't
have to worry about

611
00:21:52,767 --> 00:21:55,100
having these
separate mechanisms

612
00:21:55,100 --> 00:21:56,501
for how you connect
to your database,

613
00:21:56,501 --> 00:21:58,167
how you connect
to remote services,

614
00:21:58,167 --> 00:22:01,767
you can use Guice
to configure everything.

615
00:22:01,767 --> 00:22:04,767
And this is the standard
boilerplate you need

616
00:22:04,767 --> 00:22:06,767
to define user annotation.

617
00:22:06,767 --> 00:22:09,133
I'm not gonna go too much
into detail on it,

618
00:22:09,133 --> 00:22:11,767
but this is just--every time
you want to define

619
00:22:11,767 --> 00:22:13,501
a custom name
for something,

620
00:22:13,501 --> 00:22:14,734
use this boilerplate.

621
00:22:14,734 --> 00:22:17,033
You're saying
about his and hers?

622
00:22:17,033 --> 00:22:19,634
Dhanji: Oh, yeah,
so the great thing about this

623
00:22:19,634 --> 00:22:21,767
is it does look like
a little bit of boilerplate,

624
00:22:21,767 --> 00:22:25,367
but the awesome saving
is it's purely

625
00:22:25,367 --> 00:22:26,767
a bit of metadata, right?

626
00:22:26,767 --> 00:22:29,200
You can reuse it
across your application

627
00:22:29,200 --> 00:22:30,767
for several purposes.

628
00:22:30,767 --> 00:22:34,067
You might bind
"jesse" to the user name,

629
00:22:34,067 --> 00:22:37,634
where you use it
in a login-style scenario.

630
00:22:37,634 --> 00:22:39,634
But you might
bind something else

631
00:22:39,634 --> 00:22:41,534
to a user name somewhere else
for a different type.

632
00:22:41,534 --> 00:22:43,334
So it's completely flexible,

633
00:22:43,334 --> 00:22:46,334
and it doesn't force you
to bind directly

634
00:22:46,334 --> 00:22:48,734
to the actual implementation
that's underneath.

635
00:22:48,734 --> 00:22:50,367
So in the tweeter case,

636
00:22:50,367 --> 00:22:53,300
you might bind it
to a current transporter,

637
00:22:53,300 --> 00:22:54,567
paid transport,

638
00:22:54,567 --> 00:22:57,767
and, really, that paid transport
is an SMS transport.

639
00:22:57,767 --> 00:22:59,767
But you can reuse
the paid annotation

640
00:22:59,767 --> 00:23:03,300
to bind, say, a credit card
transport--

641
00:23:03,300 --> 00:23:05,033
or a credit card
service, sorry--

642
00:23:05,033 --> 00:23:07,767
or any number of other
dependencies.

643
00:23:07,767 --> 00:23:09,234
Jesse: And one really
nice thing about the way

644
00:23:09,234 --> 00:23:10,701
Guice does dependency
injection is that

645
00:23:10,701 --> 00:23:14,100
this annotation is compiled
into your code.

646
00:23:14,100 --> 00:23:16,367
So this is just standard
Java code,

647
00:23:16,367 --> 00:23:17,767
and if you spell
user name wrong,

648
00:23:17,767 --> 00:23:19,767
the compiler will tell you,
or, more likely,

649
00:23:19,767 --> 00:23:22,267
if you're using an IDE
like IntelliJ or Eclipse,

650
00:23:22,267 --> 00:23:23,767
it'll highlight it in red,

651
00:23:23,767 --> 00:23:25,767
and make sure you spell
everything properly.

652
00:23:25,767 --> 00:23:27,901
All right, so the last
type of binding

653
00:23:27,901 --> 00:23:29,667
we're gonna talk about
is an instance binding.

654
00:23:29,667 --> 00:23:32,767
And we already sort of saw this
with the "jesse" example,

655
00:23:32,767 --> 00:23:35,367
where you can give
an actual value

656
00:23:35,367 --> 00:23:36,734
that you want to bind to.

657
00:23:36,734 --> 00:23:40,534
So, in this case,
instead of hard coating 8080

658
00:23:40,534 --> 00:23:43,200
as a public data constant
in 10,000 classes,

659
00:23:43,200 --> 00:23:45,767
you can configure it
once in your module,

660
00:23:45,767 --> 00:23:47,701
and then everywhere
that you need that constant,

661
00:23:47,701 --> 00:23:48,767
you just inject it.

662
00:23:48,767 --> 00:23:50,467
And this really
overcomes this problem

663
00:23:50,467 --> 00:23:51,701
where, you know,

664
00:23:51,701 --> 00:23:53,767
if you decide you want
to run your FTP server

665
00:23:53,767 --> 00:23:55,767
on Port 22
instead of 21,

666
00:23:55,767 --> 00:23:58,267
you have to go in and change
10,000 pieces of code

667
00:23:58,267 --> 00:23:59,400
where that's wired.

668
00:23:59,400 --> 00:24:02,534
And the, uh,
the main problem is that

669
00:24:02,534 --> 00:24:04,100
when you do
that type of approach,

670
00:24:04,100 --> 00:24:07,601
you either have the 10,000
different definitions of that

671
00:24:07,601 --> 00:24:09,534
or you have some file
called "constants"

672
00:24:09,534 --> 00:24:11,467
that everything else
has to depend on.

673
00:24:11,467 --> 00:24:15,067
So this is a nice balance.

674
00:24:15,067 --> 00:24:16,634
All right,
you talk about scopes.

675
00:24:16,634 --> 00:24:19,267
Dhanji: Okay, so scopes
are very interesting.

676
00:24:19,267 --> 00:24:22,067
They're really hard for me
to define

677
00:24:22,067 --> 00:24:23,634
in one, simple way.

678
00:24:23,634 --> 00:24:26,167
So I'll use the simplest
explanation

679
00:24:26,167 --> 00:24:29,000
that I could think of.

680
00:24:29,000 --> 00:24:32,000
For me, scopes
are about duration, right?

681
00:24:32,000 --> 00:24:36,033
You can talk about scopes
as a context,

682
00:24:36,033 --> 00:24:38,167
for instance,
an HTP request

683
00:24:38,167 --> 00:24:39,767
is a scope in Guice.

684
00:24:39,767 --> 00:24:42,734
Or an HTTP session,
which is a series of requests

685
00:24:42,734 --> 00:24:45,067
that come in a sequence.

686
00:24:45,067 --> 00:24:46,767
Or you can talk
about singletons,

687
00:24:46,767 --> 00:24:50,400
objects that live throughout
the life of an application.

688
00:24:50,400 --> 00:24:52,167
That is a Scope
in itself.

689
00:24:52,167 --> 00:24:55,767
So these are short
or longer durations

690
00:24:55,767 --> 00:24:59,300
during which any dependency
injection that's performed

691
00:24:59,300 --> 00:25:02,033
will always receive
the same instance

692
00:25:02,033 --> 00:25:03,767
of the dependency.

693
00:25:03,767 --> 00:25:07,501
Jesse: So, uh, when you
do your factory pattern,

694
00:25:07,501 --> 00:25:10,634
you'll often have, you know,
a private static constant

695
00:25:10,634 --> 00:25:12,767
that is, you know,
the tweeter.

696
00:25:12,767 --> 00:25:15,033
And when you say,
"Give me the tweeter,"

697
00:25:15,033 --> 00:25:16,767
you might lazily
instantiate it.

698
00:25:16,767 --> 00:25:18,467
And then, for the rest
of your application,

699
00:25:18,467 --> 00:25:19,767
you always get
the same instance.

700
00:25:19,767 --> 00:25:22,334
With scopes, you can
get that sort of

701
00:25:22,334 --> 00:25:24,234
application-wide constant

702
00:25:24,234 --> 00:25:26,300
without having to actually
write the statics

703
00:25:26,300 --> 00:25:27,567
and without
having to compromise

704
00:25:27,567 --> 00:25:29,000
your application's
testability.

705
00:25:29,000 --> 00:25:31,267
In our cute diagram here,

706
00:25:31,267 --> 00:25:33,534
we have this sort of long,
blue line,

707
00:25:33,534 --> 00:25:35,234
which is the duration
of the application.

708
00:25:35,234 --> 00:25:38,667
Um, this is a very abstract
example, without a legend,

709
00:25:38,667 --> 00:25:40,634
so I'll describe
what I'm thinking

710
00:25:40,634 --> 00:25:41,767
when I'm drawing this.

711
00:25:41,767 --> 00:25:44,767
Um, the red bars
are HTTP sessions,

712
00:25:44,767 --> 00:25:46,701
and the blue bars
are HTTP requests.

713
00:25:46,701 --> 00:25:48,200
And so you can see
that the scopes

714
00:25:48,200 --> 00:25:49,634
nest inside of each other.

715
00:25:49,634 --> 00:25:52,601
So you can have, like,
your application lives

716
00:25:52,601 --> 00:25:54,467
for several hours
or several days

717
00:25:54,467 --> 00:25:55,534
or several months,

718
00:25:55,534 --> 00:25:57,067
depending on how
your uptime is.

719
00:25:57,067 --> 00:26:00,701
And then every session
gets its own context,

720
00:26:00,701 --> 00:26:02,567
and then every request

721
00:26:02,567 --> 00:26:03,601
gets its own context.

722
00:26:03,601 --> 00:26:05,767
And this
is the HTTP example,

723
00:26:05,767 --> 00:26:07,167
but you can come up
with scopes

724
00:26:07,167 --> 00:26:09,367
for any number
of different contexts

725
00:26:09,367 --> 00:26:11,534
that exist
in your application.

726
00:26:11,534 --> 00:26:13,734
Uh, so we've already
sort of talked about this.

727
00:26:13,734 --> 00:26:15,167
These are the common scopes.

728
00:26:15,167 --> 00:26:18,033
So the most natural one
is Unscoped,

729
00:26:18,033 --> 00:26:20,767
and that means that any time
you want a value,

730
00:26:20,767 --> 00:26:22,567
it will be created,
you use it,

731
00:26:22,567 --> 00:26:23,767
and then you throw it away.

732
00:26:23,767 --> 00:26:25,467
Uh, the opposite
is Singleton,

733
00:26:25,467 --> 00:26:26,734
where any time
you need a value

734
00:26:26,734 --> 00:26:28,567
it's created exactly once,

735
00:26:28,567 --> 00:26:30,234
and you always, always
use the same one.

736
00:26:30,234 --> 00:26:32,334
This is great if your
application is stateful,

737
00:26:32,334 --> 00:26:33,667
and you want
to do something like

738
00:26:33,667 --> 00:26:35,567
track the number of hits
on your sever

739
00:26:35,567 --> 00:26:36,767
since it was started.

740
00:26:36,767 --> 00:26:38,767
Because you can just say,
"Use a singleton,"

741
00:26:38,767 --> 00:26:40,367
and every time
somebody does something,

742
00:26:40,367 --> 00:26:41,667
you call increment.

743
00:26:41,667 --> 00:26:44,367
Uh, RequestScope
is fantastic.

744
00:26:44,367 --> 00:26:47,767
And it says, "For the duration
of my HTTP request,

745
00:26:47,767 --> 00:26:49,067
remember this value."

746
00:26:49,067 --> 00:26:50,434
This is particularly handy

747
00:26:50,434 --> 00:26:53,300
if you're doing
a several-tier application

748
00:26:53,300 --> 00:26:54,701
where you want to say,

749
00:26:54,701 --> 00:26:56,701
"I don't really want
to go back to the database

750
00:26:56,701 --> 00:26:58,133
"every single time
I want to remember

751
00:26:58,133 --> 00:26:59,667
who the current user is."

752
00:26:59,667 --> 00:27:01,667
You can just put that
in a RequestScoped object

753
00:27:01,667 --> 00:27:03,200
and it remembers.

754
00:27:03,200 --> 00:27:06,200
And SessionScoped
is the same process

755
00:27:06,200 --> 00:27:07,767
for the HTTP session.

756
00:27:07,767 --> 00:27:10,234
So if you have, uh,
if you have any session data,

757
00:27:10,234 --> 00:27:14,601
like a cache, this works
very nicely for that.

758
00:27:14,601 --> 00:27:18,400
So that's how you apply scopes
to your objects in Guice.

759
00:27:18,400 --> 00:27:21,434
Uh, you just annotate them
with the name of the Scope.

760
00:27:21,434 --> 00:27:23,501
We're very annotation happy
in Guice.

761
00:27:23,501 --> 00:27:27,234
And this is both
functional, because it says,

762
00:27:27,234 --> 00:27:28,934
"Okay, there will only be
one tweet client

763
00:27:28,934 --> 00:27:30,400
for the duration
of the application."

764
00:27:30,400 --> 00:27:32,534
But it's also documentation.

765
00:27:32,534 --> 00:27:35,367
So when you're seeing this
class tweet client,

766
00:27:35,367 --> 00:27:36,734
and you're maintaining it,

767
00:27:36,734 --> 00:27:38,634
the singleton annotation
is a really good hint

768
00:27:38,634 --> 00:27:40,000
that you may have to think
about concurrency

769
00:27:40,000 --> 00:27:41,300
when you're maintaining this.

770
00:27:41,300 --> 00:27:43,534
Because singletons
are naturally--

771
00:27:43,534 --> 00:27:48,167
uh, need to be multithreaded
in multithreaded applications.

772
00:27:48,167 --> 00:27:50,667
All right, um, if you want
to apply a scope

773
00:27:50,667 --> 00:27:52,300
in a binding instead,

774
00:27:52,300 --> 00:27:53,567
you can also do that.

775
00:27:53,567 --> 00:27:55,467
So here we're saying,

776
00:27:55,467 --> 00:27:58,834
"Bind my ConnectionPool
to the ExecutorServicePool

777
00:27:58,834 --> 00:28:00,100
as a Singleton,"

778
00:28:00,100 --> 00:28:02,000
which is
.in(Singleton.class).

779
00:28:02,000 --> 00:28:04,634
Or in your provide method
you just annotate the method.

780
00:28:04,634 --> 00:28:05,701
And that'll mean that Guice

781
00:28:05,701 --> 00:28:07,801
will only call that method
one time,

782
00:28:07,801 --> 00:28:09,367
and then it'll just
remember the value.

783
00:28:09,367 --> 00:28:11,000
And any time anybody
wants a shortener,

784
00:28:11,000 --> 00:28:16,634
it just uses
that same instance.

785
00:28:16,634 --> 00:28:18,868
Dhanji: Uh...cool, okay.

786
00:28:18,868 --> 00:28:21,300
So there are different
kinds of injections

787
00:28:21,300 --> 00:28:22,868
that Guice supports,

788
00:28:22,868 --> 00:28:25,634
and constructor injection
is the most obvious one.

789
00:28:25,634 --> 00:28:27,334
This is the one that
we've been talking about.

790
00:28:27,334 --> 00:28:29,033
This is where you pass in
all your dependencies

791
00:28:29,033 --> 00:28:30,400
via constructor,

792
00:28:30,400 --> 00:28:32,300
and you place
an @Inject annotation

793
00:28:32,300 --> 00:28:34,000
on the constructor

794
00:28:34,000 --> 00:28:36,467
to tell Guice to use it.

795
00:28:36,467 --> 00:28:38,901
Now, the advantage
to constructor injection

796
00:28:38,901 --> 00:28:40,667
is--is really great,

797
00:28:40,667 --> 00:28:44,868
because you can declare
your dependencies as final,

798
00:28:44,868 --> 00:28:46,534
which makes them immutable.

799
00:28:46,534 --> 00:28:50,100
Now, this is great
for any concurrent class

800
00:28:50,100 --> 00:28:51,400
where you have
multiple threads

801
00:28:51,400 --> 00:28:54,200
accessing the code
in the same class.

802
00:28:54,200 --> 00:28:57,200
Then you have no danger
of state leaking

803
00:28:57,200 --> 00:28:58,501
between these threads,

804
00:28:58,501 --> 00:28:59,834
because there
is no state, right?

805
00:28:59,834 --> 00:29:02,100
You don't change the values.

806
00:29:02,100 --> 00:29:04,601
It's also great
for publication,

807
00:29:04,601 --> 00:29:07,534
which is--which means
that once the value is set,

808
00:29:07,534 --> 00:29:09,133
it's seen by all threads,

809
00:29:09,133 --> 00:29:10,767
and you never have
any danger

810
00:29:10,767 --> 00:29:13,367
of a NullPointerException.

811
00:29:13,367 --> 00:29:15,467
You also have
method injection,

812
00:29:15,467 --> 00:29:18,234
which is traditionally
called setter injection.

813
00:29:18,234 --> 00:29:21,300
And this is almost exactly
like constructor injection,

814
00:29:21,300 --> 00:29:24,801
but it's called after
the constructors have run.

815
00:29:24,801 --> 00:29:28,234
And what this is
is just a simple setter method,

816
00:29:28,234 --> 00:29:30,934
so you pass in your dependency
via a setter.

817
00:29:30,934 --> 00:29:33,634
And the method doesn't
have to be called

818
00:29:33,634 --> 00:29:35,300
Set Shortener
or Set whatever.

819
00:29:35,300 --> 00:29:36,801
It can be called
anything you like,

820
00:29:36,801 --> 00:29:38,968
so long as it has
an @Inject annotation

821
00:29:38,968 --> 00:29:41,400
and it doesn't only
have to take

822
00:29:41,400 --> 00:29:43,534
the one parameter.

823
00:29:43,534 --> 00:29:45,133
It can take as many
arguments as you like,

824
00:29:45,133 --> 00:29:47,234
just like a constructor.

825
00:29:47,234 --> 00:29:49,467
Jesse: All right,
and lastly.

826
00:29:49,467 --> 00:29:52,501
Dhanji: Lastly, we have
this horrible form of injection

827
00:29:52,501 --> 00:29:54,167
that we don't
want you to use,

828
00:29:54,167 --> 00:29:55,868
but we're gonna talk about
anyway.

829
00:29:55,868 --> 00:29:58,367
And this is field injection.

830
00:29:58,367 --> 00:29:59,868
The thing
about field injection

831
00:29:59,868 --> 00:30:03,167
is that it's
really concise, right?

832
00:30:03,167 --> 00:30:06,334
It's an @Inject annotation
directly on the member

833
00:30:06,334 --> 00:30:08,567
that you're, uh,
that you depend on.

834
00:30:08,567 --> 00:30:10,133
You don't need
to set anything.

835
00:30:10,133 --> 00:30:12,400
Guice will set it for you
by reflection.

836
00:30:12,400 --> 00:30:13,901
The problem with this,

837
00:30:13,901 --> 00:30:15,601
and the reason
we discourage it,

838
00:30:15,601 --> 00:30:18,901
is that it makes testing
very, very difficult.

839
00:30:18,901 --> 00:30:21,901
Now, you have
to expose your fields.

840
00:30:21,901 --> 00:30:25,100
In this case, we've
exposed them as PackageLocal

841
00:30:25,100 --> 00:30:28,067
in order to access them
from a test class

842
00:30:28,067 --> 00:30:29,701
in the same package.

843
00:30:29,701 --> 00:30:31,467
Now, not only
is that ugly,

844
00:30:31,467 --> 00:30:35,400
it's, um, it's also difficult
for other tests

845
00:30:35,400 --> 00:30:36,734
that don't
sit in the same package

846
00:30:36,734 --> 00:30:38,434
to get access to it.

847
00:30:38,434 --> 00:30:40,801
So we discourage this,
but in a pinch

848
00:30:40,801 --> 00:30:43,934
or in tutorial code,
it looks nice and it works.

849
00:30:43,934 --> 00:30:45,267
Jesse: It's very,
very concise.

850
00:30:45,267 --> 00:30:46,901
So a lot of the intro
in the talk

851
00:30:46,901 --> 00:30:48,567
was about removing
boilerplate.

852
00:30:48,567 --> 00:30:50,367
And if you get--
if that's why you're here,

853
00:30:50,367 --> 00:30:52,300
I invite you to use
field injection.

854
00:30:52,300 --> 00:30:54,701
Although you're losing out
on a lot of other benefits

855
00:30:54,701 --> 00:30:56,534
of dependency injection.

856
00:30:56,534 --> 00:30:59,000
All right, uh, let's talk
about injecting providers.

857
00:30:59,000 --> 00:31:01,267
So thus far, we've always
been talking about

858
00:31:01,267 --> 00:31:02,667
I have a dependency.

859
00:31:02,667 --> 00:31:04,200
You get a single instance
of that dependency

860
00:31:04,200 --> 00:31:05,734
and you use it.

861
00:31:05,734 --> 00:31:09,133
Um, the provider interface
permits something new.

862
00:31:09,133 --> 00:31:11,467
And the interface
is very, very simple.

863
00:31:11,467 --> 00:31:13,734
It's parameterized on "T."

864
00:31:13,734 --> 00:31:16,100
So you can have a provider
of string

865
00:31:16,100 --> 00:31:17,434
and then "get"
will return string,

866
00:31:17,434 --> 00:31:19,267
or you can have a provider
of shortener,

867
00:31:19,267 --> 00:31:20,601
and "get"
will return shortener.

868
00:31:20,601 --> 00:31:22,534
So the provider's type,

869
00:31:22,534 --> 00:31:25,834
it's a factory
for a given value.

870
00:31:25,834 --> 00:31:28,067
So when you inject a provider
into your code--

871
00:31:28,067 --> 00:31:29,601
and I'm using
field injection here,

872
00:31:29,601 --> 00:31:30,834
shame on me--

873
00:31:30,834 --> 00:31:33,033
um, you can see that

874
00:31:33,033 --> 00:31:34,934
we don't have to actually
get our shortener

875
00:31:34,934 --> 00:31:36,501
until we need it.

876
00:31:36,501 --> 00:31:39,434
So if we have somebody
who's very terse

877
00:31:39,434 --> 00:31:42,434
and doesn't ever write
tweets that are shorter than--

878
00:31:42,434 --> 00:31:44,334
that are longer
than 140 characters,

879
00:31:44,334 --> 00:31:47,000
we can avoid the cost
of constructing our shortener

880
00:31:47,000 --> 00:31:48,701
until we actually need it.

881
00:31:48,701 --> 00:31:50,300
So in this case, we say,
you know,

882
00:31:50,300 --> 00:31:52,100
if text length
is greater than 140,

883
00:31:52,100 --> 00:31:53,801
then go ahead and ask
the shortener provider

884
00:31:53,801 --> 00:31:55,334
for a value.

885
00:31:55,334 --> 00:31:57,367
We'll use it, and then
we'll let it go out of scope.

886
00:31:57,367 --> 00:32:00,434
So there's a bunch of reasons
why you would use providers.

887
00:32:00,434 --> 00:32:02,200
Um, first is to load lazily,

888
00:32:02,200 --> 00:32:03,467
which is what
we just saw.

889
00:32:03,467 --> 00:32:04,767
So we don't actually
have to worry

890
00:32:04,767 --> 00:32:06,267
about constructing
the shortener

891
00:32:06,267 --> 00:32:07,834
until it's actually needed.

892
00:32:07,834 --> 00:32:09,167
It's also useful
if you want to get

893
00:32:09,167 --> 00:32:10,734
multiple instances
of a value.

894
00:32:10,734 --> 00:32:13,067
So if you need multiple
database connections,

895
00:32:13,067 --> 00:32:15,467
instead of injecting
a database connection

896
00:32:15,467 --> 00:32:17,067
in your constructor,
you can inject a provider

897
00:32:17,067 --> 00:32:18,767
of the database connection,

898
00:32:18,767 --> 00:32:21,033
and then you can call "get"
once for each thread

899
00:32:21,033 --> 00:32:22,267
that you want to use
to connect,

900
00:32:22,267 --> 00:32:24,868
or once for each, uh,
each query

901
00:32:24,868 --> 00:32:26,400
that you need to run.

902
00:32:26,400 --> 00:32:29,067
Finally, providers
let you mix scopes.

903
00:32:29,067 --> 00:32:31,000
And so this
is where you have, uh,

904
00:32:31,000 --> 00:32:32,501
a singleton object

905
00:32:32,501 --> 00:32:34,267
that's sort of the overseer
of everything.

906
00:32:34,267 --> 00:32:36,400
But it kind of wants to know
who's asking

907
00:32:36,400 --> 00:32:38,033
who the current user is

908
00:32:38,033 --> 00:32:39,667
or what
their session contains.

909
00:32:39,667 --> 00:32:42,400
And so you can inject
a provider of user

910
00:32:42,400 --> 00:32:43,701
or a provider of session,

911
00:32:43,701 --> 00:32:46,667
and then use that
to look inside.

912
00:32:46,667 --> 00:32:48,200
All right, so thus far,

913
00:32:48,200 --> 00:32:49,801
we've talked about a lot
of the mechanics

914
00:32:49,801 --> 00:32:51,334
of using Guice.

915
00:32:51,334 --> 00:32:53,267
Now it's time to get into
the real exciting stuff,

916
00:32:53,267 --> 00:32:56,133
which is how do we really start
to take advantage of Guice,

917
00:32:56,133 --> 00:32:58,200
and how does this really
change our applications?

918
00:32:58,200 --> 00:32:59,434
We've removed the boilerplate.

919
00:32:59,434 --> 00:33:01,167
We've become testable.

920
00:33:01,167 --> 00:33:02,767
But now let's really start

921
00:33:02,767 --> 00:33:04,467
to figure out
how you can build

922
00:33:04,467 --> 00:33:07,400
absolutely fantastic
applications with Guice.

923
00:33:07,400 --> 00:33:11,567
All right, so this
is a fairly abstract diagram

924
00:33:11,567 --> 00:33:13,834
of a fairly abstract, uh--

925
00:33:13,834 --> 00:33:16,801
This is--imagine that this
is Google AdWords, okay?

926
00:33:16,801 --> 00:33:18,033
[laughs]

927
00:33:18,033 --> 00:33:19,067
So these
are all of the classes

928
00:33:19,067 --> 00:33:20,334
in Google AdWords.

929
00:33:20,334 --> 00:33:23,367
And we are in sort of
dependency, uh,

930
00:33:23,367 --> 00:33:25,133
dependency
nightmare mode here,

931
00:33:25,133 --> 00:33:27,000
where we can't compile
a single module

932
00:33:27,000 --> 00:33:28,601
without having
to build the whole world.

933
00:33:28,601 --> 00:33:30,267
Everything depends
on everything.

934
00:33:30,267 --> 00:33:32,634
And it's really hard
to figure out, you know,

935
00:33:32,634 --> 00:33:34,868
how do I--how do I isolate
this one component

936
00:33:34,868 --> 00:33:36,567
so that I can reuse it
in AdSense

937
00:33:36,567 --> 00:33:38,634
or so that I can reuse it
in some other system?

938
00:33:38,634 --> 00:33:41,000
So you want
to avoid creating

939
00:33:41,000 --> 00:33:44,701
this really complex
spaghetti dependency, uh,

940
00:33:44,701 --> 00:33:45,767
application.

941
00:33:45,767 --> 00:33:48,033
So with Guice,

942
00:33:48,033 --> 00:33:50,601
the idea is that you

943
00:33:50,601 --> 00:33:52,567
are encouraged to divide
your application

944
00:33:52,567 --> 00:33:53,968
up into modules.

945
00:33:53,968 --> 00:33:56,434
So, in this case,
we have five modules,

946
00:33:56,434 --> 00:33:57,667
and they all communicate
with each other

947
00:33:57,667 --> 00:33:59,467
via the public API.

948
00:33:59,467 --> 00:34:02,000
And, uh, this is possible
with factories

949
00:34:02,000 --> 00:34:03,400
and it's possible with
really good

950
00:34:03,400 --> 00:34:04,968
software engineering
discipline.

951
00:34:04,968 --> 00:34:06,934
But when you're using
dependency injection,

952
00:34:06,934 --> 00:34:08,434
and Guice in particular,

953
00:34:08,434 --> 00:34:09,734
it becomes very easy

954
00:34:09,734 --> 00:34:11,033
to have
this type of discipline

955
00:34:11,033 --> 00:34:12,267
where you're saying,

956
00:34:12,267 --> 00:34:14,334
"Okay, only
my API is exposed."

957
00:34:14,334 --> 00:34:15,634
And the reason that this
is possible

958
00:34:15,634 --> 00:34:17,400
is because Guice lets you

959
00:34:17,400 --> 00:34:19,334
hide your
implementation details.

960
00:34:19,334 --> 00:34:21,334
So you only--
only your module knows

961
00:34:21,334 --> 00:34:23,067
about your
implementation classes.

962
00:34:23,067 --> 00:34:26,701
And then your interfaces
and your domain classes

963
00:34:26,701 --> 00:34:30,300
and all that can be
in your public API.

964
00:34:30,300 --> 00:34:32,801
All right, so did you see
that cool transition?

965
00:34:32,801 --> 00:34:35,734
All right, so here's--
here's where we're at.

966
00:34:35,734 --> 00:34:37,567
We--we've written
this application,

967
00:34:37,567 --> 00:34:40,033
and we want to swap out
this entire component

968
00:34:40,033 --> 00:34:42,267
in the top right
with a new component,

969
00:34:42,267 --> 00:34:44,067
and when you use
dependency injection,

970
00:34:44,067 --> 00:34:46,100
it's about
writing modular code.

971
00:34:46,100 --> 00:34:48,267
And modular code
really means

972
00:34:48,267 --> 00:34:49,534
that I can swap out
this blue one

973
00:34:49,534 --> 00:34:51,234
for a yellow one.

974
00:34:51,234 --> 00:34:52,901
And that can be a completely
different implementation

975
00:34:52,901 --> 00:34:54,634
written by a completely
different team.

976
00:34:54,634 --> 00:34:56,234
This is extremely powerful,
you know.

977
00:34:56,234 --> 00:34:58,467
You're writing these really,
really big applications,

978
00:34:58,467 --> 00:35:00,834
things get slow,
things get complicated,

979
00:35:00,834 --> 00:35:03,934
and you know you want to say,
"Rewrite!"

980
00:35:03,934 --> 00:35:05,601
Well, Guice helps you
avoid the rewrite

981
00:35:05,601 --> 00:35:07,000
and all of the costs
with it

982
00:35:07,000 --> 00:35:09,000
because you don't have
to rewrite the whole thing.

983
00:35:09,000 --> 00:35:10,434
You can just rewrite
this module,

984
00:35:10,434 --> 00:35:12,434
the particularly
painful one.

985
00:35:12,434 --> 00:35:15,133
Um, so that's really handy,
but the other thing is

986
00:35:15,133 --> 00:35:17,667
is that not only can you take
an entire module,

987
00:35:17,667 --> 00:35:20,033
airlift it, and put in
a different implementation.

988
00:35:20,033 --> 00:35:21,767
You can also take that module
and reuse it

989
00:35:21,767 --> 00:35:23,767
in a completely
different application.

990
00:35:23,767 --> 00:35:25,534
So we can take our,
you know,

991
00:35:25,534 --> 00:35:27,767
our yellow module
from AdWords,

992
00:35:27,767 --> 00:35:29,534
and then go and use it
exactly the same

993
00:35:29,534 --> 00:35:30,667
in AdSense.

994
00:35:30,667 --> 00:35:31,968
And this
is extremely powerful.

995
00:35:31,968 --> 00:35:33,300
And this is the type
of reuse

996
00:35:33,300 --> 00:35:34,634
that was sort of
promised to us

997
00:35:34,634 --> 00:35:36,200
with object-oriented
programming,

998
00:35:36,200 --> 00:35:37,667
but hasn't really
been within reach.

999
00:35:37,667 --> 00:35:39,334
You know, you write
the customer class

1000
00:35:39,334 --> 00:35:40,767
in every,
single application

1001
00:35:40,767 --> 00:35:43,334
because you don't have
a customer module.

1002
00:35:43,334 --> 00:35:45,801
And this sort of permits

1003
00:35:45,801 --> 00:35:48,434
sort of your service-oriented
application

1004
00:35:48,434 --> 00:35:50,601
where you can actually have
a module that says,

1005
00:35:50,601 --> 00:35:51,868
you know, these are all
the APIs

1006
00:35:51,868 --> 00:35:54,501
talking to my service.

1007
00:35:54,501 --> 00:35:56,300
That's...

1008
00:35:56,300 --> 00:35:59,000
Dhanji: Okay,
so Wave is famously

1009
00:35:59,000 --> 00:36:00,400
a GWT application.

1010
00:36:00,400 --> 00:36:03,334
GWT is Google Web Toolkit.

1011
00:36:03,334 --> 00:36:06,200
And, uh, for Wave,

1012
00:36:06,200 --> 00:36:08,267
we don't use this
in particular,

1013
00:36:08,267 --> 00:36:12,968
but, um, GWT does support
Guice-like behavior

1014
00:36:12,968 --> 00:36:15,667
using a library called GIN.

1015
00:36:15,667 --> 00:36:18,767
GIN was written
by one of our Googlers

1016
00:36:18,767 --> 00:36:21,467
and it provides
very similar functionality

1017
00:36:21,467 --> 00:36:22,767
to Guice.

1018
00:36:22,767 --> 00:36:24,968
When GWT is running
in Java mode,

1019
00:36:24,968 --> 00:36:27,334
or hosted mode,
as they like to call it,

1020
00:36:27,334 --> 00:36:28,934
it will defer to Guice

1021
00:36:28,934 --> 00:36:31,000
to do all of the dependency
injection.

1022
00:36:31,000 --> 00:36:33,367
And when it's compiled
into JavaScript

1023
00:36:33,367 --> 00:36:34,634
GIN will provide

1024
00:36:34,634 --> 00:36:37,934
the intermediary
JavaScript Code

1025
00:36:37,934 --> 00:36:39,834
to do
the dependency injection

1026
00:36:39,834 --> 00:36:42,334
just like it would
work in Java.

1027
00:36:42,334 --> 00:36:44,100
Now, it does everything

1028
00:36:44,100 --> 00:36:46,667
without any runtime cost
whatsoever

1029
00:36:46,667 --> 00:36:49,300
because the source code
that's generated by GIN

1030
00:36:49,300 --> 00:36:50,634
is exactly the same
source code

1031
00:36:50,634 --> 00:36:52,300
you would write
in JavaScript

1032
00:36:52,300 --> 00:36:54,501
to wire up all those objects
with one another.

1033
00:36:54,501 --> 00:36:56,300
So that's fantastic.

1034
00:36:56,300 --> 00:36:59,434
The other great thing
is it's the same API you use

1035
00:36:59,434 --> 00:37:00,667
for Guice.

1036
00:37:00,667 --> 00:37:03,868
So if you have a module
that you use

1037
00:37:03,868 --> 00:37:05,667
in a server environment,

1038
00:37:05,667 --> 00:37:09,334
and you'd like to port it
to the GWT environment,

1039
00:37:09,334 --> 00:37:11,000
something that would have
been unheard of

1040
00:37:11,000 --> 00:37:12,968
before GWT
and before Guice,

1041
00:37:12,968 --> 00:37:14,267
you can do this today.

1042
00:37:14,267 --> 00:37:15,667
It is a reality.

1043
00:37:15,667 --> 00:37:16,667
Things like GWT-RPC,

1044
00:37:16,667 --> 00:37:17,868
where you share code

1045
00:37:17,868 --> 00:37:19,601
between the client
and the server

1046
00:37:19,601 --> 00:37:21,033
really becomes possible

1047
00:37:21,033 --> 00:37:28,367
now that you have GIN
sitting in this dual use mode.

1048
00:37:28,367 --> 00:37:32,000
Okay, so the other
cool thing about Guice is--

1049
00:37:32,000 --> 00:37:33,701
and particularly,
Guice 2,

1050
00:37:33,701 --> 00:37:35,567
is the Guice
servlet extension.

1051
00:37:35,567 --> 00:37:37,501
Now, the Guice
servlet extension

1052
00:37:37,501 --> 00:37:39,334
is available in trunk.

1053
00:37:39,334 --> 00:37:40,834
You can check it out,

1054
00:37:40,834 --> 00:37:42,968
and there's a separate jar
that you need to download it

1055
00:37:42,968 --> 00:37:44,434
and use it.

1056
00:37:44,434 --> 00:37:47,200
Jesse: It's a separate jar,
but it comes with Guice.

1057
00:37:47,200 --> 00:37:48,434
Dhanji: Comes with Guice.
Jesse: Yep.

1058
00:37:48,434 --> 00:37:51,300
Dhanji: And it gives you
the request

1059
00:37:51,300 --> 00:37:54,834
and session HTTP scopes
that we saw just earlier,

1060
00:37:54,834 --> 00:37:56,601
just as an annotation,

1061
00:37:56,601 --> 00:37:58,601
just like @Singleton was.

1062
00:37:58,601 --> 00:38:00,701
that you get out of
the box of Guice.

1063
00:38:00,701 --> 00:38:02,234
Now, these are really cool,

1064
00:38:02,234 --> 00:38:05,000
but the servlet module
has a lot, lot more to it.

1065
00:38:05,000 --> 00:38:08,067
As you see here,
you extend servlet module

1066
00:38:08,067 --> 00:38:10,033
rather than abstract module

1067
00:38:10,033 --> 00:38:12,300
when you're creating
your Guice module.

1068
00:38:12,300 --> 00:38:14,534
And what this gives you
is the whole extension

1069
00:38:14,534 --> 00:38:15,834
to the binding language

1070
00:38:15,834 --> 00:38:18,300
to configure servlets
and filters.

1071
00:38:18,300 --> 00:38:21,000
Now, if you guys have ever
used web.xml

1072
00:38:21,000 --> 00:38:24,534
in a HTTP sever,
like Tomcat or JEDI,

1073
00:38:24,534 --> 00:38:27,701
you find yourself writing
a lot of declarative XML rules

1074
00:38:27,701 --> 00:38:29,367
to tell you
how to route requests

1075
00:38:29,367 --> 00:38:31,634
based on their URLs.

1076
00:38:31,634 --> 00:38:34,534
Now, you can do all of that
with idiomatic Java.

1077
00:38:34,534 --> 00:38:36,968
Just like you're used to
with, you know,

1078
00:38:36,968 --> 00:38:40,634
with bindings and how JEDI
would work under the covers

1079
00:38:40,634 --> 00:38:42,968
without all this XML
in the middle.

1080
00:38:42,968 --> 00:38:45,634
Now, that's great because
we're Java programmers,

1081
00:38:45,634 --> 00:38:47,067
and we like to write Java.

1082
00:38:47,067 --> 00:38:49,667
But it's also great
because it's type-safe.

1083
00:38:49,667 --> 00:38:52,567
I can't serve
a particular URL

1084
00:38:52,567 --> 00:38:55,067
with something
that's not a servlet.

1085
00:38:55,067 --> 00:38:57,667
So you have all these
minor little enforcements

1086
00:38:57,667 --> 00:39:00,334
that come into play
that add--

1087
00:39:00,334 --> 00:39:03,434
give you this extra
level of confidence, yeah.

1088
00:39:03,434 --> 00:39:05,367
Now, the other great thing
about the servlet module

1089
00:39:05,367 --> 00:39:07,200
is that it has
a lot more extensions

1090
00:39:07,200 --> 00:39:08,534
than just this.

1091
00:39:08,534 --> 00:39:10,400
It allows you
to match URIs

1092
00:39:10,400 --> 00:39:12,534
based on
regular expressions.

1093
00:39:12,534 --> 00:39:15,267
It allows you
to bind keys

1094
00:39:15,267 --> 00:39:17,534
so you can have
multiple servlets

1095
00:39:17,534 --> 00:39:20,133
that are matched
in a dispatch order.

1096
00:39:20,133 --> 00:39:23,300
All the power of web.xml
and a lot, lot more,

1097
00:39:23,300 --> 00:39:25,334
and none of the pain.

1098
00:39:25,334 --> 00:39:28,000
Jesse: Yeah, the part
that Dhanji was talking about--

1099
00:39:28,000 --> 00:39:29,400
me about earlier

1100
00:39:29,400 --> 00:39:31,501
is that when you move
your servlet configuration

1101
00:39:31,501 --> 00:39:33,934
out of the XML file
and into modules,

1102
00:39:33,934 --> 00:39:35,968
you get a modular design
for your servlets.

1103
00:39:35,968 --> 00:39:37,367
And so what
that lets you do

1104
00:39:37,367 --> 00:39:40,200
is you can actually create
a prepackaged module

1105
00:39:40,200 --> 00:39:42,701
for some aspect
of your application,

1106
00:39:42,701 --> 00:39:47,167
like authentication
or your admin servlet,

1107
00:39:47,167 --> 00:39:49,133
and you can say, okay,
we've written the, you know,

1108
00:39:49,133 --> 00:39:51,367
the single sign-on
servlet package,

1109
00:39:51,367 --> 00:39:52,501
and we use that module

1110
00:39:52,501 --> 00:39:54,734
in a whole bunch
of different applications,

1111
00:39:54,734 --> 00:39:56,000
and you don't
have to worry about

1112
00:39:56,000 --> 00:39:58,000
configuring web.xml
for each.

1113
00:39:58,000 --> 00:40:00,767
So if you're
the single sign-on team

1114
00:40:00,767 --> 00:40:02,100
or the security team

1115
00:40:02,100 --> 00:40:03,734
and you have your own
servlet filters

1116
00:40:03,734 --> 00:40:05,901
and your own servlets,

1117
00:40:05,901 --> 00:40:08,701
you can give this to your
entire development staff

1118
00:40:08,701 --> 00:40:10,033
at your company and say,

1119
00:40:10,033 --> 00:40:13,367
"Okay, use this module
in your servlet application,

1120
00:40:13,367 --> 00:40:15,033
"and you'll automatically
get our filters

1121
00:40:15,033 --> 00:40:16,400
"and our servlets applied,

1122
00:40:16,400 --> 00:40:18,167
and there's no other
integration work."

1123
00:40:18,167 --> 00:40:19,334
Whereas the alternative is

1124
00:40:19,334 --> 00:40:21,000
is you have
to actually go in

1125
00:40:21,000 --> 00:40:22,734
and edit
the web.xml for each.

1126
00:40:22,734 --> 00:40:24,801
And that means that you're
sort of discouraged

1127
00:40:24,801 --> 00:40:26,467
from changing
your filters over time

1128
00:40:26,467 --> 00:40:28,133
as your business needs
change.

1129
00:40:28,133 --> 00:40:30,501
Dhanji: The other great thing
is we do this

1130
00:40:30,501 --> 00:40:31,968
in Google Wave,
by the way.

1131
00:40:31,968 --> 00:40:34,501
So we use
this modular design,

1132
00:40:34,501 --> 00:40:38,334
so we have particular servers
that sit on the front end,

1133
00:40:38,334 --> 00:40:40,501
and the single sign-on
is the same code

1134
00:40:40,501 --> 00:40:42,000
that's used all over Google,

1135
00:40:42,000 --> 00:40:44,634
and we bring that into
Google Wave this way.

1136
00:40:44,634 --> 00:40:47,400
And--and this morning's demo,

1137
00:40:47,400 --> 00:40:49,934
when you saw Lars doing
all those fancy, cool things

1138
00:40:49,934 --> 00:40:52,367
with the collaborative
editing stuff,

1139
00:40:52,367 --> 00:40:54,701
every single character
that he typed

1140
00:40:54,701 --> 00:40:57,400
went through a Guice servlet
dispatch rule.

1141
00:40:57,400 --> 00:40:59,534
Yeah, so is it fast?

1142
00:40:59,534 --> 00:41:01,534
Jesse: [laughs]
It's way fast.

1143
00:41:01,534 --> 00:41:04,334
Okay, all right,
so one of the features

1144
00:41:04,334 --> 00:41:07,300
I hinted at earlier is
aspect-oriented programming.

1145
00:41:07,300 --> 00:41:09,934
And this is a very,
very powerful,

1146
00:41:09,934 --> 00:41:11,367
very, very complex domain.

1147
00:41:11,367 --> 00:41:13,501
And Guice gives you
sort of the sweet spot

1148
00:41:13,501 --> 00:41:14,801
of what you want,

1149
00:41:14,801 --> 00:41:17,100
which is method
interceptors.

1150
00:41:17,100 --> 00:41:21,868
Um, so suppose you're
writing a database thing,

1151
00:41:21,868 --> 00:41:24,200
and you--you're writing
this boilerplate

1152
00:41:24,200 --> 00:41:26,667
where you need to set up
and tear down a transaction

1153
00:41:26,667 --> 00:41:28,634
for every method called.

1154
00:41:28,634 --> 00:41:30,100
So, traditionally,
what you'll do

1155
00:41:30,100 --> 00:41:32,467
is you'll say
database connection.open,

1156
00:41:32,467 --> 00:41:35,000
try, then do
your actual work.

1157
00:41:35,000 --> 00:41:37,234
And then you'll have,
you know, a catch clause

1158
00:41:37,234 --> 00:41:38,434
and a finally clause

1159
00:41:38,434 --> 00:41:40,067
and some teardowns
and rollbacks

1160
00:41:40,067 --> 00:41:42,200
to handle the cases
where your business logic

1161
00:41:42,200 --> 00:41:45,000
either failed or there was
an optimistic problem

1162
00:41:45,000 --> 00:41:47,133
with your, um, your commit.

1163
00:41:47,133 --> 00:41:49,100
So with aspect-oriented
programming,

1164
00:41:49,100 --> 00:41:51,667
instead of doing all that stuff
all over the place,

1165
00:41:51,667 --> 00:41:53,534
you separate
the cross-cutting concerns

1166
00:41:53,534 --> 00:41:55,000
into interceptors,

1167
00:41:55,000 --> 00:41:57,467
and they run
around your method.

1168
00:41:57,467 --> 00:41:59,501
So in this case,
we've annotated

1169
00:41:59,501 --> 00:42:02,701
database tweet storage
with @Transactional.

1170
00:42:02,701 --> 00:42:04,167
And what this will do
is it'll make sure

1171
00:42:04,167 --> 00:42:06,267
that before and after
saveTweet is called,

1172
00:42:06,267 --> 00:42:08,467
we set up a transaction
and then we make sure

1173
00:42:08,467 --> 00:42:09,701
to commit or roll back,

1174
00:42:09,701 --> 00:42:13,167
depending on how that,
uh, method completed.

1175
00:42:13,167 --> 00:42:15,567
Jesse: Uh, do you want
to talk more about this?

1176
00:42:15,567 --> 00:42:18,868
Dhanji: Well, this
is another extension to Guice

1177
00:42:18,868 --> 00:42:22,367
that's not available
in the Guice code project,

1178
00:42:22,367 --> 00:42:25,934
but you can find it
in our documentation.

1179
00:42:25,934 --> 00:42:28,834
It's a very,
very convenient thing

1180
00:42:28,834 --> 00:42:33,534
for people who use Hibernate
or Java Persistence API,

1181
00:42:33,534 --> 00:42:36,334
which is the foundation
of Google App Engine's

1182
00:42:36,334 --> 00:42:38,000
persistence framework.

1183
00:42:38,000 --> 00:42:40,701
So this is a bit
of boilerplate code,

1184
00:42:40,701 --> 00:42:42,534
very much like the factories,

1185
00:42:42,534 --> 00:42:44,968
but something that sits
in every method

1186
00:42:44,968 --> 00:42:47,868
that does any work
with the database session.

1187
00:42:47,868 --> 00:42:49,601
And it can all be
abstracted away

1188
00:42:49,601 --> 00:42:51,434
with this one,
single annotation.

1189
00:42:51,434 --> 00:42:54,334
And Guice enables us
to do this, yeah.

1190
00:42:54,334 --> 00:42:56,767
Jesse: The other thing is
is that this AOP,

1191
00:42:56,767 --> 00:42:59,734
it really fits hand-in-glove
for transactions.

1192
00:42:59,734 --> 00:43:01,267
And there's a handful
of other cases

1193
00:43:01,267 --> 00:43:03,000
where it also fits
very nicely.

1194
00:43:03,000 --> 00:43:05,801
So on my former project
in billing,

1195
00:43:05,801 --> 00:43:09,367
we used AOP and Guice
to do security.

1196
00:43:09,367 --> 00:43:11,267
And so you'd have a method
that says, you know,

1197
00:43:11,267 --> 00:43:12,534
"Make payment,"

1198
00:43:12,534 --> 00:43:14,133
and you would have
an annotation on that method

1199
00:43:14,133 --> 00:43:16,801
that said @Secure.

1200
00:43:16,801 --> 00:43:18,000
And that would require

1201
00:43:18,000 --> 00:43:19,801
that whoever
was calling that method

1202
00:43:19,801 --> 00:43:21,501
had a prior login.

1203
00:43:21,501 --> 00:43:22,834
And you can
annotate your methods

1204
00:43:22,834 --> 00:43:24,734
and configure
all this stuff

1205
00:43:24,734 --> 00:43:27,267
just exactly as you need it
to fit your application.

1206
00:43:27,267 --> 00:43:29,501
So you can define
your own annotations,

1207
00:43:29,501 --> 00:43:32,567
and you can define
how those annotations behave.

1208
00:43:32,567 --> 00:43:34,000
Uh, it's fully pluggable,

1209
00:43:34,000 --> 00:43:37,400
and in its core, Guice knows
nothing about transactions,

1210
00:43:37,400 --> 00:43:38,801
it knows nothing about
servlets,

1211
00:43:38,801 --> 00:43:40,467
it knows nothing
about security.

1212
00:43:40,467 --> 00:43:42,634
But it supports all these things
to be added on

1213
00:43:42,634 --> 00:43:46,167
with its own modular
architecture.

1214
00:43:46,167 --> 00:43:48,167
All right, so the last part

1215
00:43:48,167 --> 00:43:52,701
is that Guice
is fairly open

1216
00:43:52,701 --> 00:43:55,300
to extension
and manipulation.

1217
00:43:55,300 --> 00:43:58,167
So we've talked about
binding so far,

1218
00:43:58,167 --> 00:44:00,334
and we've talked
about injections.

1219
00:44:00,334 --> 00:44:02,667
All of this information,
all this metadata

1220
00:44:02,667 --> 00:44:04,267
about your application
is exposed

1221
00:44:04,267 --> 00:44:08,133
through Guice's Introspection
Service Provider interface.

1222
00:44:08,133 --> 00:44:10,000
And so, when you
define your module

1223
00:44:10,000 --> 00:44:12,467
and you set everything up,

1224
00:44:12,467 --> 00:44:14,767
Guice will actually give you
all of the metadata

1225
00:44:14,767 --> 00:44:16,200
that is has internally

1226
00:44:16,200 --> 00:44:19,767
so that you can take that
and analyze your application.

1227
00:44:19,767 --> 00:44:21,467
Uh, the most interesting
one so far

1228
00:44:21,467 --> 00:44:24,000
has been that we've been
graphing our applications.

1229
00:44:24,000 --> 00:44:25,434
You find
really interesting things

1230
00:44:25,434 --> 00:44:28,934
when you can take your entire
10,000 class application

1231
00:44:28,934 --> 00:44:31,501
and spit it out
into a graph and say,

1232
00:44:31,501 --> 00:44:32,767
"You know what?

1233
00:44:32,767 --> 00:44:35,300
"That dependency there,
that one's broken.

1234
00:44:35,300 --> 00:44:36,467
We need to fix that."

1235
00:44:36,467 --> 00:44:37,467
And you can't
do that type of thing

1236
00:44:37,467 --> 00:44:38,501
by just
inspecting the code,

1237
00:44:38,501 --> 00:44:40,234
reading line by line,

1238
00:44:40,234 --> 00:44:43,100
because the modules are,
you know, modular.

1239
00:44:43,100 --> 00:44:44,601
One's over here,
one's over here.

1240
00:44:44,601 --> 00:44:46,334
The introspection API
lets you see it all

1241
00:44:46,334 --> 00:44:47,601
at the same time.

1242
00:44:47,601 --> 00:44:49,567
Uh, it's also
used internally by Guice

1243
00:44:49,567 --> 00:44:53,100
to do some of the more,
uh, testy,

1244
00:44:53,100 --> 00:44:55,067
easy,
configuration-type things.

1245
00:44:55,067 --> 00:44:58,334
So when Guice--when you
have a module

1246
00:44:58,334 --> 00:44:59,334
and you know, you say,

1247
00:44:59,334 --> 00:45:02,100
"Okay, I want 90%
of this module,

1248
00:45:02,100 --> 00:45:05,033
"but instead of that binding
to the production database,

1249
00:45:05,033 --> 00:45:08,534
I'd rather bind to
the QA environment database."

1250
00:45:08,534 --> 00:45:11,801
Or you know, the, uh,
the canary database.

1251
00:45:11,801 --> 00:45:13,501
So you can take that module,

1252
00:45:13,501 --> 00:45:15,667
override it with just
the stuff that you want,

1253
00:45:15,667 --> 00:45:17,167
and you can
create a new module.

1254
00:45:17,167 --> 00:45:19,501
And this all uses
the introspection SPI.

1255
00:45:19,501 --> 00:45:23,601
It's sort of built on top
of Guice's own, uh...

1256
00:45:23,601 --> 00:45:25,234
APIs.

1257
00:45:25,234 --> 00:45:28,267
All right, so wrapping up.

1258
00:45:28,267 --> 00:45:30,567
Dependency injection leads
to testable,

1259
00:45:30,567 --> 00:45:34,434
reusable, modular,
maintainable code.

1260
00:45:34,434 --> 00:45:37,100
And we love
dependency injection,

1261
00:45:37,100 --> 00:45:39,267
but you really
want a framework.

1262
00:45:39,267 --> 00:45:41,567
And Guice makes
dependency injection easy.

1263
00:45:41,567 --> 00:45:44,000
It's a, you know,
it's very concise.

1264
00:45:44,000 --> 00:45:45,567
You add that annotation.

1265
00:45:45,567 --> 00:45:47,534
Very little boilerplate
that you have write.

1266
00:45:47,534 --> 00:45:51,801
And once you've got Guice
independency injection in play,

1267
00:45:51,801 --> 00:45:55,167
then there's a whole new
avenue of components

1268
00:45:55,167 --> 00:45:56,767
and modules that you can
use as well.

1269
00:45:56,767 --> 00:46:00,367
So this is, you know,
your scopes, your AOP,

1270
00:46:00,367 --> 00:46:03,634
your warp-persist,
your app engine integration,

1271
00:46:03,634 --> 00:46:06,701
your Google App Toolkit
integration.

1272
00:46:06,701 --> 00:46:08,701
And Guice is also
really lightweight.

1273
00:46:08,701 --> 00:46:10,801
So we're serious about this,

1274
00:46:10,801 --> 00:46:12,200
and we don't think
that it makes sense

1275
00:46:12,200 --> 00:46:16,100
to include a sort of
large kernel in applications.

1276
00:46:16,100 --> 00:46:17,767
So although Guice drives,
you know,

1277
00:46:17,767 --> 00:46:20,000
some of the bigger
applications at Google,

1278
00:46:20,000 --> 00:46:21,434
it also works
on Android.

1279
00:46:21,434 --> 00:46:23,868
It's a fairly lightweight,
simple library.

1280
00:46:23,868 --> 00:46:25,834
And then it's a got a sort
of pluggable thing

1281
00:46:25,834 --> 00:46:29,434
so you can put the servlets
for App Engine

1282
00:46:29,434 --> 00:46:32,534
or the UI stuff for Android,

1283
00:46:32,534 --> 00:46:35,000
and it all just
sort of works seamlessly.

1284
00:46:35,000 --> 00:46:38,434
All right,
and the book plug.

1285
00:46:38,434 --> 00:46:40,434
Dhanji: Yep, so I've got
a book coming out

1286
00:46:40,434 --> 00:46:42,100
called <i>Dependency Injection.</i>

1287
00:46:42,100 --> 00:46:44,400
It's mostly
a design patterns book,

1288
00:46:44,400 --> 00:46:46,200
but it has a lot
of focus on Guice

1289
00:46:46,200 --> 00:46:48,300
and another
framer of Spring,

1290
00:46:48,300 --> 00:46:50,133
and if you use
that discount code

1291
00:46:50,133 --> 00:46:51,400
and go to that URL,

1292
00:46:51,400 --> 00:46:54,734
I believe you get
a 40% discount for one week.

1293
00:46:54,734 --> 00:46:56,534
Jesse: Yep, Google I/O only.

1294
00:46:56,534 --> 00:46:58,634
So, uh, you can get the book

1295
00:46:58,634 --> 00:47:00,968
in Manning Early Access
right away.

1296
00:47:00,968 --> 00:47:02,901
Dhanji: Yep, and then once
it's ready,

1297
00:47:02,901 --> 00:47:04,234
it'll be
shipped out to you.

1298
00:47:04,234 --> 00:47:07,367
Jesse: Yeah, the book
really goes into full detail

1299
00:47:07,367 --> 00:47:09,701
about all of the stuff
that we've just breezed through

1300
00:47:09,701 --> 00:47:11,200
in the last hour.

1301
00:47:11,200 --> 00:47:14,100
And I guess now
we should open the poll up

1302
00:47:14,100 --> 00:47:15,234
for questions.

1303
00:47:15,234 --> 00:47:17,501
Um, we're using
Google moderator.

1304
00:47:17,501 --> 00:47:19,133
So if you guys
have your laptops handy

1305
00:47:19,133 --> 00:47:20,634
and the Wi-Fi
is working well,

1306
00:47:20,634 --> 00:47:21,868
you can
post questions there.

1307
00:47:21,868 --> 00:47:23,667
Otherwise, please use
the microphones here.

1308
00:47:23,667 --> 00:47:27,133
Um, thank you.

1309
00:47:27,133 --> 00:47:28,534
All right.

1310
00:47:28,534 --> 00:47:29,767
Question.

1311
00:47:29,767 --> 00:47:31,968
man: How do I
compose modules?

1312
00:47:31,968 --> 00:47:33,834
Jesse: How do you
compose modules?

1313
00:47:33,834 --> 00:47:37,267
man: Take several small modules
and build a big one.

1314
00:47:37,267 --> 00:47:39,167
Jesse: Yeah, so, um,

1315
00:47:39,167 --> 00:47:42,934
the, uh, the--
the module API

1316
00:47:42,934 --> 00:47:44,167
actually has a method

1317
00:47:44,167 --> 00:47:46,567
where one module can
install another module.

1318
00:47:46,567 --> 00:47:47,801
So you can say,

1319
00:47:47,801 --> 00:47:50,968
"Okay, here's my entire
front end module."

1320
00:47:50,968 --> 00:47:52,667
And then you may
have multiple teams, you know.

1321
00:47:52,667 --> 00:47:53,868
You've got
your team in New York

1322
00:47:53,868 --> 00:47:55,100
working on
the billing system,

1323
00:47:55,100 --> 00:47:56,400
and your team in L.A.

1324
00:47:56,400 --> 00:47:58,033
working on the user
authentication system,

1325
00:47:58,033 --> 00:48:00,033
and a team in Mountain View
working on the features.

1326
00:48:00,033 --> 00:48:03,167
Your front end module can
just install each of those.

1327
00:48:03,167 --> 00:48:04,801
And what's really nice
about that approach

1328
00:48:04,801 --> 00:48:06,534
is that those modules

1329
00:48:06,534 --> 00:48:07,968
are independently reusable.

1330
00:48:07,968 --> 00:48:10,367
So those teams can work
independently of one another

1331
00:48:10,367 --> 00:48:11,634
as well as, you know,
when you actually need

1332
00:48:11,634 --> 00:48:12,801
to go out in production

1333
00:48:12,801 --> 00:48:14,434
and you need
the whole team's code

1334
00:48:14,434 --> 00:48:15,934
all in one binary.

1335
00:48:15,934 --> 00:48:17,634
You just compose it all
into one system.

1336
00:48:17,634 --> 00:48:19,934
Um, now, if you have
multiple bindings

1337
00:48:19,934 --> 00:48:21,167
for the same type--

1338
00:48:21,167 --> 00:48:24,834
So if Dhanji binds his tweeter
to SmsTweeter,

1339
00:48:24,834 --> 00:48:26,767
and I bind it
to JSONTweeter,

1340
00:48:26,767 --> 00:48:28,968
Guice will detect that
at start-up time,

1341
00:48:28,968 --> 00:48:31,267
when you call that
guice.createinjector method,

1342
00:48:31,267 --> 00:48:32,534
and it'll say, you know,

1343
00:48:32,534 --> 00:48:33,701
these are the old
falling bindings

1344
00:48:33,701 --> 00:48:35,200
that we had problems with.

1345
00:48:35,200 --> 00:48:37,400
And, you know, this one
happened on line 45

1346
00:48:37,400 --> 00:48:38,701
of SMS module,

1347
00:48:38,701 --> 00:48:41,868
and this one happened
on line 32 of JSON module.

1348
00:48:41,868 --> 00:48:44,434
And it'll help you
to resolve that.

1349
00:48:44,434 --> 00:48:45,834
Dhanji: There's also
a really simple way

1350
00:48:45,834 --> 00:48:47,267
to compose modules.

1351
00:48:47,267 --> 00:48:48,868
And that is when you're
bootstrapping Guice,

1352
00:48:48,868 --> 00:48:50,934
you just give it a list
of modules,

1353
00:48:50,934 --> 00:48:53,634
and it's just a simple
Java tool list.

1354
00:48:53,634 --> 00:48:55,133
Give it as many modules
you like,

1355
00:48:55,133 --> 00:48:56,634
it'll be installed
in order.

1356
00:48:56,634 --> 00:48:57,667
Jesse: Yep.

1357
00:48:57,667 --> 00:49:00,133
Uh, so we got a question
from a moderator

1358
00:49:00,133 --> 00:49:03,133
that Jesse
in Mountain View wrote.

1359
00:49:03,133 --> 00:49:05,200
Uh, what apps
use Google Guice?

1360
00:49:05,200 --> 00:49:08,534
So the ones at Google
that use it are, uh,

1361
00:49:08,534 --> 00:49:10,100
you know, we started out
with Adwords.

1362
00:49:10,100 --> 00:49:12,167
We had this really big
application

1363
00:49:12,167 --> 00:49:16,200
fairly hard to maintain.

1364
00:49:16,200 --> 00:49:19,734
You know, we had a lot of,
um, factories

1365
00:49:19,734 --> 00:49:21,501
and a lot of static state

1366
00:49:21,501 --> 00:49:23,634
and a lot of, you know,
database connections

1367
00:49:23,634 --> 00:49:24,868
that were required for tests

1368
00:49:24,868 --> 00:49:26,567
that had nothing to do
with the database.

1369
00:49:26,567 --> 00:49:29,667
And so Guice really
rescued Adwords front end

1370
00:49:29,667 --> 00:49:31,400
and gave it a couple more
years of life

1371
00:49:31,400 --> 00:49:33,267
by making it so that,
all of a sudden,

1372
00:49:33,267 --> 00:49:35,701
you could use certain components
of Adwords independently,

1373
00:49:35,701 --> 00:49:37,901
and that's breathed
new life into it.

1374
00:49:37,901 --> 00:49:40,601
Um, there's also Gmail,

1375
00:49:40,601 --> 00:49:44,801
um, Orkut, Docs,
YouTube,

1376
00:49:44,801 --> 00:49:48,167
Wave, um...
the...

1377
00:49:48,167 --> 00:49:50,701
Dhanji: Pretty much every
new Google application

1378
00:49:50,701 --> 00:49:52,334
these days.

1379
00:49:52,334 --> 00:49:53,734
Jesse: All right,
"Is Guice Servlet module

1380
00:49:53,734 --> 00:49:55,634
now a superset
of warp-core?"

1381
00:49:55,634 --> 00:49:57,801
So, uh...

1382
00:49:57,801 --> 00:49:58,801
Good question.

1383
00:49:58,801 --> 00:49:59,834
[both laugh]

1384
00:49:59,834 --> 00:50:00,834
Uh, so...

1385
00:50:00,834 --> 00:50:03,701
Dhanji: The answer
to that is no.

1386
00:50:03,701 --> 00:50:06,901
It's--it has very similar
functionality.

1387
00:50:06,901 --> 00:50:09,033
But warp-core
is now defunct.

1388
00:50:09,033 --> 00:50:11,267
So Guice Servlet
takes precedence.

1389
00:50:11,267 --> 00:50:12,367
It supersedes it.

1390
00:50:12,367 --> 00:50:14,133
Jesse: Yep,
warp is still useful

