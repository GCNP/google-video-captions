1
00:00:01,200 --> 00:00:03,734
Bowers: So remember, too,
that that was in Java

2
00:00:03,734 --> 00:00:05,968
and it was really quick; there
was no server configuration,

3
00:00:05,968 --> 00:00:07,501
there was very little
development configuration.

4
00:00:07,501 --> 00:00:09,334
Just installed Eclipse
and installed a plug-in

5
00:00:09,334 --> 00:00:11,400
and it was pretty much
ready to go.

6
00:00:11,400 --> 00:00:13,167
Also notice that I didn't
have to write

7
00:00:13,167 --> 00:00:15,901
any JavaScript XHR calls.

8
00:00:15,901 --> 00:00:17,701
That's because I'm using
Google Web Toolkit,

9
00:00:17,701 --> 00:00:18,834
and it'll handle
the communication

10
00:00:18,834 --> 00:00:21,000
between the client
and the server for me.

11
00:00:21,000 --> 00:00:23,300
So what App Engine does
on the back-end

12
00:00:23,300 --> 00:00:25,267
making server-side tasks easier,

13
00:00:25,267 --> 00:00:27,367
Google Web Toolkit
does on the front-end,

14
00:00:27,367 --> 00:00:30,601
making client-side coding
and development easier as well.

15
00:00:30,601 --> 00:00:33,033
So if we can
go back to slides...

16
00:00:35,834 --> 00:00:37,334
[laughter]

17
00:00:37,334 --> 00:00:40,334
So they told me I needed
a marchitecture diagram.

18
00:00:40,334 --> 00:00:42,501
So it's Google Web Toolkit
in the front,

19
00:00:42,501 --> 00:00:44,567
and App Engine in the back.

20
00:00:44,567 --> 00:00:46,501
Now I want to talk
about two features

21
00:00:46,501 --> 00:00:48,734
that are coming up
in Google Web Toolkit.

22
00:00:48,734 --> 00:00:51,133
We're optimistic
that HTML 5 is going to

23
00:00:51,133 --> 00:00:53,367
bring some sanity
to the browser world.

24
00:00:53,367 --> 00:00:54,400
Yet you're still going to

25
00:00:54,400 --> 00:00:56,167
have to develop
for multiple browsers.

26
00:00:56,167 --> 00:00:58,000
Now, Google Web Toolkit's
inherently designed

27
00:00:58,000 --> 00:00:59,300
to work across browsers,

28
00:00:59,300 --> 00:01:01,033
handling the differences
for you.

29
00:01:01,033 --> 00:01:03,200
So you write
your user interface in Java,

30
00:01:03,200 --> 00:01:06,200
and then the compiler
is going to handle the compiling

31
00:01:06,200 --> 00:01:09,734
to the optimized, appropriate
JavaScript-rich environment.

32
00:01:09,734 --> 00:01:13,033
But right now there's a wrinkle
in that development flow.

33
00:01:13,033 --> 00:01:15,601
We encourage people to use CSS
'cause it's a powerful way

34
00:01:15,601 --> 00:01:18,667
to style your apps, but if
you're familiar with this,

35
00:01:18,667 --> 00:01:21,267
you'll also know
it's frustratingly inconsistent.

36
00:01:21,267 --> 00:01:24,200
[applause]

37
00:01:26,067 --> 00:01:28,367
I see some of you relate.

38
00:01:28,367 --> 00:01:31,033
So it's times like these
when you want to use Firebug

39
00:01:31,033 --> 00:01:33,734
to figure out
what the heck's going on.

40
00:01:33,734 --> 00:01:35,100
Now, here's the wrinkle.

41
00:01:35,100 --> 00:01:37,367
Because we have
real time Java debugging

42
00:01:37,367 --> 00:01:39,801
in Google Web Toolkit
using a special browser,

43
00:01:39,801 --> 00:01:42,234
it's meant you had to compile
the JavaScript first,

44
00:01:42,234 --> 00:01:44,300
then take that,
go view that in Firefox,

45
00:01:44,300 --> 00:01:45,601
and then look at Firebug,

46
00:01:45,601 --> 00:01:47,400
and then so we had
an extra step in there.

47
00:01:47,400 --> 00:01:48,567
Well I'm happy to say

48
00:01:48,567 --> 00:01:49,701
in the next version
of Google Web Toolkit

49
00:01:49,701 --> 00:01:51,234
You'll no longer
have to do that.

50
00:01:51,234 --> 00:01:54,033
You'll be able to debug
directly in the browser.

51
00:01:54,033 --> 00:01:56,801
It's also not just Firefox,
it's any browser.

52
00:01:56,801 --> 00:02:02,367
So let me show you a quick demo
of what that looks like.

53
00:02:02,367 --> 00:02:06,300
So I'm gonna go back to
the project that I just created,

54
00:02:06,300 --> 00:02:08,033
and I'm gonna change
the launch configuration

55
00:02:08,033 --> 00:02:10,968
to use the new plug-in.

56
00:02:13,701 --> 00:02:18,100
So we'll take this out here.

57
00:02:18,100 --> 00:02:20,968
So this is gonna start up
the plug-in infrastructure.

58
00:02:20,968 --> 00:02:23,567
And I'm gonna close down nightly

59
00:02:23,567 --> 00:02:26,133
and start up the other version
of Firefox we have here,

60
00:02:26,133 --> 00:02:29,200
'cause that's what my plug-in
is installed on.

61
00:02:33,901 --> 00:02:38,334
Now I can navigate
to my local server.

62
00:02:38,334 --> 00:02:40,467
And you'll notice
that I'm passing in,

63
00:02:40,467 --> 00:02:41,834
uh, special query parameters

64
00:02:41,834 --> 00:02:45,968
so that we know it's coming
from the hosted mode.

65
00:02:45,968 --> 00:02:48,167
And you can see this is the--

66
00:02:48,167 --> 00:02:51,133
the app that I just had,
and so now I can use Firebug

67
00:02:51,133 --> 00:02:53,734
and inspect like--
like you're used to.

68
00:02:53,734 --> 00:02:55,300
Okay, well, that doesn't
seem too special,

69
00:02:55,300 --> 00:02:59,767
but remember that what I have
on the back-end is still Java.

70
00:02:59,767 --> 00:03:03,234
So you can see this is Java
that we're generating here.

71
00:03:05,300 --> 00:03:07,901
I can make that change,
go back to Firefox--

72
00:03:07,901 --> 00:03:10,300
I'm not using
the special browser here--

73
00:03:10,300 --> 00:03:12,868
click "Refresh,"

74
00:03:12,868 --> 00:03:16,067
and then I should be able
to inspect that.

75
00:03:16,067 --> 00:03:18,701
Let's see if we refresh again.

76
00:03:23,467 --> 00:03:27,567
Or sometimes it helps
to restart your server.

77
00:03:27,567 --> 00:03:29,567
So let's do that. All right.

78
00:03:39,734 --> 00:03:42,734
So we've got that running.

79
00:03:42,734 --> 00:03:45,367
And make sure I didn't cache.

80
00:03:48,901 --> 00:03:51,634
So this is going to make the
development cycle a lot faster.

81
00:03:51,634 --> 00:03:53,901
It's also going to work
on multiple browsers as well,

82
00:03:53,901 --> 00:03:55,934
so all the major browsers
have plug-ins.

83
00:03:55,934 --> 00:03:58,067
And there we go.
There we see some changes.

84
00:03:58,067 --> 00:04:00,501
[applause]

85
00:04:00,501 --> 00:04:03,234
And it'll also work
with other plug-ins as well.

86
00:04:03,234 --> 00:04:05,033
Now, I want to talk
about one more feature

87
00:04:05,033 --> 00:04:06,200
that we're really excited about

88
00:04:06,200 --> 00:04:09,267
in the next version
of Google Web Toolkit.

89
00:04:09,267 --> 00:04:11,067
With all this
HTML 5 functionality

90
00:04:11,067 --> 00:04:14,467
you're going to find yourself
writing rich user interfaces.

91
00:04:14,467 --> 00:04:16,534
And if you've built apps
like that before,

92
00:04:16,534 --> 00:04:19,200
really large
JavaScript Ajax apps,

93
00:04:19,200 --> 00:04:22,400
you'll know that your JavaScript
codebase is going to grow,

94
00:04:22,400 --> 00:04:23,601
and it's going to grow a lot.

95
00:04:23,601 --> 00:04:27,367
If we can go back
to slides, please.

96
00:04:27,367 --> 00:04:30,067
It's going to grow a lot
as you add more functionality.

97
00:04:30,067 --> 00:04:32,534
And that in turn means
your users are going to wait,

98
00:04:32,534 --> 00:04:34,334
and they're going to wait,
and they're going to wait

99
00:04:34,334 --> 00:04:36,334
for your application
to finish loading.

100
00:04:36,334 --> 00:04:38,767
So you need a way to split up
all those JavaScript files

101
00:04:38,767 --> 00:04:40,501
across multiple files
so your user

102
00:04:40,501 --> 00:04:42,334
can get started
with your application

103
00:04:42,334 --> 00:04:44,601
without having to wait for it.

104
00:04:44,601 --> 00:04:47,200
However, manually
splitting JavaScript

105
00:04:47,200 --> 00:04:48,701
can be very tedious.

106
00:04:48,701 --> 00:04:50,834
You have to get
the dependencies correct,

107
00:04:50,834 --> 00:04:52,834
uh, it takes a long time,
and you really--

108
00:04:52,834 --> 00:04:55,000
it's not something you wanna do
on a Friday night.

109
00:04:55,000 --> 00:04:56,868
So that's why the next version
of Google Web Toolkit

110
00:04:56,868 --> 00:04:58,367
we're gonna
help you out with that,

111
00:04:58,367 --> 00:04:59,734
and do it for you
with something called,

112
00:04:59,734 --> 00:05:01,467
"developer-guided
code splitting,"

113
00:05:01,467 --> 00:05:03,400
also known as runAsync.

114
00:05:03,400 --> 00:05:06,367
Now with runAsync, what you do
is specify in your code

115
00:05:06,367 --> 00:05:09,100
somewhere that you're willing
to accept a short pause

116
00:05:09,100 --> 00:05:11,267
in exchange for the compiler
being able

117
00:05:11,267 --> 00:05:13,801
to functionally fragment
your codebase.

118
00:05:13,801 --> 00:05:15,834
So what this means
is I can download code

119
00:05:15,834 --> 00:05:17,701
after the initial download.

120
00:05:17,701 --> 00:05:19,667
Imagine you have
a settings page, it's not real--

121
00:05:19,667 --> 00:05:22,334
uh, it's rarely used,
not used on startup at least.

122
00:05:22,334 --> 00:05:23,734
Well, there's
no reason to download

123
00:05:23,734 --> 00:05:25,901
that code with your
initial download.

124
00:05:25,901 --> 00:05:29,100
Instead you'd set
a runAsync split point,

125
00:05:29,100 --> 00:05:31,734
then allow that code to download
in the background

126
00:05:31,734 --> 00:05:33,667
after your user
is up and running.

127
00:05:33,667 --> 00:05:36,067
Okay, you're saying, "Andrew,
that's great in theory,

128
00:05:36,067 --> 00:05:37,801
but does it really work?"

129
00:05:37,801 --> 00:05:40,701
Well, I'd like to leave you
with some metrics

130
00:05:40,701 --> 00:05:43,501
from a real world application
that's using runAsync.

131
00:05:43,501 --> 00:05:46,300
This is a application
we'll talk more about tomorrow.

132
00:05:46,300 --> 00:05:48,067
This is a graph
during development

133
00:05:48,067 --> 00:05:50,200
of the size
of the JavaScript codebase.

134
00:05:50,200 --> 00:05:52,567
So it quickly grew
to 1.4 megabytes

135
00:05:52,567 --> 00:05:55,300
as they added
more functionality to the UI.

136
00:05:55,300 --> 00:05:58,234
So that's--that's a lot of code
to download on initial download.

137
00:05:58,234 --> 00:06:00,367
Now, after runAsync,
the initial download

138
00:06:00,367 --> 00:06:04,400
was decreased to 200k,
which can then be decreased

139
00:06:04,400 --> 00:06:07,968
another 80k--to about
another 80k when you gzip it.

140
00:06:07,968 --> 00:06:11,667
So 1.4 megabytes
to 200 kilobytes.

141
00:06:11,667 --> 00:06:15,367
So it's about a 7x decrease.
It's going to load a lot faster.

142
00:06:15,367 --> 00:06:17,067
And the best part
is they didn't have to worry

143
00:06:17,067 --> 00:06:18,267
about the dependencies
themselves.

144
00:06:18,267 --> 00:06:20,334
The compiler looked
at their codebase

145
00:06:20,334 --> 00:06:22,300
and handled all that for them.

146
00:06:22,300 --> 00:06:24,367
So these are just a few of
the features that we're adding

147
00:06:24,367 --> 00:06:25,734
to Google Web Toolkit.

148
00:06:25,734 --> 00:06:27,734
We're gonna be talking
a lot more about the future

149
00:06:27,734 --> 00:06:29,467
and the present
with both App Engine

150
00:06:29,467 --> 00:06:31,434
and Google Web Toolkit
over the next few days,

151
00:06:31,434 --> 00:06:33,200
so please stop by and join us.

152
00:06:33,200 --> 00:06:34,200
Thank you.

153
00:06:34,200 --> 00:06:36,601
[applause]

154
00:06:36,601 --> 00:06:39,300
Thanks.

155
00:06:39,300 --> 00:06:40,701
Gundrota: Great job, guys.

156
00:06:40,701 --> 00:06:42,834
And as you can see, these are
the URLs where you can go

157
00:06:42,834 --> 00:06:45,767
to learn more or attend
any of the sessions.

158
00:06:45,767 --> 00:06:48,234
Of course we are very,
very happy at Google

159
00:06:48,234 --> 00:06:51,200
to see the developer
adoption of Google services.

160
00:06:51,200 --> 00:06:53,934
You go to a webpage and you see
someone who's incorporated

161
00:06:53,934 --> 00:06:57,501
Google YouTube, or Google News,
or Google Video,

162
00:06:57,501 --> 00:06:59,300
or even Google Search
on their page,

163
00:06:59,300 --> 00:07:00,601
and it delights us.

164
00:07:00,601 --> 00:07:03,133
You know, we have over 60 APIs
that we make available,

165
00:07:03,133 --> 00:07:04,767
uh, to developers.

166
00:07:04,767 --> 00:07:06,300
In fact, we're very proud
to announce today

167
00:07:06,300 --> 00:07:08,901
that we have crossed
the 4 billion API threshold.

168
00:07:08,901 --> 00:07:12,501
That's 4 billion API calls
every day

169
00:07:12,501 --> 00:07:13,701
coming in to Google.

170
00:07:13,701 --> 00:07:15,400
That's even a big number for us.

171
00:07:15,400 --> 00:07:16,901
And so thank you
for your support,

172
00:07:16,901 --> 00:07:20,601
thank you for, uh, enhancing
your apps with Google services.

173
00:07:20,601 --> 00:07:21,901
Of course, we're not satisfied.

174
00:07:21,901 --> 00:07:24,667
We wanna do more to--
to make your web apps better

175
00:07:24,667 --> 00:07:26,834
and make the web even richer.

176
00:07:26,834 --> 00:07:29,734
And we looked at one of our
most successful models.

177
00:07:29,734 --> 00:07:31,300
And that's AdSense.

178
00:07:31,300 --> 00:07:34,300
There are literally
hundreds of thousands of sites

179
00:07:34,300 --> 00:07:35,767
that use AdSense.

180
00:07:35,767 --> 00:07:40,100
And they get those Google ads
on their page by nothing more

181
00:07:40,100 --> 00:07:42,267
than including
a little bit of JavaScript.

182
00:07:42,267 --> 00:07:44,133
And so we asked ourselves,
why couldn't we

183
00:07:44,133 --> 00:07:46,200
take that approach
for everything we were doing?

184
00:07:46,200 --> 00:07:49,200
Why not make our other services
that easy

185
00:07:49,200 --> 00:07:51,100
to incorporate
into your applications?

186
00:07:51,100 --> 00:07:53,634
To demonstrate a brand-new
developer product for you,

187
00:07:53,634 --> 00:07:55,300
I'd like to invite up
DeWitt Clinton

188
00:07:55,300 --> 00:07:56,501
to walk you through that.

189
00:07:56,501 --> 00:07:57,501
DeWitt, please. Welcome.

190
00:07:57,501 --> 00:07:58,801
Clinton: Hey, thank you, Vic.

191
00:07:58,801 --> 00:08:01,801
[applause]

192
00:08:01,801 --> 00:08:03,200
Hi.

193
00:08:03,200 --> 00:08:05,934
Today I'm very pleased
to introduce

194
00:08:05,934 --> 00:08:07,767
Google Web Elements.

195
00:08:07,767 --> 00:08:10,834
Google Web Elements
bring Google products

196
00:08:10,834 --> 00:08:14,701
to your website using simple
copy and paste.

197
00:08:14,701 --> 00:08:17,767
We were inspired
by the embeddable YouTube video

198
00:08:17,767 --> 00:08:19,601
and AdSense,
and asked ourselves,

199
00:08:19,601 --> 00:08:23,400
could we apply this approach
to more products?

200
00:08:23,400 --> 00:08:26,501
Today I'm going to demonstrate
adding Google News

201
00:08:26,501 --> 00:08:28,701
and Google Maps,
and Google Search

202
00:08:28,701 --> 00:08:31,400
to a website using
Google Web Elements.

203
00:08:31,400 --> 00:08:32,734
Let's get started.

204
00:08:39,367 --> 00:08:41,234
Here's a simple website
we put together.

205
00:08:41,234 --> 00:08:44,601
Standard two-column layout like
something you'd find on Blogger,

206
00:08:44,601 --> 00:08:47,300
or WordPress, or your own site.

207
00:08:47,300 --> 00:08:48,901
It looks pretty good,

208
00:08:48,901 --> 00:08:51,534
but I think we can
make it more dynamic.

209
00:08:51,534 --> 00:08:55,400
I'd like to pull in, uh,
headline news from Google News,

210
00:08:55,400 --> 00:08:57,868
and I'll do that
with a Google Web Element.

211
00:08:57,868 --> 00:09:01,767
I go to google.com/webelements,

212
00:09:04,701 --> 00:09:09,133
and I select the "News" element.

213
00:09:09,133 --> 00:09:11,467
And here I can choose
from headlines from technology,

214
00:09:11,467 --> 00:09:14,501
sports, politics,
or enter my own.

215
00:09:14,501 --> 00:09:16,767
I'll enter "Google."

216
00:09:16,767 --> 00:09:20,200
And I'll fit it to my site.

217
00:09:20,200 --> 00:09:22,200
And I copy the code,

218
00:09:22,200 --> 00:09:26,534
and I go to the HTML of my site,
and find the right place.

219
00:09:26,534 --> 00:09:28,834
and I hit "paste."

220
00:09:28,834 --> 00:09:31,434
When I go back
to the page and refresh,

221
00:09:31,434 --> 00:09:34,200
Google News is already live.

222
00:09:34,200 --> 00:09:35,901
I'd like to add now a map

223
00:09:35,901 --> 00:09:39,367
to Moscone
and the developer conference.

224
00:09:39,367 --> 00:09:42,234
So I go to
google.com/webelements,

225
00:09:42,234 --> 00:09:45,434
I go to the "Maps" element,

226
00:09:45,434 --> 00:09:49,567
I type in, "Moscone Center."

227
00:09:49,567 --> 00:09:53,534
And we're here for Google I/O.

228
00:09:53,534 --> 00:09:56,601
And I like the terrain view.

229
00:09:56,601 --> 00:09:58,667
And again, I copy the code,

230
00:09:58,667 --> 00:09:59,767
I go to my template,

