1
00:00:01,033 --> 00:00:02,734
Nesladek:
Hi, I'm Chris Nesladek,

2
00:00:02,734 --> 00:00:05,801
and I'm an interaction designer
working on the Android project.

3
00:00:05,801 --> 00:00:08,834
Today I'm happy to be here
to present to you

4
00:00:08,834 --> 00:00:10,267
"Pixel Perfect Code:

5
00:00:10,267 --> 00:00:16,000
How to Marry Interaction and
Visual Design the Android Way."

6
00:00:16,000 --> 00:00:17,501
Now, the goal of this talk,

7
00:00:17,501 --> 00:00:19,467
which is a first of its kind
exploration--

8
00:00:19,467 --> 00:00:21,367
so you guys
are the guinea pigs--

9
00:00:21,367 --> 00:00:25,901
is to expose you to tons
of the framework elements

10
00:00:25,901 --> 00:00:28,501
that we've built
into the system

11
00:00:28,501 --> 00:00:31,501
so that you can hopefully build
richer user experiences.

12
00:00:31,501 --> 00:00:34,667
As an aside note as well,

13
00:00:34,667 --> 00:00:37,167
several of the examples
that I will demo today

14
00:00:37,167 --> 00:00:39,300
were created out
of an emulator

15
00:00:39,300 --> 00:00:40,868
which shows a cursor.

16
00:00:40,868 --> 00:00:44,834
The cursor is meant
to indicate touch.

17
00:00:44,834 --> 00:00:47,667
To set the stage for you,
so to speak,

18
00:00:47,667 --> 00:00:50,000
the talk is gonna focus

19
00:00:50,000 --> 00:00:53,000
on the three pillars
of interaction design

20
00:00:53,000 --> 00:00:54,968
that we've
modeled the interac--

21
00:00:54,968 --> 00:00:57,934
that we've modeled,
excuse me, Android around:

22
00:00:57,934 --> 00:01:00,200
structure, behavior,
and expression.

23
00:01:00,200 --> 00:01:04,000
We're going to talk
at a strategic level first

24
00:01:04,000 --> 00:01:06,400
about what
makes Android unique.

25
00:01:06,400 --> 00:01:09,434
So as you start to develop
and design applications

26
00:01:09,434 --> 00:01:14,334
for the platform, you should
think about these key things

27
00:01:14,334 --> 00:01:15,801
that I will highlight.

28
00:01:15,801 --> 00:01:19,067
I will also then step back
and expose some of the ba--

29
00:01:19,067 --> 00:01:23,133
the, excuse me, the basics that
are a part of our framework.

30
00:01:23,133 --> 00:01:26,801
Then we're gonna dive
into the behavior layer.

31
00:01:26,801 --> 00:01:31,234
And behavior is how we bring
structure to life in Android.

32
00:01:31,234 --> 00:01:36,434
We'll cap off
with probably what will be

33
00:01:36,434 --> 00:01:38,167
an interesting exploration.

34
00:01:38,167 --> 00:01:40,334
That would be
we'll talk about expression.

35
00:01:40,334 --> 00:01:42,501
That's generally
where you need to focus

36
00:01:42,501 --> 00:01:44,968
a lot of your energy
but it often gets overlooked.

37
00:01:44,968 --> 00:01:47,167
And hopefully,
if I don't talk too fast--

38
00:01:47,167 --> 00:01:48,434
actually, if I talk fast,

39
00:01:48,434 --> 00:01:49,968
you'll have plenty of time
for questions.

40
00:01:49,968 --> 00:01:53,968
So we'll handle those as well.

41
00:01:53,968 --> 00:01:55,534
Now as I mentioned,

42
00:01:55,534 --> 00:01:58,734
and if anyone's seen
my trailer video,

43
00:01:58,734 --> 00:02:02,334
the Android user experience
is based upon

44
00:02:02,334 --> 00:02:04,100
the principles
of interaction design.

45
00:02:04,100 --> 00:02:06,968
And these principles,
there's three pillars of them,

46
00:02:06,968 --> 00:02:10,000
are structure, behavior,
and expression.

47
00:02:10,000 --> 00:02:13,167
If any of you know
a little bit about

48
00:02:13,167 --> 00:02:14,767
the history
of interaction design,

49
00:02:14,767 --> 00:02:16,901
what this means
is it's grounded in--

50
00:02:16,901 --> 00:02:19,767
its roots are grounded
in architecture.

51
00:02:19,767 --> 00:02:22,467
So if I were to give you
an example of an architect,

52
00:02:22,467 --> 00:02:23,968
which I'm going to,

53
00:02:23,968 --> 00:02:26,634
we could look at how
we should start

54
00:02:26,634 --> 00:02:28,801
to think
about these three pillars.

55
00:02:28,801 --> 00:02:31,767
An architect,
when he or she first starts

56
00:02:31,767 --> 00:02:34,934
the process
of designing a building,

57
00:02:34,934 --> 00:02:38,100
well, he or she
lays down a blueprint.

58
00:02:38,100 --> 00:02:40,033
And on that blueprint
are certain

59
00:02:40,033 --> 00:02:43,267
predefined structural elements
that need to go into place

60
00:02:43,267 --> 00:02:46,434
for that building.

61
00:02:46,434 --> 00:02:49,033
For example,
there's gonna be floors.

62
00:02:49,033 --> 00:02:51,033
At some point,
there's gonna be doors,

63
00:02:51,033 --> 00:02:52,634
there's gonna be elevators.

64
00:02:52,634 --> 00:02:55,467
There's probably gonna be things
like light switches as well.

65
00:02:55,467 --> 00:02:56,734
Plumbing.

66
00:02:56,734 --> 00:02:59,067
This is all
basic structural elements.

67
00:02:59,067 --> 00:03:02,367
After that, the architect
will then jump

68
00:03:02,367 --> 00:03:05,334
into the next pillar,
and that's the behavior pillar.

69
00:03:05,334 --> 00:03:09,000
What that means is wherever
he or she has decided

70
00:03:09,000 --> 00:03:11,067
to place these elements,

71
00:03:11,067 --> 00:03:14,067
like doors or elevators
or light switches,

72
00:03:14,067 --> 00:03:17,467
he or she as the architect
is starting to think about

73
00:03:17,467 --> 00:03:20,467
how they're gonna behave
when a user enters the room.

74
00:03:20,467 --> 00:03:22,534
For example,
with the light switch,

75
00:03:22,534 --> 00:03:24,167
are there gonna be
motion sensors

76
00:03:24,167 --> 00:03:26,033
that trigger the light
on or off?

77
00:03:26,033 --> 00:03:27,367
Are there going to be--

78
00:03:27,367 --> 00:03:29,667
is it just going to be
a press and hold type of thing

79
00:03:29,667 --> 00:03:31,767
that turns
that light switch on?

80
00:03:31,767 --> 00:03:34,901
So structure and behavior
come together

81
00:03:34,901 --> 00:03:38,033
in the final pillar,
which is expression.

82
00:03:38,033 --> 00:03:41,100
At this point, the architect,
probably working

83
00:03:41,100 --> 00:03:43,734
with an interior designer
or someone like that,

84
00:03:43,734 --> 00:03:48,334
has decided that, you know,
how that light switch behaves--

85
00:03:48,334 --> 00:03:49,801
which could be a slider

86
00:03:49,801 --> 00:03:51,367
or it could be
a button as I mentioned--

87
00:03:51,367 --> 00:03:53,234
that kind of has to have
an expression

88
00:03:53,234 --> 00:03:55,467
so that when someone
enters the room,

89
00:03:55,467 --> 00:03:57,067
they know how to turn
that thing on.

90
00:03:57,067 --> 00:03:59,267
So that's at a high level--

91
00:03:59,267 --> 00:04:01,767
a good way to start
to think about how we think

92
00:04:01,767 --> 00:04:07,167
as designers on Android
when we build applications.

93
00:04:07,167 --> 00:04:09,234
Now, as I told you,

94
00:04:09,234 --> 00:04:11,133
we're gonna go from
a structural level first--

95
00:04:11,133 --> 00:04:13,067
or, excuse me,
a strategic level first

96
00:04:13,067 --> 00:04:15,534
with the framework
and show you some of the things

97
00:04:15,534 --> 00:04:18,567
which have been blogged about
quite extensively.

98
00:04:18,567 --> 00:04:20,834
But since we haven't really
published our UI guidelines

99
00:04:20,834 --> 00:04:24,234
just yet, you probably
could use a little refresher.

100
00:04:24,234 --> 00:04:25,501
And that's why I'm here.

101
00:04:25,501 --> 00:04:27,901
I'm gonna provide you
with five unique things

102
00:04:27,901 --> 00:04:30,701
that you need to think about
that make--

103
00:04:30,701 --> 00:04:32,868
when you start to design
and develop for Android,

104
00:04:32,868 --> 00:04:36,300
that makes us different
than other platforms.

105
00:04:36,300 --> 00:04:40,067
The first thing is multi-tasking
with background processing.

106
00:04:40,067 --> 00:04:42,400
In the example
that I'm about to show you,

107
00:04:42,400 --> 00:04:45,033
which is very fast,

108
00:04:45,033 --> 00:04:47,267
pay close attention
to how in Android

109
00:04:47,267 --> 00:04:50,601
I can be doing one task
but then quickly switch

110
00:04:50,601 --> 00:04:54,067
and take action on data
as it enters my view.

111
00:04:54,067 --> 00:04:57,501
It's really powerful.
I'll walk you through this.

112
00:04:57,501 --> 00:05:00,634
So here I'm browsing
in YouTube

113
00:05:00,634 --> 00:05:03,634
and I'm deciding
what I want to watch.

114
00:05:03,634 --> 00:05:04,834
Well, look what happens.

115
00:05:04,834 --> 00:05:06,234
Through
the notification tray

116
00:05:06,234 --> 00:05:09,367
or window shade,
I get a message.

117
00:05:09,367 --> 00:05:11,067
And I'm immediately able
to act on that

118
00:05:11,067 --> 00:05:12,834
and go directly
to Google Talk.

119
00:05:12,834 --> 00:05:16,133
Even more powerful,
my friend has sent me a link.

120
00:05:16,133 --> 00:05:20,000
So I can hook--from that link,
I can go right to the browser

121
00:05:20,000 --> 00:05:22,801
and I can browse and decide
whether or not

122
00:05:22,801 --> 00:05:25,067
I'm interested in going
to this location

123
00:05:25,067 --> 00:05:28,067
to meet up with him.

124
00:05:28,067 --> 00:05:31,501
Now that was pretty--that
wasn't as fast as I expected

125
00:05:31,501 --> 00:05:34,234
when I did that,
but I decided that okay,

126
00:05:34,234 --> 00:05:35,634
that looks good to me.

127
00:05:35,634 --> 00:05:37,734
And I can quickly respond
to that message.

128
00:05:37,734 --> 00:05:39,267
Another thing to keep in mind

129
00:05:39,267 --> 00:05:40,601
which is--this is going
somewhat fast,

130
00:05:40,601 --> 00:05:43,300
is we have a notion
of a back stack in Android.

131
00:05:43,300 --> 00:05:47,834
So each time I want to go back
to a previous activity,

132
00:05:47,834 --> 00:05:51,601
which is, for example,
Gchat or YouTube,

133
00:05:51,601 --> 00:05:53,400
I can hit the back button.

134
00:05:53,400 --> 00:05:56,667
Now what was also
kind of important

135
00:05:56,667 --> 00:05:59,567
which you probably
may have not seen

136
00:05:59,567 --> 00:06:03,868
is that the data was held
in a stateful place

137
00:06:03,868 --> 00:06:07,100
each time I went back.

138
00:06:07,100 --> 00:06:10,100
So multi-tasking,
background processing,

139
00:06:10,100 --> 00:06:12,400
first key differentiator
for us

140
00:06:12,400 --> 00:06:14,934
that as a developer,
you should probably think about:

141
00:06:14,934 --> 00:06:16,534
how you're going to hold
that data.

142
00:06:16,534 --> 00:06:18,667
But also again,
another key point:

143
00:06:18,667 --> 00:06:20,934
how to allow people
to act on data.

144
00:06:20,934 --> 00:06:24,934
We'll talk more about that.

145
00:06:24,934 --> 00:06:27,601
The other key thing
that was exposed in that demo

146
00:06:27,601 --> 00:06:30,534
was the idea that we have
on Android which is very unique,

147
00:06:30,534 --> 00:06:32,367
which is notifications.

148
00:06:32,367 --> 00:06:34,667
There's two types
of notifications

149
00:06:34,667 --> 00:06:35,801
in the Android framework.

150
00:06:35,801 --> 00:06:37,901
There's ongoing
and event-driven.

151
00:06:37,901 --> 00:06:41,467
Ongoing notifications
are very temporal.

152
00:06:41,467 --> 00:06:42,801
They last a short time.

153
00:06:42,801 --> 00:06:44,501
They're meant to indicate
progress.

154
00:06:44,501 --> 00:06:47,400
For example, what happens
when I download an app?

155
00:06:47,400 --> 00:06:51,834
Well, as a user, I can flick
down that window shade

156
00:06:51,834 --> 00:06:54,200
and I can see
the progress indication

157
00:06:54,200 --> 00:06:57,200
as to how long it's taking
that app to download.

158
00:06:57,200 --> 00:06:58,734
Once it's downloaded,

159
00:06:58,734 --> 00:07:02,000
that notification
switches into--

160
00:07:02,000 --> 00:07:03,968
that's an ongoing notification.

161
00:07:03,968 --> 00:07:06,501
That switches into the one-time
event notification

162
00:07:06,501 --> 00:07:08,367
where I can then act on it.

163
00:07:08,367 --> 00:07:12,834
One-time notifications
are things like email and SMS

164
00:07:12,834 --> 00:07:16,667
that a user can quickly tap
and go to the application

165
00:07:16,667 --> 00:07:18,968
that has presented them.

166
00:07:18,968 --> 00:07:21,567
On Android,
what's really important

167
00:07:21,567 --> 00:07:23,801
is to be a good citizen
with notifications.

168
00:07:23,801 --> 00:07:27,033
Because you can surface
notifications to a user

169
00:07:27,033 --> 00:07:28,734
doesn't mean you
should abuse it.

170
00:07:28,734 --> 00:07:31,934
So, you know, we've seen
some bad examples,

171
00:07:31,934 --> 00:07:34,300
but we're hoping that
this talk will help you

172
00:07:34,300 --> 00:07:37,100
better understand how
to use the power of this.

173
00:07:37,100 --> 00:07:38,767
And the reason why
I mention this

174
00:07:38,767 --> 00:07:41,634
is that you want to see
good ratings and comments

175
00:07:41,634 --> 00:07:43,968
in the market
when you develop an app.

176
00:07:43,968 --> 00:07:45,601
You spend a lot of time
on that,

177
00:07:45,601 --> 00:07:48,100
so not abusing the framework
with notifications

178
00:07:48,100 --> 00:07:52,501
is probably a good way
to promote that.

179
00:07:52,501 --> 00:07:56,167
Now, another new thing
with Cupcake,

180
00:07:56,167 --> 00:07:58,100
if you've read the blog post,

181
00:07:58,100 --> 00:08:02,567
is we are now allowing data
to come out of applications

182
00:08:02,567 --> 00:08:04,100
and sit on the desktop.

183
00:08:04,100 --> 00:08:07,567
We have implemented widgets
and live folders

184
00:08:07,567 --> 00:08:09,467
in Cupcake 1.5.

185
00:08:09,467 --> 00:08:13,801
And what this means is
as a user of an application,

186
00:08:13,801 --> 00:08:16,667
I can long press
on the home screen,

187
00:08:16,667 --> 00:08:18,667
and we'll see
an example of this,

188
00:08:18,667 --> 00:08:21,367
and drag and drop and put
a widget on the desktop

189
00:08:21,367 --> 00:08:23,734
that exposes data at a glance.

190
00:08:23,734 --> 00:08:25,667
One of our reference apps
is the calendar,

191
00:08:25,667 --> 00:08:28,968
which is pretty powerful
because I can see my schedule

192
00:08:28,968 --> 00:08:30,434
on a daily basis.

193
00:08:30,434 --> 00:08:33,100
And if I decide that I want to
actually go into the calendar,

194
00:08:33,100 --> 00:08:34,801
all I have to do
is tap that widget

195
00:08:34,801 --> 00:08:37,100
and I'm taken directly
into the calendar.

196
00:08:37,100 --> 00:08:39,501
The other key component
of data

197
00:08:39,501 --> 00:08:41,501
that we've been able
to surface on the desktop

198
00:08:41,501 --> 00:08:46,634
in a dynamic way is--
excuse me, uses live folders.

199
00:08:46,634 --> 00:08:49,434
And live folders allow you,
the developer,

200
00:08:49,434 --> 00:08:51,634
to take a dynamic subset
of data--

201
00:08:51,634 --> 00:08:55,300
for example, maybe a group
of contacts or whatnot--

202
00:08:55,300 --> 00:08:56,701
and put that in a folder

203
00:08:56,701 --> 00:08:59,634
and that list will automatically
update for the user.

204
00:08:59,634 --> 00:09:02,734
So when he or she selects
that folder from the desktop,

205
00:09:02,734 --> 00:09:04,634
it's pretty actionab--

206
00:09:04,634 --> 00:09:07,267
it's always updated
and it's actionable.

207
00:09:07,267 --> 00:09:10,400
Here's an example
of live folders and widgets.

208
00:09:10,400 --> 00:09:13,667
Again, pressing the home screen
triggers a menu.

209
00:09:13,667 --> 00:09:16,200
I decide which widget
I want.

210
00:09:16,200 --> 00:09:18,367
Calendar in this case.

211
00:09:18,367 --> 00:09:21,334
And then I can go
into the calendar

212
00:09:21,334 --> 00:09:23,100
and I have a pretty light
schedule today.

213
00:09:23,100 --> 00:09:24,267
Isn't that nice?

214
00:09:24,267 --> 00:09:26,734
And I can decide what
I want to do there.

215
00:09:26,734 --> 00:09:32,934
I can always hit back
and I'm back to the home screen.

216
00:09:32,934 --> 00:09:34,534
So here's live folders.

217
00:09:34,534 --> 00:09:36,067
These are what we ship with.

218
00:09:36,067 --> 00:09:38,834
We're already seeing more
live folders get created

219
00:09:38,834 --> 00:09:41,501
as application developers
like yourselves

220
00:09:41,501 --> 00:09:43,501
get hold of this code.

221
00:09:43,501 --> 00:09:45,667
And I can browse
my contacts list

222
00:09:45,667 --> 00:09:48,067
and then quickly
go into a contact card

223
00:09:48,067 --> 00:09:50,234
all from the desktop
without having

224
00:09:50,234 --> 00:09:51,701
to go into the application.

225
00:09:51,701 --> 00:09:53,167
So, very powerful.

226
00:09:53,167 --> 00:09:59,734
Again, the theme of acting
on data from the desktop.

227
00:09:59,734 --> 00:10:01,934
Now, as many of you may know,

228
00:10:01,934 --> 00:10:05,667
with Android,
it's not about applications.

229
00:10:05,667 --> 00:10:07,133
And let me rephrase that.

230
00:10:07,133 --> 00:10:10,267
It's about activities
that you then layer tasks into,

231
00:10:10,267 --> 00:10:13,067
and then on top of that,
you can hook in intents.

232
00:10:13,067 --> 00:10:15,234
And intents make it possible

233
00:10:15,234 --> 00:10:19,601
so that you can basically--
if there's an intent over here

234
00:10:19,601 --> 00:10:22,000
that's share, for example,
but you're over here,

235
00:10:22,000 --> 00:10:23,667
you can take
that intent and hook it

236
00:10:23,667 --> 00:10:27,133
into your application so that
you didn't have to build that.

237
00:10:27,133 --> 00:10:30,734
You're reusing it, but you're
making the user experience

238
00:10:30,734 --> 00:10:33,000
much more powerful
for the user.

239
00:10:33,000 --> 00:10:35,734
We're gonna look
at two examples in the camera

240
00:10:35,734 --> 00:10:38,467
and the browser as to how
we utilize share intents,

241
00:10:38,467 --> 00:10:39,901
or intents in general.

242
00:10:39,901 --> 00:10:44,868
But we're gonna look at
the share intent specifically.

243
00:10:44,868 --> 00:10:47,200
So this is
a really fast example.

244
00:10:47,200 --> 00:10:49,868
I'm gonna let it play
and we'll see what happens.

245
00:10:49,868 --> 00:10:53,167
Basically I'm in the camera
and I take a picture.

246
00:10:53,167 --> 00:10:56,267
Afterwards I decide,
using the thumbnail viewer,

247
00:10:56,267 --> 00:10:57,767
that I want to share it.

248
00:10:57,767 --> 00:11:00,534
Once I hit the share button
from our onscreen action menu,

249
00:11:00,534 --> 00:11:02,868
I have a choice
of menu options

250
00:11:02,868 --> 00:11:04,400
with that
share intent dialogue.

251
00:11:04,400 --> 00:11:06,767
We ship with some
predefined appli--you know,

252
00:11:06,767 --> 00:11:09,234
default intents
for the user.

253
00:11:09,234 --> 00:11:10,901
But you c--
as a third party,

254
00:11:10,901 --> 00:11:13,000
this is what I think you guys
would be interested in

255
00:11:13,000 --> 00:11:15,634
is any third party
can hook into that share intent.

256
00:11:15,634 --> 00:11:18,634
So, you know, while I
could've sent that picture

257
00:11:18,634 --> 00:11:20,400
through SM--
the messaging app,

258
00:11:20,400 --> 00:11:21,901
the messaging app, rather,

259
00:11:21,901 --> 00:11:24,767
PicSay was also
in my third party intent

260
00:11:24,767 --> 00:11:26,367
because I had downloaded
the PicSay application

261
00:11:26,367 --> 00:11:27,968
from the market.

262
00:11:27,968 --> 00:11:30,267
And what that left me with
was the opportunity

263
00:11:30,267 --> 00:11:33,133
to basically
cartoon up my image

264
00:11:33,133 --> 00:11:34,801
before I shared it
with a friend.

265
00:11:34,801 --> 00:11:36,868
So that's a pretty good example

266
00:11:36,868 --> 00:11:40,634
of how we use the share intent
in the camera.

267
00:11:40,634 --> 00:11:42,033
What about the browser?

268
00:11:42,033 --> 00:11:44,267
Well, it's highly likely

269
00:11:44,267 --> 00:11:47,901
when I'm browsing a web page
that at some point

270
00:11:47,901 --> 00:11:50,601
I'm gonna want to share content
with someone.

271
00:11:50,601 --> 00:11:54,501
So in this instance,
I can long press on an image

272
00:11:54,501 --> 00:11:57,634
and then bring up
the contextual menu.

273
00:11:57,634 --> 00:11:59,601
There I can share that link

274
00:11:59,601 --> 00:12:01,667
through the share intent
dialogue.

275
00:12:01,667 --> 00:12:05,601
Again, type in a message
and send it off to a friend

276
00:12:05,601 --> 00:12:10,267
and then return back
to my previous activity,

277
00:12:10,267 --> 00:12:11,901
which is really powerful.

278
00:12:11,901 --> 00:12:18,200
So again,
intent's a good thing.

279
00:12:18,200 --> 00:12:22,567
That leads us to this point
in the presentation.

280
00:12:22,567 --> 00:12:27,968
Most platforms are all about
a simple linear path.

281
00:12:27,968 --> 00:12:31,300
You go into and out of
applications.

282
00:12:31,300 --> 00:12:34,300
As you can probably
tell by now,

283
00:12:34,300 --> 00:12:35,734
when you start
to think about designing

284
00:12:35,734 --> 00:12:37,334
and developing for Android,

285
00:12:37,334 --> 00:12:40,334
we think more in terms
of a stream.

286
00:12:40,334 --> 00:12:43,300
So this is the model
that you should probably start

287
00:12:43,300 --> 00:12:45,400
to think about
instead of this model,

288
00:12:45,400 --> 00:12:47,000
a straight line.

289
00:12:47,000 --> 00:12:49,133
Because with the stream,

290
00:12:49,133 --> 00:12:51,334
you can basically
hook in intents

291
00:12:51,334 --> 00:12:53,734
and then allow the user
to pivot on data.

292
00:12:53,734 --> 00:12:56,701
And that's really what
we want as a user anyway,

293
00:12:56,701 --> 00:13:00,434
is to be able to quickly use
the multi-tasking techniques

294
00:13:00,434 --> 00:13:03,100
and act on data
that interests us

295
00:13:03,100 --> 00:13:04,634
rather than having
to stay siloed

296
00:13:04,634 --> 00:13:10,834
and go into and out of things.

297
00:13:10,834 --> 00:13:13,801
So here's an example
of how I can do that

298
00:13:13,801 --> 00:13:16,567
in the browser again.

299
00:13:20,968 --> 00:13:22,234
As I'm--you know,

300
00:13:22,234 --> 00:13:26,734
quickly I was browsing
for <i>Star Trek.</i>

301
00:13:26,734 --> 00:13:29,567
I decided that I wanted
to view that in YouTube.

302
00:13:29,567 --> 00:13:30,667
I had two choices.

303
00:13:30,667 --> 00:13:32,033
I could've continued
that activity

304
00:13:32,033 --> 00:13:34,734
through the browser
or the YouTube client app.

305
00:13:34,734 --> 00:13:37,133
I chose YouTube
because I prefer that app.

306
00:13:37,133 --> 00:13:39,968
And in YouTube,
through the main menu button,

307
00:13:39,968 --> 00:13:42,000
I was able to trigger
the share intent.

308
00:13:42,000 --> 00:13:43,634
I triggered the main menu
and I was able

309
00:13:43,634 --> 00:13:46,000
to trigger the share intent
by selecting that function.

310
00:13:46,000 --> 00:13:48,367
I could share that--
I shared that video--

311
00:13:48,367 --> 00:13:50,000
I can share that video
with a friend

312
00:13:50,000 --> 00:13:51,767
and then I jump right back
to the browser.

313
00:13:51,767 --> 00:13:53,367
So again, with Android,

314
00:13:53,367 --> 00:13:56,334
it's a stream
as opposed to a linear flow.

315
00:13:56,334 --> 00:13:58,601
And that's really powerful
when you start

316
00:13:58,601 --> 00:14:03,167
to think about how you
can leverage that as well.

317
00:14:03,167 --> 00:14:09,033
Now, I'm gonna step back
as I said previously.

318
00:14:09,033 --> 00:14:11,067
Those are, like,
the high level things

319
00:14:11,067 --> 00:14:14,300
that we tend to think about
and we know--

320
00:14:14,300 --> 00:14:16,334
we tend to think about
as designers on Android.

321
00:14:16,334 --> 00:14:19,467
But at a basic level,

322
00:14:19,467 --> 00:14:22,300
Android is really about
making the software

323
00:14:22,300 --> 00:14:24,033
and the hardware
come together.

324
00:14:24,033 --> 00:14:26,234
So you can't have
a good user experience

325
00:14:26,234 --> 00:14:27,534
if you don't do that.

326
00:14:27,534 --> 00:14:29,834
And the way that
we've tried to do that--

327
00:14:29,834 --> 00:14:31,534
this is
our second representation

328
00:14:31,534 --> 00:14:35,300
of an Android device--
is the Vodafone HTC device

329
00:14:35,300 --> 00:14:37,100
that we shipped
in Europe recently.

330
00:14:37,100 --> 00:14:38,367
And how we do that--

331
00:14:38,367 --> 00:14:39,801
I'm gonna walk you through
some of the things

332
00:14:39,801 --> 00:14:41,567
that are associated
with that right now.

333
00:14:41,567 --> 00:14:43,534
We have hard key buttons,
basically.

334
00:14:43,534 --> 00:14:47,200
We have home still,
which always takes you home.

335
00:14:47,200 --> 00:14:48,868
And we also have the notion
of a long press

336
00:14:48,868 --> 00:14:50,334
on these buttons.

337
00:14:50,334 --> 00:14:51,934
So if you long press on home--

338
00:14:51,934 --> 00:14:54,100
I think several of you have
gotten this phone right now

339
00:14:54,100 --> 00:14:56,534
at the keynote this morning--

340
00:14:56,534 --> 00:14:57,868
if you long press on that,

341
00:14:57,868 --> 00:15:00,501
you can quickly see
a task switcher will come up.

342
00:15:00,501 --> 00:15:04,534
So the hard keys
aid navigation.

343
00:15:04,534 --> 00:15:09,067
They're also meant to be doors
into greater functionality,

344
00:15:09,067 --> 00:15:11,167
which we'll soon see
with the next button,

345
00:15:11,167 --> 00:15:12,300
which is the menu button.

346
00:15:12,300 --> 00:15:14,100
The menu button is the way

347
00:15:14,100 --> 00:15:16,000
that you can surface
more content on the screen

348
00:15:16,000 --> 00:15:19,400
by minimizing onscreen buttons,
basically.

349
00:15:19,400 --> 00:15:22,767
Because we have a menu that
serves as the global function--

350
00:15:22,767 --> 00:15:26,033
it serves as the place to put
those global functions, rather.

351
00:15:26,033 --> 00:15:29,634
We have a track ball
for fine, focusable navigation

352
00:15:29,634 --> 00:15:31,133
because this isn't
always that good

353
00:15:31,133 --> 00:15:33,200
when you want
to hit a web link.

354
00:15:33,200 --> 00:15:35,701
We have a back stack,
which is a technical thing.

355
00:15:35,701 --> 00:15:37,767
But that back button
is really powerful

356
00:15:37,767 --> 00:15:40,367
because no matter where I am
inside of an application,

357
00:15:40,367 --> 00:15:42,868
I can always jump back
one step.

358
00:15:42,868 --> 00:15:45,067
And as I showed you
in some of the examples,

359
00:15:45,067 --> 00:15:48,133
what's important about that
is that you hold the state

360
00:15:48,133 --> 00:15:50,534
that the data was in
for the user.

361
00:15:50,534 --> 00:15:52,234
so it doesn't reload.

362
00:15:52,234 --> 00:15:53,701
And that's really powerful.

363
00:15:53,701 --> 00:15:56,534
We added a search button
to make it fast to search

364
00:15:56,534 --> 00:15:59,033
and we still have
our send and end keys.

365
00:15:59,033 --> 00:16:01,868
Send calls--
lets the user call.

366
00:16:01,868 --> 00:16:03,834
It also takes you
to the call log.

367
00:16:03,834 --> 00:16:06,067
And end will either
end the call,

368
00:16:06,067 --> 00:16:07,467
or if you long press on that,

369
00:16:07,467 --> 00:16:09,934
give you a fast way
to go into airplane mode,

370
00:16:09,934 --> 00:16:11,367
for example.

371
00:16:11,367 --> 00:16:13,767
And this is
a touch screen device,

372
00:16:13,767 --> 00:16:18,434
mainly portrait, which means
we have an onscreen keyboard.

373
00:16:18,434 --> 00:16:20,834
Now, previous to this,
I think many of you

374
00:16:20,834 --> 00:16:22,534
hopefully purchased
this product.

375
00:16:22,534 --> 00:16:24,000
It's the G1.

376
00:16:24,000 --> 00:16:30,534
And what this device represents
is the classic QWERTY slider.

377
00:16:30,534 --> 00:16:33,234
It also call--
the reason why I put this up

378
00:16:33,234 --> 00:16:35,133
is that you have
to call attention to the fact

379
00:16:35,133 --> 00:16:37,234
that you shouldn't forget
just because now

380
00:16:37,234 --> 00:16:39,267
we have
this great portrait device

381
00:16:39,267 --> 00:16:41,400
that landscape exists
in layouts.

382
00:16:41,400 --> 00:16:44,834
We turn landscape off in the HTC
magic on the home screen,

383
00:16:44,834 --> 00:16:49,367
but its not off in other views
of your application.

384
00:16:49,367 --> 00:16:50,868
For example,
if I rotate in Gmail,

385
00:16:50,868 --> 00:16:53,133
it will go
into landscape mode.

386
00:16:53,133 --> 00:16:55,033
So as a developer,

387
00:16:55,033 --> 00:16:58,133
it's important
not to overlook landscape.

388
00:16:58,133 --> 00:17:01,701
In the screenshot that I'm
showing on the left-hand side

389
00:17:01,701 --> 00:17:05,000
of the screen here,
Amazon did a really nice job

390
00:17:05,000 --> 00:17:09,300
in considering
what to do when the device opens

391
00:17:09,300 --> 00:17:12,834
in landscape view.

392
00:17:12,834 --> 00:17:15,000
You can see that they
had four buttons in portrait

393
00:17:15,000 --> 00:17:16,934
that looked
and fit really nicely.

394
00:17:16,934 --> 00:17:19,100
They're easy to touch.

395
00:17:19,100 --> 00:17:21,434
But what happens
when we open up that slider?

396
00:17:21,434 --> 00:17:24,133
Well, they actually chose
to do it 2x2,

397
00:17:24,133 --> 00:17:26,601
which kept everything
above fold.

398
00:17:26,601 --> 00:17:28,033
The key point
I'm trying to make here

399
00:17:28,033 --> 00:17:31,434
is that when we open up
to landscape,

400
00:17:31,434 --> 00:17:33,701
we get a greater width
but we reduce the height.

401
00:17:33,701 --> 00:17:36,367
And this
will be really important

402
00:17:36,367 --> 00:17:39,200
for you to think about
when you design widgets.

403
00:17:39,200 --> 00:17:42,367
Anyone who's read my widget
guidelines on the blog

404
00:17:42,367 --> 00:17:45,200
from the blog post
will identify with that point.

405
00:17:45,200 --> 00:17:47,767
You lose a great deal
of real estate

406
00:17:47,767 --> 00:17:49,634
in landscape mode.

407
00:17:49,634 --> 00:17:53,100
And another point that our
engineers wanted to make today

408
00:17:53,100 --> 00:17:54,701
which I'm happy to make to you

409
00:17:54,701 --> 00:17:59,300
is that 99% of our layouts
in the SDK support landscape,

410
00:17:59,300 --> 00:18:03,667
so you should be okay.

411
00:18:03,667 --> 00:18:06,868
Here's another example
just to drive home the point

412
00:18:06,868 --> 00:18:09,834
of what happens when you
go into landscape mode.

413
00:18:09,834 --> 00:18:11,334
On the left-hand side
of the screen,

414
00:18:11,334 --> 00:18:12,968
we're looking
at the browser bookmarks.

415
00:18:12,968 --> 00:18:17,434
Now, I can easily access
five bookmarks in portrait.

416
00:18:17,434 --> 00:18:19,000
It's great, no problem.

417
00:18:19,000 --> 00:18:21,968
As soon as I go to landscape,
I'm down to two.

418
00:18:21,968 --> 00:18:24,000
So just a visual cue

419
00:18:24,000 --> 00:18:26,601
to show you guys
what happens with landscape,

420
00:18:26,601 --> 00:18:29,033
which you probably already know
but I thought I'd, you know,

421
00:18:29,033 --> 00:18:32,200
just go through it
one more time.

422
00:18:32,200 --> 00:18:34,934
Now, this is a really big thing
to think about

423
00:18:34,934 --> 00:18:37,334
in terms of the basics
when designing for Android:

424
00:18:37,334 --> 00:18:39,501
focus and menus.

425
00:18:39,501 --> 00:18:41,534
Because we support both touch

426
00:18:41,534 --> 00:18:44,033
and, you know,
track ball navigation,

427
00:18:44,033 --> 00:18:47,634
there's really not
a notion of focus onscreen.

428
00:18:47,634 --> 00:18:49,634
Let me play an example
for you to illustrate

429
00:18:49,634 --> 00:18:51,167
what this means.

430
00:18:51,167 --> 00:18:53,467
Here I'm browsing in touch.

431
00:18:53,467 --> 00:18:55,767
In touch mode,
there is no focus.

432
00:18:55,767 --> 00:18:59,133
However, when I flick
and go use the track ball,

433
00:18:59,133 --> 00:19:01,200
focus appears on screen.

434
00:19:01,200 --> 00:19:03,133
As a designer and developer
for Android,

435
00:19:03,133 --> 00:19:05,200
just make sure
you never show focus.

436
00:19:05,200 --> 00:19:07,701
There's a great blog post
about touch mode

437
00:19:07,701 --> 00:19:08,934
that's been written.

438
00:19:08,934 --> 00:19:10,367
I highly suggest
you take a look at that

439
00:19:10,367 --> 00:19:12,133
in case you haven't
seen it already.

440
00:19:12,133 --> 00:19:14,367
And then
when I hit the main menu,

441
00:19:14,367 --> 00:19:15,934
there is no focus on that

442
00:19:15,934 --> 00:19:18,968
until I either press
with my finger

443
00:19:18,968 --> 00:19:25,000
or track ball select.

444
00:19:25,000 --> 00:19:27,801
Now, I just exposed you
to the main menu

445
00:19:27,801 --> 00:19:30,067
and I've kind of touched
on that in some of the examples.

446
00:19:30,067 --> 00:19:31,334
I may be moving a little fast.

447
00:19:31,334 --> 00:19:32,834
So hopefully
I can slow it down.

448
00:19:32,834 --> 00:19:35,634
But the main menu,
in terms of structure,

449
00:19:35,634 --> 00:19:38,934
it implies a great deal
of structure.

450
00:19:38,934 --> 00:19:42,334
As a developer or a designer
for Android,

451
00:19:42,334 --> 00:19:44,200
the way you should
think about the main menu

452
00:19:44,200 --> 00:19:47,801
is that it is comprised
of global functions.

453
00:19:47,801 --> 00:19:51,767
We can comfortably fit
up to six items onscreen.

454
00:19:51,767 --> 00:19:55,133
However, if--six items
on the main menu.

455
00:19:55,133 --> 00:19:56,767
However, if you
have more than six

456
00:19:56,767 --> 00:19:59,000
we suggest
you use the more button,

457
00:19:59,000 --> 00:20:02,300
which means you get five--
as you can see over here--

458
00:20:02,300 --> 00:20:05,234
five plus one on the right-hand
side of the screen.

459
00:20:05,234 --> 00:20:07,567
Another thing to keep in mind
with the main menu

460
00:20:07,567 --> 00:20:10,968
at a high level is that it
allows you to act on that list.

461
00:20:10,968 --> 00:20:14,634
So in Gmail, for example,
we have seven list items.

462
00:20:14,634 --> 00:20:17,100
When I select one,
which is the fifth one,

463
00:20:17,100 --> 00:20:18,601
and I want to view
that conversation,

464
00:20:18,601 --> 00:20:22,634
those global functions
that were on the home screen

465
00:20:22,634 --> 00:20:23,734
actually don't carry over.

466
00:20:23,734 --> 00:20:25,267
There's global functions
that carry over

467
00:20:25,267 --> 00:20:28,033
into the item
that you've selected

468
00:20:28,033 --> 00:20:30,234
that relate
to that conversation.

469
00:20:30,234 --> 00:20:32,501
So key thing to keep in mind,

470
00:20:32,501 --> 00:20:36,834
implied structure with menus,
five plus two.

471
00:20:36,834 --> 00:20:40,434
And also something else
about main menus

472
00:20:40,434 --> 00:20:42,467
that you may not know
is that we rank order--

473
00:20:42,467 --> 00:20:44,601
we order them in terms
of importance, rather,

474
00:20:44,601 --> 00:20:46,334
from left to right.

475
00:20:46,334 --> 00:20:48,367
So if you look across
our applications,

476
00:20:48,367 --> 00:20:50,367
we generally put refresh

477
00:20:50,367 --> 00:20:54,033
in either the first or second
slot across our apps.

478
00:20:54,033 --> 00:20:55,734
That helps with muscle memory.

479
00:20:55,734 --> 00:20:59,868
And this is something you guys
should keep in mind.

480
00:20:59,868 --> 00:21:03,133
Now, if we have this global
function called the main menu,

481
00:21:03,133 --> 00:21:07,567
how do we pivot and act
on contextual items?

482
00:21:07,567 --> 00:21:09,601
Well, as many of you may know,

483
00:21:09,601 --> 00:21:11,200
we have the notion
of long press.

484
00:21:11,200 --> 00:21:14,400
So I can be browsing a list--
for example, context--

485
00:21:14,400 --> 00:21:17,234
and then I can press and hold
or track ball press and hold,

486
00:21:17,234 --> 00:21:19,701
and then that will trigger
a long press menu.

487
00:21:19,701 --> 00:21:22,400
Now that long press menu--
which played very fast,

488
00:21:22,400 --> 00:21:23,901
so we'll do that again.

489
00:21:23,901 --> 00:21:27,834
That long press menu has
an implied structure as well.

490
00:21:27,834 --> 00:21:29,868
At the top of that
long press menu

491
00:21:29,868 --> 00:21:32,467
is the most relevant
contextual action

492
00:21:32,467 --> 00:21:34,434
to the item
that you've selected.

493
00:21:34,434 --> 00:21:36,601
So when you're browsing
the contact list,

494
00:21:36,601 --> 00:21:39,033
normally when you
tap that person's name,

495
00:21:39,033 --> 00:21:41,067
you're going to go
to the contact card.

496
00:21:41,067 --> 00:21:43,133
If you long press
to get additional functions

497
00:21:43,133 --> 00:21:45,234
related to that person,

498
00:21:45,234 --> 00:21:48,934
you still have the first option
to go to that contact card.

499
00:21:48,934 --> 00:21:52,167
So that's our structure
with long press menus.

500
00:21:52,167 --> 00:21:54,834
So now we have global
and contextual menus.

501
00:21:54,834 --> 00:21:56,601
And we'll also show you
an example here

502
00:21:56,601 --> 00:21:58,901
of what to do
with that more menu.

503
00:21:58,901 --> 00:22:02,000
As I mentioned before
when you have more than--

504
00:22:02,000 --> 00:22:03,501
we can fit six comfortably.

505
00:22:03,501 --> 00:22:05,834
When you have more,
we ask you put it--

506
00:22:05,834 --> 00:22:08,234
the rest of those functions
that are not primary

507
00:22:08,234 --> 00:22:10,467
into the more menu button.

508
00:22:10,467 --> 00:22:13,968
Here, for example,
in Google Talk,

509
00:22:13,968 --> 00:22:16,467
I can hit the more menu
and then I have

510
00:22:16,467 --> 00:22:18,968
not that many options
but I have settings.

511
00:22:18,968 --> 00:22:20,534
That's where I chose
to put settings.

512
00:22:20,534 --> 00:22:23,100
And I let the user
act on that.

513
00:22:23,100 --> 00:22:24,834
And they can hit
the back button at any time

514
00:22:24,834 --> 00:22:31,934
to go back
to the previous screen.

515
00:22:31,934 --> 00:22:35,868
Now, these are pretty good
basic concepts,

516
00:22:35,868 --> 00:22:38,901
and I also wanted to give you
an example today

517
00:22:38,901 --> 00:22:42,300
of what we think,
as a team, the limit is

518
00:22:42,300 --> 00:22:44,667
in the list view
framework structure

519
00:22:44,667 --> 00:22:46,868
for displaying data
and information.

520
00:22:46,868 --> 00:22:49,801
There's a lot of density
that exists in Gmail.

521
00:22:49,801 --> 00:22:52,968
And this is a view of how
you can use the structure

522
00:22:52,968 --> 00:22:54,267
to your advantage.

523
00:22:54,267 --> 00:22:57,434
We have a three-column layout
here that allows us

524
00:22:57,434 --> 00:22:59,367
to put check boxes
on the screen,

525
00:22:59,367 --> 00:23:02,167
which you'll soon see
in behavior trigger a mode.

526
00:23:02,167 --> 00:23:05,033
We have
the conversation list view

527
00:23:05,033 --> 00:23:07,567
which you can tap on,
or again, long press

528
00:23:07,567 --> 00:23:09,534
and have
contextually related items

529
00:23:09,534 --> 00:23:11,901
to that
list view button element.

530
00:23:11,901 --> 00:23:14,467
And then we have
the notion of the star,

531
00:23:14,467 --> 00:23:17,901
where a user
can assign importance.

532
00:23:17,901 --> 00:23:21,234
Now the other thing
that's implied

533
00:23:21,234 --> 00:23:23,400
in the framework structure
that you should think about--

534
00:23:23,400 --> 00:23:24,901
this kind of blends
into behavior

535
00:23:24,901 --> 00:23:26,467
and we're gonna get--

536
00:23:26,467 --> 00:23:28,667
you can tell that
it's very interrelated

537
00:23:28,667 --> 00:23:30,000
in terms of how design works.

538
00:23:30,000 --> 00:23:33,133
But as a developer,
you should think about

539
00:23:33,133 --> 00:23:36,567
the notion of read or unread,
so you can show a user

540
00:23:36,567 --> 00:23:39,133
whether or not something
has been read

541
00:23:39,133 --> 00:23:42,033
with white on black,
bold text, rather--

542
00:23:42,033 --> 00:23:43,267
bold text on white.

543
00:23:43,267 --> 00:23:45,467
Or if it's been read,
it's on gray

544
00:23:45,467 --> 00:23:47,367
and it's regular text.

545
00:23:47,367 --> 00:23:50,100
So a lot's going on
in structure.

546
00:23:50,100 --> 00:23:54,934
And a couple of key points
which I talked about today

547
00:23:54,934 --> 00:23:56,334
are when you're thinking about

548
00:23:56,334 --> 00:23:57,868
designing and developing
for Android,

549
00:23:57,868 --> 00:24:00,100
think about speed
and simplicity.

550
00:24:00,100 --> 00:24:02,667
Minimize
your onscreen actions.

551
00:24:02,667 --> 00:24:04,467
Use the main menu.

552
00:24:04,467 --> 00:24:08,267
Also, keep your hierarchy
as flat as possible.

553
00:24:08,267 --> 00:24:11,701
What I showed you in that
previous example calls out--

554
00:24:11,701 --> 00:24:13,868
there's a lot
of dense information,

555
00:24:13,868 --> 00:24:15,467
but I didn't have
to dig too deep

556
00:24:15,467 --> 00:24:19,767
to figure out what to do
on that screen.

557
00:24:19,767 --> 00:24:22,300
The other thing in some
of the examples that I noted

558
00:24:22,300 --> 00:24:24,734
was the idea of a lazy load.

559
00:24:24,734 --> 00:24:26,834
What we want to do on Android
for the user

560
00:24:26,834 --> 00:24:28,901
is to progressively load
in data.

561
00:24:28,901 --> 00:24:31,033
It gives the perception
of speed.

562
00:24:31,033 --> 00:24:33,501
And it's pretty powerful stuff
when you do it like that

563
00:24:33,501 --> 00:24:35,334
rather than waiting
for the whole page to load.

564
00:24:35,334 --> 00:24:37,701
Because, you know,
someone might just get bored

565
00:24:37,701 --> 00:24:40,000
and decide to use
the back button or back out--

566
00:24:40,000 --> 00:24:41,934
get out of your application
completely.

567
00:24:41,934 --> 00:24:43,200
So not a good thing.

568
00:24:43,200 --> 00:24:45,167
And then the other big thing
to keep in mind

569
00:24:45,167 --> 00:24:47,234
is activity streams.

570
00:24:47,234 --> 00:24:49,534
Make sure
your activities and tasks

571
00:24:49,534 --> 00:24:51,767
layer in or hook in intents.

572
00:24:51,767 --> 00:24:54,801
They'll make the user experience
much more powerful.

573
00:24:54,801 --> 00:24:58,434
And they'll give you, again,
greater flexibility.

574
00:24:58,434 --> 00:25:00,801
You don't have to design
or develop everything

575
00:25:00,801 --> 00:25:02,300
because you
can take advantage of it

576
00:25:02,300 --> 00:25:07,100
from other parts
of the framework.

577
00:25:07,100 --> 00:25:10,667
Okay, the second pillar
of the Android user experience:

578
00:25:10,667 --> 00:25:11,901
behavior.

579
00:25:11,901 --> 00:25:13,734
Here's how we're
going to ta--

580
00:25:13,734 --> 00:25:16,701
we're actually going to bring
that structure to life.

581
00:25:16,701 --> 00:25:18,100
And what does that mean?

582
00:25:18,100 --> 00:25:22,467
Well, let's take a look
at an example in Gmail again.

583
00:25:22,467 --> 00:25:25,400
So as I mentioned,
we had those check boxes

584
00:25:25,400 --> 00:25:27,400
which you could trigger
a mode.

585
00:25:27,400 --> 00:25:29,567
You know, besides
going into a conversation

586
00:25:29,567 --> 00:25:31,567
and looking at that directly,

587
00:25:31,567 --> 00:25:33,400
which is what we had in 1.0,

588
00:25:33,400 --> 00:25:35,300
we've implemented
a new behavior

589
00:25:35,300 --> 00:25:36,934
that when you
select a check box,

590
00:25:36,934 --> 00:25:39,567
you can see that
up from the bottom comes a bar.

591
00:25:39,567 --> 00:25:42,000
And that bar allows you
to archive, label, or delete.

592
00:25:42,000 --> 00:25:44,033
That's a behavior--
an animated behavior

593
00:25:44,033 --> 00:25:48,033
that signifies that
we're in a multi-tasking mode.

594
00:25:48,033 --> 00:25:51,000
As a user, I can now triage
my inbox.

595
00:25:51,000 --> 00:25:54,100
I still have another behavior
to talk about

596
00:25:54,100 --> 00:25:56,834
in that we show Toast.

597
00:25:56,834 --> 00:26:00,434
So that Toast tells you
a very quick confirmation

598
00:26:00,434 --> 00:26:02,801
that, "Oh, I have in fact
deleted that."

599
00:26:02,801 --> 00:26:04,334
So we layered in behaviors,

600
00:26:04,334 --> 00:26:09,534
and that brought
that structure to life.

601
00:26:09,534 --> 00:26:11,067
Another example of behaviors--

602
00:26:11,067 --> 00:26:13,467
and actually, I downloaded
an app this morning

603
00:26:13,467 --> 00:26:15,000
that I wanted to call out,

604
00:26:15,000 --> 00:26:16,234
that you guys
should all download.

605
00:26:16,234 --> 00:26:18,634
It's a Google I/O calendar
for Android.

606
00:26:18,634 --> 00:26:21,601
It uses expandable lists.

607
00:26:21,601 --> 00:26:24,000
And that allows--
it allows the developers,

608
00:26:24,000 --> 00:26:27,634
much like it allowed us in
the browser history view here,

609
00:26:27,634 --> 00:26:29,400
to compress
a lot of information

610
00:26:29,400 --> 00:26:31,267
into one list view button
element.

611
00:26:31,267 --> 00:26:32,701
And then you could expand that

612
00:26:32,701 --> 00:26:35,467
depending on how much
you wanted to view at one time.

613
00:26:35,467 --> 00:26:38,634
Because, you know, if you look
at the browser, for example,

614
00:26:38,634 --> 00:26:41,033
there's gonna be a ton
of bookmarks in your history.

615
00:26:41,033 --> 00:26:42,734
So that could go forever

616
00:26:42,734 --> 00:26:44,267
and you could be scrolling
endlessly.

617
00:26:44,267 --> 00:26:46,667
If you use an expandable
list behavior,

618
00:26:46,667 --> 00:26:48,334
you can compress
that information

619
00:26:48,334 --> 00:26:51,200
in a way that a user
could actually digest.

620
00:26:51,200 --> 00:26:54,067
So here's just another
element of a behavior

621
00:26:54,067 --> 00:26:57,267
that you might want to consider
when you've build a structure

622
00:26:57,267 --> 00:27:01,734
with an expandable list.

623
00:27:01,734 --> 00:27:05,000
This is my favorite behavior
that we have in the system,

624
00:27:05,000 --> 00:27:06,334
or one of my favorites.

625
00:27:06,334 --> 00:27:08,934
And that is the ability
for direct manipulation

626
00:27:08,934 --> 00:27:10,934
of a list
through drag and drop.

627
00:27:10,934 --> 00:27:14,601
In the music player example
that you see here,

628
00:27:14,601 --> 00:27:16,667
I'm able to reorder
my playlist.

629
00:27:16,667 --> 00:27:18,067
And it's really powerful.

630
00:27:18,067 --> 00:27:21,133
The other thing that this
example kind of highlights again

631
00:27:21,133 --> 00:27:23,033
is the notion
of expression.

632
00:27:23,033 --> 00:27:24,434
The way that I know as a user,

633
00:27:24,434 --> 00:27:27,467
the hint for me, is that
little icon on the left.

634
00:27:27,467 --> 00:27:29,167
That was my hint
to drag and drop.

635
00:27:29,167 --> 00:27:31,667
So that's a cool behavior you
can take advantage of as well

636
00:27:31,667 --> 00:27:33,534
in terms of when
you're looking at a list

637
00:27:33,534 --> 00:27:35,767
you structure--

638
00:27:35,767 --> 00:27:40,067
excuse me,
our structure for lists.

639
00:27:40,067 --> 00:27:42,400
Another point, though,
to make about behaviors

640
00:27:42,400 --> 00:27:45,934
is it's not all--it's not always
gonna work out perfectly.

641
00:27:45,934 --> 00:27:48,133
In the example on the right
with the browser bookmarks,

642
00:27:48,133 --> 00:27:50,567
we didn't allow
for direct manipulation.

643
00:27:50,567 --> 00:27:51,601
And we heard about it.

644
00:27:51,601 --> 00:27:52,934
It's not a great idea.

645
00:27:52,934 --> 00:27:57,133
So we plan on changing that
in the next release.

646
00:27:57,133 --> 00:27:59,467
As much as we think
we know what we're doing,

647
00:27:59,467 --> 00:28:00,901
sometimes we don't.

648
00:28:00,901 --> 00:28:02,234
And you guys as developers

649
00:28:02,234 --> 00:28:04,000
are gonna have
to try out behaviors too.

650
00:28:04,000 --> 00:28:06,033
Because generally,
even though

651
00:28:06,033 --> 00:28:08,167
you can pick these out
of the API demos,

652
00:28:08,167 --> 00:28:09,634
they may not work for a user.

653
00:28:09,634 --> 00:28:11,934
So what you should do
is implement them

654
00:28:11,934 --> 00:28:17,067
and get some quick feedback
when possible.

655
00:28:17,067 --> 00:28:21,534
Now, for anyone that's
used our system,

656
00:28:21,534 --> 00:28:23,267
we have the notion of a Toast.

657
00:28:23,267 --> 00:28:26,367
A Toast is a tool tip
in Android.

658
00:28:26,367 --> 00:28:28,200
And the point I want to make
about a Toast

659
00:28:28,200 --> 00:28:30,834
is that it's meant to be used

660
00:28:30,834 --> 00:28:33,834
when a user actually has
their attention on the screen,

661
00:28:33,834 --> 00:28:35,400
otherwise
they're gonna miss it.

662
00:28:35,400 --> 00:28:38,501
We found a lot of good data
that shows

663
00:28:38,501 --> 00:28:41,200
if something is going
to be harmful for the user,

664
00:28:41,200 --> 00:28:44,634
it's probably better
to use a dialogue at this point.

665
00:28:44,634 --> 00:28:46,968
If you use our new Gmail,

666
00:28:46,968 --> 00:28:50,567
we ship with the dialogue
on for delete.

667
00:28:50,567 --> 00:28:53,567
Delete confirmation on
as a dialogue in Gmail.

668
00:28:53,567 --> 00:28:55,033
We don't ship with--

669
00:28:55,033 --> 00:28:56,834
you can turn that off and then
you'll get Toast all day,

670
00:28:56,834 --> 00:28:58,501
which is fine.

671
00:28:58,501 --> 00:29:01,267
But if it's going to harm
a user, don't use the Toast

672
00:29:01,267 --> 00:29:05,701
is the point
I'm trying to make.

673
00:29:05,701 --> 00:29:09,467
Now, we have some--you saw
some pretty basic behaviors.

674
00:29:09,467 --> 00:29:11,767
Check boxes bring things up,
you know.

675
00:29:11,767 --> 00:29:13,767
It's obvious stuff.

676
00:29:13,767 --> 00:29:15,601
And you can drag and drop
a list.

677
00:29:15,601 --> 00:29:17,767
That's awesome,
but it's pretty expected

678
00:29:17,767 --> 00:29:20,067
that once you've picked that up,
it's gonna do the--

679
00:29:20,067 --> 00:29:23,367
perform the action that
you want it to take as a user.

680
00:29:23,367 --> 00:29:25,801
We have the notion
of some of--

681
00:29:25,801 --> 00:29:28,300
we have the notion
of delight as designers.

682
00:29:28,300 --> 00:29:31,067
And in Android, you can utilize
some of the behaviors

683
00:29:31,067 --> 00:29:35,234
that I talked about, especially
the long press behavior,

684
00:29:35,234 --> 00:29:36,734
to create unexpected delight.

685
00:29:36,734 --> 00:29:40,000
Oop, ooh, you know, I got--
I jumped ahead again.

686
00:29:40,000 --> 00:29:41,901
Well, I'll get to that one.

687
00:29:41,901 --> 00:29:43,234
But this one is really cool

688
00:29:43,234 --> 00:29:45,767
because we have this unexpected
delight that occurs

689
00:29:45,767 --> 00:29:48,100
when you use animation
that I wanted to highlight.

690
00:29:48,100 --> 00:29:52,133
So here I'm gonna
shake things up, I guess.

691
00:29:52,133 --> 00:29:54,968
And I'm gonna show an example
of what loop did.

692
00:29:54,968 --> 00:29:56,701
They layered in behaviors.

693
00:29:56,701 --> 00:29:59,534
So here is a classic
shake animation

694
00:29:59,534 --> 00:30:00,934
that doesn't make me feel bad.

695
00:30:00,934 --> 00:30:02,901
It's fun.
It's cute.

696
00:30:02,901 --> 00:30:06,667
And I actually want to keep
making mistakes, frankly.

697
00:30:06,667 --> 00:30:09,701
You know?
[laughs]

698
00:30:09,701 --> 00:30:12,200
And you'll notice
that they took the time

699
00:30:12,200 --> 00:30:16,400
to build behaviors so that
it enhanced the user experience.

700
00:30:16,400 --> 00:30:18,200
And it actually fits their brand
pretty well.

701
00:30:18,200 --> 00:30:20,100
They're fun to begin with.

702
00:30:20,100 --> 00:30:21,868
And they didn't just
have to put up, hey, you know,

703
00:30:21,868 --> 00:30:24,367
a red error message
and say, you know,

704
00:30:24,367 --> 00:30:25,567
"Type that again."

705
00:30:25,567 --> 00:30:27,400
They chose to do something
really fun.

706
00:30:27,400 --> 00:30:29,667
So these are things that--
as you start

707
00:30:29,667 --> 00:30:32,834
to get your head around
how to use behaviors,

708
00:30:32,834 --> 00:30:36,834
that you should think about.

709
00:30:36,834 --> 00:30:39,701
Now the other unexpected delight
that I was thinking

710
00:30:39,701 --> 00:30:42,033
when I saw that video
was when you long press

711
00:30:42,033 --> 00:30:44,100
on album art
in the browser for us,

712
00:30:44,100 --> 00:30:48,501
we have this really cool ability
to surface for the user

713
00:30:48,501 --> 00:30:52,167
the ability
to go to Amazon, MP3,

714
00:30:52,167 --> 00:30:55,334
to either buy songs
or purchase the album directly.

715
00:30:55,334 --> 00:30:57,133
You can go to the browser.

716
00:30:57,133 --> 00:30:58,534
Here, I'll play that again.

717
00:30:58,534 --> 00:31:01,100
You can go to the browser
to search more for that artist

718
00:31:01,100 --> 00:31:04,133
or you can go to YouTube
to probably watch their videos.

719
00:31:04,133 --> 00:31:06,033
And that's not expected.

720
00:31:06,033 --> 00:31:08,734
In fact, I would probably say
it's a little too hidden,

721
00:31:08,734 --> 00:31:11,667
but these are things that,
as a developer,

722
00:31:11,667 --> 00:31:13,601
if, you know,
maybe you have a little icon

723
00:31:13,601 --> 00:31:15,901
and that would indicate
a hint for the user.

724
00:31:15,901 --> 00:31:17,634
And we'll get to that
in expression again--

725
00:31:17,634 --> 00:31:22,968
how you can surface behaviors
better than a user

726
00:31:22,968 --> 00:31:25,234
and create unexpected delight.

727
00:31:25,234 --> 00:31:30,167
Okay, I'm moving
way too fast today, but...

728
00:31:30,167 --> 00:31:34,133
the third pillar of expression
that I want to talk about

729
00:31:34,133 --> 00:31:37,601
is probably the hardest one

730
00:31:37,601 --> 00:31:40,000
to discuss in front
of a large group.

731
00:31:40,000 --> 00:31:43,067
And that is that this
represents--

732
00:31:43,067 --> 00:31:44,467
If you think about
structure and behavior

733
00:31:44,467 --> 00:31:46,467
representing 80% of your work--

734
00:31:46,467 --> 00:31:49,868
that is, you know, you've done
the heavy lifting.

735
00:31:49,868 --> 00:31:52,601
The code's in place.
You've picked your behaviors.

736
00:31:52,601 --> 00:31:54,467
You've hopefully
got things running.

737
00:31:54,467 --> 00:31:56,234
And maybe you've gotten
some feedback.

738
00:31:56,234 --> 00:31:59,367
Expression's
gonna be the next 20%

739
00:31:59,367 --> 00:32:02,300
of the time you spend
building your app.

740
00:32:02,300 --> 00:32:03,601
And why is that?

741
00:32:03,601 --> 00:32:06,033
Because
in the expression pillar,

742
00:32:06,033 --> 00:32:08,434
you're gonna have
to focus on the details.

743
00:32:08,434 --> 00:32:10,601
As one of--
the best--

744
00:32:10,601 --> 00:32:13,400
the best example I can give you
to focus on details

745
00:32:13,400 --> 00:32:14,734
comes from a quote

746
00:32:14,734 --> 00:32:17,033
from the legendary designer
Charles Eames.

747
00:32:17,033 --> 00:32:19,300
Charles Eames said,

748
00:32:19,300 --> 00:32:21,868
"The details are the details.

749
00:32:21,868 --> 00:32:24,734
They make the product."

750
00:32:24,734 --> 00:32:28,167
Now, what that means
is it's gut check time

751
00:32:28,167 --> 00:32:30,634
when you get to this layer

752
00:32:30,634 --> 00:32:33,734
or this pillar in the process.

753
00:32:33,734 --> 00:32:37,334
Hopefully you've gotten
some feedback from people.

754
00:32:37,334 --> 00:32:39,534
If you haven't, maybe you--
or maybe you've been fortunate

755
00:32:39,534 --> 00:32:41,934
to actually sit
with a designer.

756
00:32:41,934 --> 00:32:45,200
At that point, you have
to decide as a developer

757
00:32:45,200 --> 00:32:47,000
how you're gonna
tighten up your app

758
00:32:47,000 --> 00:32:49,968
to create the polish that
someone, when they open it,

759
00:32:49,968 --> 00:32:52,167
is going to,
you know, think,

760
00:32:52,167 --> 00:32:54,501
"Okay, this is
a really good, solid app."

761
00:32:54,501 --> 00:32:57,100
And the good news is
there's a couple of things

762
00:32:57,100 --> 00:32:59,601
that we built into the framework
that I can help you--

763
00:32:59,601 --> 00:33:01,367
that can help you do this.

764
00:33:01,367 --> 00:33:02,901
And I'm gonna go through those.

765
00:33:02,901 --> 00:33:05,834
The other thing to keep
in mind, though, with expression

766
00:33:05,834 --> 00:33:11,000
is that it serves a function
not just as an aesthetic.

767
00:33:11,000 --> 00:33:13,300
'Cause, you know, when you
look at the new Google Talk,

768
00:33:13,300 --> 00:33:15,701
you can see that the padding
and the margins are really good,

769
00:33:15,701 --> 00:33:18,267
and--and it's really t--

770
00:33:18,267 --> 00:33:22,234
you feel like, "Okay,
that's a very polished app."

771
00:33:22,234 --> 00:33:26,167
But you also know as a user
that using the elements

772
00:33:26,167 --> 00:33:28,501
of expression with a text field
and the buttons,

773
00:33:28,501 --> 00:33:30,367
that I know that I can tap
that text field

774
00:33:30,367 --> 00:33:31,934
and change my status message.

775
00:33:31,934 --> 00:33:34,467
I can also hit the button
and change presence.

776
00:33:34,467 --> 00:33:39,167
Now, there's another layer,
though, beyond the polish

777
00:33:39,167 --> 00:33:42,167
that exists with this.

778
00:33:42,167 --> 00:33:46,167
Can someone tell me what's
onscreen in that list view

779
00:33:46,167 --> 00:33:52,434
that seems out of place
or just--

780
00:33:52,434 --> 00:33:54,400
The geeky Android.
Yes, correct.

781
00:33:54,400 --> 00:33:58,300
What do you think that means?

782
00:33:58,300 --> 00:34:00,634
Okay, well, they're
on an Android phone, but yes.

783
00:34:00,634 --> 00:34:03,234
And what that tells you
as a user, though,

784
00:34:03,234 --> 00:34:05,501
is that not only--

785
00:34:05,501 --> 00:34:08,100
Well, what that tells you
is it's not just a cute element.

786
00:34:08,100 --> 00:34:11,367
But this person is probably,

787
00:34:11,367 --> 00:34:12,968
even though she seems
to be available,

788
00:34:12,968 --> 00:34:15,367
I can tell by her status message
and that icon

789
00:34:15,367 --> 00:34:17,601
that she may not immediately
be able to get back to me.

790
00:34:17,601 --> 00:34:20,234
So you can use expression
in a way

791
00:34:20,234 --> 00:34:23,667
that gives the user
actionable information.

792
00:34:28,567 --> 00:34:30,734
So as I mentioned before,

793
00:34:30,734 --> 00:34:33,367
the API demos
are a really good place

794
00:34:33,367 --> 00:34:35,634
to start
to build your toolkit.

795
00:34:35,634 --> 00:34:37,901
We have structural elements
in there, like lists,

796
00:34:37,901 --> 00:34:39,934
and expandable list.

797
00:34:39,934 --> 00:34:41,701
We have behavior elements
as well.

798
00:34:41,701 --> 00:34:42,968
We have dialogues.

799
00:34:42,968 --> 00:34:44,334
We have spinners,
which are drop down menus.

800
00:34:44,334 --> 00:34:45,601
We have Toast.

801
00:34:45,601 --> 00:34:47,267
And we also have animation.

802
00:34:47,267 --> 00:34:49,400
Again, there's a really good
talk today

803
00:34:49,400 --> 00:34:51,734
from David Sparks about
the Android media framework

804
00:34:51,734 --> 00:34:53,033
which I want to pitch

805
00:34:53,033 --> 00:34:54,534
that you guys
should definitely check out

806
00:34:54,534 --> 00:34:57,400
because he'll help you
with all that.

807
00:34:57,400 --> 00:35:00,634
We also have something--
we also have a couple of tools

808
00:35:00,634 --> 00:35:02,801
which can help you
tighten up your app.

809
00:35:02,801 --> 00:35:05,701
And one of them
is the 9 patch tool.

810
00:35:05,701 --> 00:35:07,601
The 9 patch tool
is really awesome.

811
00:35:07,601 --> 00:35:10,033
And as a designer, let me--
I can explain it to you

812
00:35:10,033 --> 00:35:11,934
as a designer
and not a developer.

813
00:35:11,934 --> 00:35:14,534
But basically what that is
is it allows me

814
00:35:14,534 --> 00:35:16,934
to create scalable assets.

815
00:35:16,934 --> 00:35:18,400
And an asset
is a piece of artwork

816
00:35:18,400 --> 00:35:20,200
that can have
a gradient or not.

817
00:35:20,200 --> 00:35:23,300
But basically what happens is,
as a designer

818
00:35:23,300 --> 00:35:26,234
is you create your button
element or whatnot

819
00:35:26,234 --> 00:35:28,534
and you compress that
to its smallest state,

820
00:35:28,534 --> 00:35:30,000
both in terms of width
and height.

821
00:35:30,000 --> 00:35:31,467
And then you place it
in this tool

822
00:35:31,467 --> 00:35:36,100
which you can download
from our SDK reference toolkit.

823
00:35:36,100 --> 00:35:38,300
And then once
it's inside there,

824
00:35:38,300 --> 00:35:40,667
you see
little black tick marks.

825
00:35:40,667 --> 00:35:42,901
Now it took me months
to figure out how to use these,

826
00:35:42,901 --> 00:35:44,901
so I'm no expert.

827
00:35:44,901 --> 00:35:48,734
But once I did,
the power of having this tool

828
00:35:48,734 --> 00:35:52,234
was awesome because basically
I could tell the developer

829
00:35:52,234 --> 00:35:54,334
where I wanted him
to stretch the asset,

830
00:35:54,334 --> 00:35:56,634
both vertically
and horizontally.

831
00:35:56,634 --> 00:35:58,100
And then I could also add in,

832
00:35:58,100 --> 00:36:00,033
as you see
on the right-hand side,

833
00:36:00,033 --> 00:36:02,801
special tick marks
that indicate padding.

834
00:36:02,801 --> 00:36:05,400
So in the magnified view,

835
00:36:05,400 --> 00:36:08,167
the asset stretches well
vertically and horizontally,

836
00:36:08,167 --> 00:36:11,968
but also the padding is uniform
all the way around.

837
00:36:11,968 --> 00:36:13,334
And that's a really big thing

838
00:36:13,334 --> 00:36:15,033
'cause that's gonna create
what you just saw

839
00:36:15,033 --> 00:36:17,534
on the Google Talk screen,
the notion of polish

840
00:36:17,534 --> 00:36:21,634
with someone who looks
at your application.

841
00:36:21,634 --> 00:36:25,868
Now what accompanies a 9 patch
technique often

842
00:36:25,868 --> 00:36:29,100
is something we call banding,
especially with gradients.

843
00:36:29,100 --> 00:36:32,067
When you're on a 16-bit display,
it's gonna happen.

844
00:36:32,067 --> 00:36:34,400
Now previous to 1.5,

845
00:36:34,400 --> 00:36:37,367
the solution
to a banding element,

846
00:36:37,367 --> 00:36:39,000
which--it still exists
in the browser,

847
00:36:39,000 --> 00:36:40,067
and that's an example
on the left

848
00:36:40,067 --> 00:36:41,367
that you really can't see--

849
00:36:41,367 --> 00:36:42,868
but basically a line
will come across

850
00:36:42,868 --> 00:36:45,901
when you stretch a gradient
if it hasn't been dithered.

851
00:36:45,901 --> 00:36:49,234
Previous to 1.5,
the designer or developer

852
00:36:49,234 --> 00:36:51,701
had to apply
a special 565 filter

853
00:36:51,701 --> 00:36:54,934
in the image editing program
of your choice

854
00:36:54,934 --> 00:36:56,934
to that gradient asset.

855
00:36:56,934 --> 00:37:00,100
And hopefully it would dither
and it would stretch

856
00:37:00,100 --> 00:37:02,000
and it wouldn't have banding.

857
00:37:02,000 --> 00:37:04,467
The good news is--that's a lot
of work, by the way.

858
00:37:04,467 --> 00:37:07,534
The good news is in 1.5

859
00:37:07,534 --> 00:37:10,801
we've created a way
for you, with code,

860
00:37:10,801 --> 00:37:12,601
that you can dither
in run time.

861
00:37:12,601 --> 00:37:14,300
So that code snippet
on the right

862
00:37:14,300 --> 00:37:15,767
is something that
I would probably use

863
00:37:15,767 --> 00:37:18,367
if I was a developer
and I was using 9 patches.

864
00:37:18,367 --> 00:37:19,934
And again, why 9 patch?

865
00:37:19,934 --> 00:37:22,334
Because it compresses
the size of the image

866
00:37:22,334 --> 00:37:28,267
which reduces the overall
file size of your APK.

867
00:37:28,267 --> 00:37:31,601
Another really cool trick
and technique

868
00:37:31,601 --> 00:37:33,601
that you should use--because
I hope everyone in this room

869
00:37:33,601 --> 00:37:36,000
wants to localize their app
and not just,

870
00:37:36,000 --> 00:37:38,534
you know, go international
and not just stay local--

871
00:37:38,534 --> 00:37:41,267
is the marquee event,
text marquee.

872
00:37:41,267 --> 00:37:44,968
You can trigger a text marquee
now in Cupcake 1.5

873
00:37:44,968 --> 00:37:47,367
which will allow you
to scroll strings.

874
00:37:47,367 --> 00:37:50,067
And this is really valuable
when you localize

875
00:37:50,067 --> 00:37:52,133
because your strings
are going to get longer.

876
00:37:52,133 --> 00:37:55,167
So an example of this
would be in the marketplace,

877
00:37:55,167 --> 00:37:57,267
for example.

878
00:37:57,267 --> 00:38:00,801
It is only triggered
on track ball rollover.

879
00:38:00,801 --> 00:38:03,434
But then as soon as you
track ball over that

880
00:38:03,434 --> 00:38:07,167
list view button element,
you can animate a string.

881
00:38:07,167 --> 00:38:09,701
So you don't have to ellipsize
in the standard way

882
00:38:09,701 --> 00:38:12,801
of dot dot dot, which can't
really help that many people

883
00:38:12,801 --> 00:38:19,834
when you in fact go
to, like, Deutschland strings.

884
00:38:19,834 --> 00:38:21,467
Another thing that
you should keep in mind

885
00:38:21,467 --> 00:38:24,000
in terms of expression
is we've built in the use

886
00:38:24,000 --> 00:38:27,167
of scalable pixel units
topography.

887
00:38:27,167 --> 00:38:30,701
And what that means is
if you call large, medium,

888
00:38:30,701 --> 00:38:32,667
or small text appearance,

889
00:38:32,667 --> 00:38:35,968
this will give you the primary
and secondary string colors

890
00:38:35,968 --> 00:38:40,501
and sizes that we use
in the system framework.

891
00:38:40,501 --> 00:38:43,501
For example, if I look
at Spare Parts--

892
00:38:43,501 --> 00:38:45,434
this is an application
that's available on the market

893
00:38:45,434 --> 00:38:47,634
that many of you probably have.

894
00:38:47,634 --> 00:38:50,434
I can quickly scale up or down
my font size.

895
00:38:50,434 --> 00:38:52,067
But as an added bonus,
what happens

896
00:38:52,067 --> 00:38:55,200
is margin and padding
stay the same.

897
00:38:55,200 --> 00:38:58,200
So you basically retain

898
00:38:58,200 --> 00:39:01,834
the tightness and the polish
that you want

899
00:39:01,834 --> 00:39:05,400
as a developer
who's gonna distribute

900
00:39:05,400 --> 00:39:07,367
an application to the world.

901
00:39:24,067 --> 00:39:27,434
Now, a final tip
for expression.

902
00:39:27,434 --> 00:39:29,567
Excuse me, final tip
for expression would be,

903
00:39:29,567 --> 00:39:31,701
since this talk is about
"pixel perfect code,"

904
00:39:31,701 --> 00:39:35,033
and if you have
the fortunate circumstance

905
00:39:35,033 --> 00:39:37,267
to work with a designer
or you're a developer

906
00:39:37,267 --> 00:39:40,300
that can create a mock-up
and the export a PNG file,

907
00:39:40,300 --> 00:39:43,767
you'll get what we call
a pixel perfect layout.

908
00:39:43,767 --> 00:39:46,534
That pixel perfect layout
can then be input

909
00:39:46,534 --> 00:39:49,467
into the Hierarchy Viewer
which is available as well

910
00:39:49,467 --> 00:39:50,968
for you to use.

911
00:39:50,968 --> 00:39:53,167
And if you use
the onion skinning feature,

912
00:39:53,167 --> 00:39:55,067
you can make sure
that all the elements

913
00:39:55,067 --> 00:39:56,467
on that screen line up.

914
00:39:56,467 --> 00:39:58,868
You know, you're
probably gonna customize,

915
00:39:58,868 --> 00:40:01,234
so some of those tips
and tricks, while useful,

916
00:40:01,234 --> 00:40:03,400
may not always be useful
because your designer

917
00:40:03,400 --> 00:40:07,000
may decide that, "I need
to use a different text height

918
00:40:07,000 --> 00:40:10,801
as opposed to our standard
18 SP and 14 SP."

919
00:40:10,801 --> 00:40:12,167
So when that happens and--

920
00:40:12,167 --> 00:40:13,834
or different elements
appear onscreen

921
00:40:13,834 --> 00:40:15,601
and you want to check padding,

922
00:40:15,601 --> 00:40:18,667
you use the hierarchy
of your onion skin feature.

923
00:40:18,667 --> 00:40:21,133
It will help you,
it will save you time,

924
00:40:21,133 --> 00:40:24,200
and it will also all you
to embrace a better focus

925
00:40:24,200 --> 00:40:29,501
for the details which will make
your application better.

926
00:40:29,501 --> 00:40:32,100
Now there's three talks
that will expand

927
00:40:32,100 --> 00:40:34,467
on everything
I've covered here today.

928
00:40:34,467 --> 00:40:38,901
There's--as I mentioned,
there's David Sparks'

929
00:40:38,901 --> 00:40:41,234
introduction,
or actually, huge overview

930
00:40:41,234 --> 00:40:43,634
on the Android media framework
which I would attend.

931
00:40:43,634 --> 00:40:45,634
And then tomorrow
we have two developers talking:

932
00:40:45,634 --> 00:40:47,367
Romain Guy,
who's gonna talk about

933
00:40:47,367 --> 00:40:48,567
turbo-charging your UI,

934
00:40:48,567 --> 00:40:50,167
as well as Joe Onarato,

935
00:40:50,167 --> 00:40:52,300
who will talk about supporting
multiple binaries.

936
00:40:52,300 --> 00:40:54,234
And Joe's talk
is really important

937
00:40:54,234 --> 00:40:57,567
because he's going to explore
something we call DIP,

938
00:40:57,567 --> 00:40:59,601
which is
device independent pixels.

939
00:40:59,601 --> 00:41:03,100
What you saw in
the Spare Parts example

940
00:41:03,100 --> 00:41:06,234
is how you will
be able to scale up

941
00:41:06,234 --> 00:41:08,767
on different resolutions
and screen sizes

942
00:41:08,767 --> 00:41:10,767
using that technique.

943
00:41:10,767 --> 00:41:12,133
And Joe is gonna cover that,

944
00:41:12,133 --> 00:41:15,434
so I would hope you would
attend that as well.

945
00:41:15,434 --> 00:41:19,200
Now, I've been told
that we are going

946
00:41:19,200 --> 00:41:21,767
to actually publish
a blog post today

947
00:41:21,767 --> 00:41:24,767
which will be the first section
of our UI guidelines.

948
00:41:24,767 --> 00:41:27,901
So you'll have more background
in what I've covered

949
00:41:27,901 --> 00:41:31,300
in a rapid time
than just this presentation

950
00:41:31,300 --> 00:41:35,734
to review for how to do
good Android user experience

951
00:41:35,734 --> 00:41:37,267
on the web.

952
00:41:37,267 --> 00:41:39,701
We've also--I also wanted
to highlight the fact

953
00:41:39,701 --> 00:41:41,667
that in each SDK release,

954
00:41:41,667 --> 00:41:43,968
we're giving you
the source artwork.

955
00:41:43,968 --> 00:41:45,300
So you can download--

956
00:41:45,300 --> 00:41:46,968
If you need a main menu icon,

957
00:41:46,968 --> 00:41:49,667
you can go to the source tree
and download

958
00:41:49,667 --> 00:41:52,834
the PNG file of your choice
to put into your application.

959
00:41:52,834 --> 00:41:56,200
In fact, we encourage you
to do that.

960
00:41:56,200 --> 00:41:59,133
And we've also been really good
and proactive lately

961
00:41:59,133 --> 00:42:02,834
about publishing certain
user experience guidelines

962
00:42:02,834 --> 00:42:06,300
such as icons--
for icons and widgets.

963
00:42:06,300 --> 00:42:09,767
So look forward to more
of those.

964
00:42:09,767 --> 00:42:12,367
Okay, and now I'm gonna take
some questions,

965
00:42:12,367 --> 00:42:13,834
which we have a lot
of time for.

966
00:42:13,834 --> 00:42:21,968
[applause]

967
00:42:31,100 --> 00:42:33,734
Okay.
man: Hi.

968
00:42:33,734 --> 00:42:36,400
What's your thought about
when the vendor

969
00:42:36,400 --> 00:42:38,400
providing Android device

970
00:42:38,400 --> 00:42:40,667
that does not support
touch screen?

971
00:42:40,667 --> 00:42:42,901
Like, will there be
certain features that can--

972
00:42:42,901 --> 00:42:46,634
can that be used
like drag and drop?

973
00:42:46,634 --> 00:42:48,834
Nesladek: So the question
is what happens

974
00:42:48,834 --> 00:42:51,334
when a device
is in the marketplace

975
00:42:51,334 --> 00:42:53,601
that can't support drag and drop
is what you're try--

976
00:42:53,601 --> 00:42:56,000
it's only track ball focus?

977
00:42:56,000 --> 00:42:59,667
man: About the future devices,

978
00:42:59,667 --> 00:43:01,467
hence a vendor
may create a device

979
00:43:01,467 --> 00:43:03,667
that does not
support touch screen

980
00:43:03,667 --> 00:43:06,300
because touch screen
is expensive component?

981
00:43:06,300 --> 00:43:10,267
Nesladek: So I think--
and I'm not the one--

982
00:43:10,267 --> 00:43:12,767
you should probably check out
press@google.com.

983
00:43:12,767 --> 00:43:15,467
But in general, there's
a compatibility program

984
00:43:15,467 --> 00:43:17,000
that exists with Android

985
00:43:17,000 --> 00:43:20,534
so that generally
the people that are in the OHA,

986
00:43:20,534 --> 00:43:22,801
the device manufacturers
and everyone else,

987
00:43:22,801 --> 00:43:25,567
has to support both touch
and track ball focus.

988
00:43:25,567 --> 00:43:27,334
So that should not happen.

989
00:43:27,334 --> 00:43:30,300
man: Okay, thank you.

990
00:43:30,300 --> 00:43:32,334
man: I have a question
about context menus.

991
00:43:32,334 --> 00:43:36,501
I'm wondering why there
is a prohibition

992
00:43:36,501 --> 00:43:42,234
against using icons
in contextual menus.

993
00:43:42,234 --> 00:43:44,334
Nesladek: Well, the way
that you should think

994
00:43:44,334 --> 00:43:46,901
about that menu is
it's a quick access point.

995
00:43:46,901 --> 00:43:49,000
So there's no reason
to use an icon.

996
00:43:49,000 --> 00:43:51,334
It's really--it's faster
to just flick a list

997
00:43:51,334 --> 00:43:52,801
is how we've thought
about it.

998
00:43:52,801 --> 00:43:55,901
man: Well, except that what
you may be selecting from

999
00:43:55,901 --> 00:44:00,701
may not ideally
be represented as text.

1000
00:44:00,701 --> 00:44:04,501
For instance, if you're
doing a metronome application,

1001
00:44:04,501 --> 00:44:06,834
you may want to have
note values there.

1002
00:44:06,834 --> 00:44:09,367
You may want to have pictures
of 8th notes, 16th notes,

1003
00:44:09,367 --> 00:44:12,767
instead of saying, "8th note,
16th note" or whatever...

1004
00:44:12,767 --> 00:44:16,234
as an example.

1005
00:44:16,234 --> 00:44:18,434
Nesladek:
Well, I don't--I mean,

1006
00:44:18,434 --> 00:44:20,300
obviously
it's an open source platform,

1007
00:44:20,300 --> 00:44:21,934
and you can feel free
to customize it

1008
00:44:21,934 --> 00:44:23,300
any way you like.

1009
00:44:23,300 --> 00:44:25,767
What we do, though,
in terms of our UI

1010
00:44:25,767 --> 00:44:29,300
is to keep that
as a contextual menu only.

1011
00:44:33,501 --> 00:44:34,834
man: Hi.

1012
00:44:34,834 --> 00:44:37,934
It seems like modal dialogues
are really frowned upon

1013
00:44:37,934 --> 00:44:41,100
but they're just immensely
useful in some situations.

1014
00:44:41,100 --> 00:44:43,501
Like, for instance,
you want to insist

1015
00:44:43,501 --> 00:44:46,267
on logging in
before you do something,

1016
00:44:46,267 --> 00:44:48,234
and you may have
some screens where you offer

1017
00:44:48,234 --> 00:44:49,901
a different view
based on whether the viewer

1018
00:44:49,901 --> 00:44:51,601
is authenticated yet or not.

1019
00:44:51,601 --> 00:44:54,234
And most, or all other major
UI platforms

1020
00:44:54,234 --> 00:44:56,234
support modal dialogues.

1021
00:44:56,234 --> 00:44:59,968
So why is it that it's not
supported on Android,

1022
00:44:59,968 --> 00:45:01,901
or why is it
that it's not convenient?

1023
00:45:01,901 --> 00:45:05,067
And what's kind of
the official way

1024
00:45:05,067 --> 00:45:06,934
to do something
in a modal fashion

1025
00:45:06,934 --> 00:45:10,701
that really
does need to be modal?

1026
00:45:10,701 --> 00:45:14,434
'Cause it really simplifies
logic considerably

1027
00:45:14,434 --> 00:45:16,334
in some cases.

1028
00:45:16,334 --> 00:45:18,901
Nesladek: I don't have
a good answer for you right now.

1029
00:45:18,901 --> 00:45:21,334
I mean, that's--we can talk
afterwards, how's that?

1030
00:45:21,334 --> 00:45:23,300
man: Okay, sure.
Nesladek: Okay.

1031
00:45:23,300 --> 00:45:26,767
man: Hi, my question
is about the stream flow

1032
00:45:26,767 --> 00:45:29,100
of activities in Android.

1033
00:45:29,100 --> 00:45:33,300
So we could expect
that different tasks

1034
00:45:33,300 --> 00:45:36,067
will have different
flows of activities,

1035
00:45:36,067 --> 00:45:39,100
different orders,
and that when you have calls

1036
00:45:39,100 --> 00:45:43,167
of different activities that
are in different applications,

1037
00:45:43,167 --> 00:45:45,300
those are RPC calls, right?

1038
00:45:45,300 --> 00:45:47,767
Which need to have some kind
of synchronization and stuff.

1039
00:45:47,767 --> 00:45:49,901
So I was wondering
whether that

1040
00:45:49,901 --> 00:45:52,567
is likely to cause deadlocks,

1041
00:45:52,567 --> 00:45:54,868
or if there are
some suggested techniques

1042
00:45:54,868 --> 00:45:57,868
for avoiding
those kind of problems.

1043
00:45:57,868 --> 00:46:00,834
Nesladek: That sounds--
that's very technical.

1044
00:46:00,834 --> 00:46:02,634
I'm just a UI guy, so...

1045
00:46:02,634 --> 00:46:04,067
man: Oh, okay, sorry.

1046
00:46:04,067 --> 00:46:05,501
Nesladek: [laughs]

1047
00:46:05,501 --> 00:46:07,334
The Android fireside chat
will probably

1048
00:46:07,334 --> 00:46:09,000
be a really good place
to make sure

1049
00:46:09,000 --> 00:46:11,033
that you get that information.

1050
00:46:11,033 --> 00:46:12,334
man: Okay, sorry.

1051
00:46:12,334 --> 00:46:14,234
Nesladek: Office hours, yeah.

1052
00:46:14,234 --> 00:46:16,334
man: Hi.
I was gonna ask a question.

1053
00:46:16,334 --> 00:46:17,934
It seems like it's similar
to the first question,

1054
00:46:17,934 --> 00:46:19,334
so maybe
the answer's the same.

1055
00:46:19,334 --> 00:46:21,534
It was how much
can we rely on things

1056
00:46:21,534 --> 00:46:23,334
like the back button
being present?

1057
00:46:23,334 --> 00:46:25,834
Because I've seen, like,
concept phones from Germany

1058
00:46:25,834 --> 00:46:27,167
that have no back button.

1059
00:46:27,167 --> 00:46:29,567
Also go into netbooks
or some other devices.

1060
00:46:29,567 --> 00:46:32,801
I mean, how standard
is that hardware platform?

1061
00:46:32,801 --> 00:46:35,067
Nesladek: Well, if it's
a Google experience phone,

1062
00:46:35,067 --> 00:46:37,200
that would be like something
that we'd ship with a carrier,

1063
00:46:37,200 --> 00:46:38,667
you're always gonna have
a back button.

1064
00:46:38,667 --> 00:46:40,501
man: And will there be
non-Google experience phones?

1065
00:46:40,501 --> 00:46:42,801
Nesladek:
I assume there may be,

1066
00:46:42,801 --> 00:46:45,968
given the fact that
we are giving the software away

1067
00:46:45,968 --> 00:46:48,133
so we can spread
a better internet experience

1068
00:46:48,133 --> 00:46:49,767
on a mobile platform.

1069
00:46:49,767 --> 00:46:54,267
So the thing, though, is--
core to the software stack

1070
00:46:54,267 --> 00:46:58,868
is--core to the software
principle is the back stack.

1071
00:46:58,868 --> 00:47:02,067
So a back button should always
be on a device

1072
00:47:02,067 --> 00:47:03,400
is the way we look at it.

1073
00:47:03,400 --> 00:47:04,667
man: Let me sneak
one more thing in.

1074
00:47:04,667 --> 00:47:07,367
Is it a fair criticism
to say that long press

1075
00:47:07,367 --> 00:47:09,300
has kind of poor
discoverability?

1076
00:47:09,300 --> 00:47:14,100
I mean, there isn't
a standard icon to indicate it.

1077
00:47:14,100 --> 00:47:16,267
I never see any visual cues.

1078
00:47:16,267 --> 00:47:19,167
It took me a while to figure out
it was there.

1079
00:47:19,167 --> 00:47:22,234
And yet, it's so useful
once you get it.

1080
00:47:22,234 --> 00:47:26,234
Do you just expect that to get
into the culture over time?

1081
00:47:26,234 --> 00:47:27,934
Nesladek: I don't think
it's a criticism.

1082
00:47:27,934 --> 00:47:30,868
It's just we haven't exposed it
as much as we needed to.

1083
00:47:30,868 --> 00:47:33,634
So talks like this, and actually
we've been very busy,

1084
00:47:33,634 --> 00:47:36,434
but publishing the guidelines
will help people

1085
00:47:36,434 --> 00:47:39,634
start to understand
how to use that.

1086
00:47:39,634 --> 00:47:40,901
man: Hi.

1087
00:47:40,901 --> 00:47:43,033
How would you go about
developing an application

1088
00:47:43,033 --> 00:47:47,501
that has a lot of options
and buttons and stuff

1089
00:47:47,501 --> 00:47:49,534
all around your UI?

1090
00:47:49,534 --> 00:47:52,934
Would you store everything
in the menu or--

1091
00:47:52,934 --> 00:47:54,901
Nesladek:
If I can cut you off.

1092
00:47:54,901 --> 00:47:58,133
So you basically want
to surface onscreen actions

1093
00:47:58,133 --> 00:48:00,667
to the user,
is that correct?

1094
00:48:00,667 --> 00:48:02,200
Right, okay.

1095
00:48:02,200 --> 00:48:04,634
So, you as a developer
need to decide

1096
00:48:04,634 --> 00:48:07,567
what are the most important
actions to put onscreen.

1097
00:48:07,567 --> 00:48:09,033
We don't say you can't.

1098
00:48:09,033 --> 00:48:11,501
But we want you
to think in terms of how

1099
00:48:11,501 --> 00:48:13,901
you could trigger a mode
with an element onscreen

1100
00:48:13,901 --> 00:48:16,367
rather than having everything
up for the user.

1101
00:48:16,367 --> 00:48:19,133
So check--if you
look at settings,

1102
00:48:19,133 --> 00:48:22,133
we use check boxes
in the list view preferences.

1103
00:48:22,133 --> 00:48:23,367
We have that.

1104
00:48:23,367 --> 00:48:25,234
But main functions--

1105
00:48:25,234 --> 00:48:28,167
'cause the main menu
is your--basically fast track

1106
00:48:28,167 --> 00:48:33,033
to navigation, you should put
those functions in there.

1107
00:48:33,033 --> 00:48:34,701
Does that answer
your question?

1108
00:48:34,701 --> 00:48:36,567
man: Sure, yeah.
Nesladek: Okay.

1109
00:48:36,567 --> 00:48:37,901
man: Hi.

1110
00:48:37,901 --> 00:48:39,367
In my work,
I'm being asked to develop

1111
00:48:39,367 --> 00:48:41,367
a lot of custom views--

1112
00:48:41,367 --> 00:48:45,501
things like extending gadget
and extending list view

1113
00:48:45,501 --> 00:48:50,267
to have some, I guess,
vendor-specific behaviors

1114
00:48:50,267 --> 00:48:51,901
or special features.

1115
00:48:51,901 --> 00:48:54,400
I remember
in early SDK versions,

1116
00:48:54,400 --> 00:48:56,868
there was a tool
to, like, measure frame rate

1117
00:48:56,868 --> 00:48:58,567
but I can't seem
to find it anymore.

1118
00:48:58,567 --> 00:49:00,434
Do you guys use anything
like that?

1119
00:49:00,434 --> 00:49:02,133
Nesladek: Let me ask you.

1120
00:49:02,133 --> 00:49:04,033
Like, you want an indicator
for battery performance

1121
00:49:04,033 --> 00:49:05,300
and stuff like that.

1122
00:49:05,300 --> 00:49:06,934
Is that what
you're hinting at?

1123
00:49:06,934 --> 00:49:08,601
man: I remember it all being
part of the same tool.

1124
00:49:08,601 --> 00:49:12,667
But there was a--literally,
a paint frame rate overlay

1125
00:49:12,667 --> 00:49:14,267
that would, like--

1126
00:49:14,267 --> 00:49:16,067
Nesladek: Correct me if I'm
wrong, but it's Spare Parts.

1127
00:49:16,067 --> 00:49:17,234
man: Is it Spare Parts?

1128
00:49:17,234 --> 00:49:18,534
Nesladek: Yeah,
Spare Parts has that.

1129
00:49:18,534 --> 00:49:20,100
man: Great, thanks.
Nesladek: No problem.

1130
00:49:20,100 --> 00:49:21,634
Next question.

1131
00:49:21,634 --> 00:49:23,968
man: I had a question
about the back button.

1132
00:49:23,968 --> 00:49:26,267
And I had read somewhere
where you could actually

1133
00:49:26,267 --> 00:49:28,968
program the code to disable
that if you're in an app.

1134
00:49:28,968 --> 00:49:31,067
First of all, is that correct

1135
00:49:31,067 --> 00:49:33,000
and is that not recommended?

1136
00:49:33,000 --> 00:49:35,200
If just in case you're,
you know, you want a user

1137
00:49:35,200 --> 00:49:38,701
to be using an application
for a specific purpose

1138
00:49:38,701 --> 00:49:40,167
and you don't want them
to, like, go back

1139
00:49:40,167 --> 00:49:41,767
until they finish
that particular app,

1140
00:49:41,767 --> 00:49:43,801
because it--
that particular function?

1141
00:49:43,801 --> 00:49:48,133
Is that possible to do and is
that not recommended if it is?

1142
00:49:48,133 --> 00:49:49,834
Nesladek:
It is possible to do,

1143
00:49:49,834 --> 00:49:52,634
although I don't understand
why you'd want to do that

1144
00:49:52,634 --> 00:49:54,734
for the user
because then they can't

1145
00:49:54,734 --> 00:49:56,601
go back to an activity.

1146
00:49:56,601 --> 00:49:58,400
So it's not a wise move,
I don't think.

1147
00:49:58,400 --> 00:49:59,667
man: That's what I was
kind of thinking.

1148
00:49:59,667 --> 00:50:01,434
I had read that somewhere,
and then--

1149
00:50:01,434 --> 00:50:03,100
I guess another question
was on the menu.

1150
00:50:03,100 --> 00:50:05,200
You said y'all have
customized menus available

1151
00:50:05,200 --> 00:50:08,968
to where--the PNG, where you
can download, is that correct?

1152
00:50:08,968 --> 00:50:10,968
Nesladek:
It's in the source tree.

1153
00:50:10,968 --> 00:50:12,834
You should see me afterwards

1154
00:50:12,834 --> 00:50:14,467
'cause it's not that easy to
get to is what I've been told.

1155
00:50:14,467 --> 00:50:16,300
But we'll figure it out.
man: Okay.

1156
00:50:16,300 --> 00:50:18,868
All right, thanks.
Nesladek: No problem. Next.

1157
00:50:18,868 --> 00:50:21,067
man: I have a question on the--
performance-wise,

1158
00:50:21,067 --> 00:50:24,000
and it's actually more of a--
having different views

1159
00:50:24,000 --> 00:50:26,100
within single activity
versus breaking down

1160
00:50:26,100 --> 00:50:27,567
to multiple activities,

1161
00:50:27,567 --> 00:50:31,033
'cause launching different
activity always takes time.

1162
00:50:31,033 --> 00:50:34,167
And it happens that you click
on some line item

1163
00:50:34,167 --> 00:50:38,267
and it takes two, three seconds
to launch another activity,

1164
00:50:38,267 --> 00:50:40,734
versus if you were doing it
within a single activity

1165
00:50:40,734 --> 00:50:42,133
by just substituting views.

1166
00:50:42,133 --> 00:50:43,767
What are the guidelines
around that

1167
00:50:43,767 --> 00:50:48,067
of performance versus
stream flow of UI

1168
00:50:48,067 --> 00:50:52,400
that you recommend?

1169
00:50:52,400 --> 00:50:54,534
Nesladek: That's a tough--
again, that's a very--

1170
00:50:54,534 --> 00:50:56,367
I think you should talk
to the office hours.

1171
00:50:56,367 --> 00:50:57,634
Our engineers are back there.

1172
00:50:57,634 --> 00:50:59,901
They can probably help you
figure out, you know,

1173
00:50:59,901 --> 00:51:02,934
a fast principle
to help you with that.

1174
00:51:02,934 --> 00:51:05,434
From a UI perspective,
I don't have that knowledge

1175
00:51:05,434 --> 00:51:07,534
to help you do that.

1176
00:51:07,534 --> 00:51:09,501
man: All right, thanks.
Nesladek: Yep.

1177
00:51:09,501 --> 00:51:12,167
man:
I have a quick question.

1178
00:51:12,167 --> 00:51:13,767
I have an app
that's going to require

1179
00:51:13,767 --> 00:51:16,133
a lot of up front
configuration.

1180
00:51:16,133 --> 00:51:18,834
But having any of that
configuration

1181
00:51:18,834 --> 00:51:23,400
in the actual GUI would be
busy and not preferred.

1182
00:51:23,400 --> 00:51:26,601
How do I go about
notifying the user

1183
00:51:26,601 --> 00:51:29,300
the first time the--
about the complex things

1184
00:51:29,300 --> 00:51:33,067
they have to do to set it up
but not...

1185
00:51:33,067 --> 00:51:36,200
Nesladek: We have a notion
of setup wizards,

1186
00:51:36,200 --> 00:51:38,667
so you can step them
through each piece

1187
00:51:38,667 --> 00:51:40,000
of functionality.

1188
00:51:40,000 --> 00:51:43,000
When you first get a G1
or an HTC Magic,

1189
00:51:43,000 --> 00:51:45,667
you tap the android
and then we take you through

1190
00:51:45,667 --> 00:51:47,334
how to use that keyboard now.

1191
00:51:47,334 --> 00:51:50,934
So we have that and you could
help them with--surface it

1192
00:51:50,934 --> 00:51:52,400
with that and they just
couldn't move on

1193
00:51:52,400 --> 00:51:54,300
till they completed
an action onscreen

1194
00:51:54,300 --> 00:51:56,400
is how I would approach that.

1195
00:51:56,400 --> 00:51:58,601
Okay.

1196
00:51:58,601 --> 00:52:00,801
man: Do you have expectancy

1197
00:52:00,801 --> 00:52:05,100
for some drag and drop UI
developing tool?

1198
00:52:05,100 --> 00:52:07,868
Nesladek: Do we have--
I can't--I didn't hear that.

1199
00:52:07,868 --> 00:52:10,300
man: Some drag and drop
development tool

1200
00:52:10,300 --> 00:52:14,901
for that I can create a UI
with drag and drop button,

1201
00:52:14,901 --> 00:52:18,267
something like DroidDraw
but...from Google.

1202
00:52:18,267 --> 00:52:20,434
Nesladek: I would--
I'm not--again, designer.

1203
00:52:20,434 --> 00:52:22,634
But I would assume
in the API demos

1204
00:52:22,634 --> 00:52:24,367
that that's where
you can pick up the behavior

1205
00:52:24,367 --> 00:52:28,400
and then build upon that
to help you build that app

1206
00:52:28,400 --> 00:52:30,834
with drag and drop.

1207
00:52:30,834 --> 00:52:33,934
man: No.
No, I meant, like, 

1208
00:52:33,934 --> 00:52:36,834
the visual tool to actually
create the UI.

1209
00:52:36,834 --> 00:52:43,734
Nesladek: Oh.

1210
00:52:43,734 --> 00:52:47,601
No, sorry.
man: All right.

1211
00:52:47,601 --> 00:52:50,834
Nesladek: Thanks.
Yeah, okay.

1212
00:52:50,834 --> 00:52:52,434
Oh, hey.
man: Hi, there.

1213
00:52:52,434 --> 00:52:54,767
Quick question.

1214
00:52:54,767 --> 00:52:57,634
I have an app that is gonna have
three different levels,

1215
00:52:57,634 --> 00:53:00,033
like three different views
for a list.

1216
00:53:00,033 --> 00:53:05,534
And integrating back button

1217
00:53:05,534 --> 00:53:09,801
with the onscreen back menus
doesn't work very well,

1218
00:53:09,801 --> 00:53:12,033
because, you know,
you could switch tabs

1219
00:53:12,033 --> 00:53:14,634
and your back
would completely get ruined.

1220
00:53:14,634 --> 00:53:16,868
Because you want to go back
in every single view

1221
00:53:16,868 --> 00:53:20,801
that you're in rather
than back between the views.

1222
00:53:20,801 --> 00:53:22,534
Does that make sense?

1223
00:53:22,534 --> 00:53:24,801
Nesladek: Let me reiterate
the question.

1224
00:53:24,801 --> 00:53:27,901
So I think you're building
an app that's tab-based.

1225
00:53:27,901 --> 00:53:29,100
Is that correct?

1226
00:53:29,100 --> 00:53:30,734
man: So tabs
or three different views.

1227
00:53:30,734 --> 00:53:32,200
Let's call it
three different views.

1228
00:53:32,200 --> 00:53:34,534
But three different lists
with content in them.

1229
00:53:34,534 --> 00:53:37,067
Nesladek:
Okay, so that's actually,

1230
00:53:37,067 --> 00:53:40,300
in terms of
the back stack, one--

1231
00:53:40,300 --> 00:53:44,000
You don't go back
between tabs.

1232
00:53:44,000 --> 00:53:46,667
You go back between
the activity.

1233
00:53:46,667 --> 00:53:49,834
So basically
the user has left with

1234
00:53:49,834 --> 00:53:52,501
touching that or, you know,
you can track ball press it.

1235
00:53:52,501 --> 00:53:54,133
But that's the only way
to go back.

1236
00:53:54,133 --> 00:53:56,501
man: So let me give you
an example.

1237
00:53:56,501 --> 00:53:59,467
So you're in the first view
on the first hand,

1238
00:53:59,467 --> 00:54:01,667
and you do three different
things in there.

1239
00:54:01,667 --> 00:54:02,934
If you're going back,

1240
00:54:02,934 --> 00:54:04,968
you're going back
between each of them.

1241
00:54:04,968 --> 00:54:06,801
But if I go to
a different view

1242
00:54:06,801 --> 00:54:09,033
after I've done
the three things,

1243
00:54:09,033 --> 00:54:11,634
I want to keep the back
functionality within that view

1244
00:54:11,634 --> 00:54:14,234
rather than going to the
previous view, for example.

1245
00:54:14,234 --> 00:54:19,334
Or the previous list,
for example.

1246
00:54:19,334 --> 00:54:20,834
Nesladek: We should talk after.
man: Okay.

1247
00:54:20,834 --> 00:54:23,267
[laughs]
Nesladek: Okay.

1248
00:54:28,167 --> 00:54:30,133
All right,
looks like that's it.

1249
00:54:30,133 --> 00:54:32,434
So thank you very much.

1250
00:54:32,434 --> 00:54:35,601
[applause]

