1
00:00:05,634 --> 00:00:09,200
Wang: Hi. My name's David.
I'm from the Google Wave team.

2
00:00:09,200 --> 00:00:11,234
I work on
the Live Concurrent Editing

3
00:00:11,234 --> 00:00:13,434
that you've probably seen
in the last demo.

4
00:00:13,434 --> 00:00:16,133
So how do we actually do it?

5
00:00:16,133 --> 00:00:17,667
So the way we do it

6
00:00:17,667 --> 00:00:20,801
is use a technology called
operational transformation.

7
00:00:20,801 --> 00:00:24,167
It's been a very active
academic research area

8
00:00:24,167 --> 00:00:26,734
for quite a while now,
about ten years.

9
00:00:26,734 --> 00:00:29,534
And we've actually taken
that algorithm

10
00:00:29,534 --> 00:00:33,667
and extended it to provide you
the live concurrent editing

11
00:00:33,667 --> 00:00:35,467
that you're so used to now.

12
00:00:35,467 --> 00:00:36,934
How does this all work?

13
00:00:36,934 --> 00:00:38,901
So let me show you
with an example.

14
00:00:38,901 --> 00:00:42,467
So imagine we had a client...

15
00:00:42,467 --> 00:00:46,234
and we had a server...

16
00:00:46,234 --> 00:00:49,567
and it all started
with the same state--

17
00:00:49,567 --> 00:00:51,934
A, B, C and D.

18
00:00:54,567 --> 00:00:57,968
Now, imagine the client
wanted to insert some character

19
00:00:57,968 --> 00:01:00,467
between C and D.

20
00:01:00,467 --> 00:01:05,434
So he now inserts, let's say, X
between the character C and D.

21
00:01:05,434 --> 00:01:08,534
And the server actually wanted
to delete the character B.

22
00:01:08,534 --> 00:01:12,267
So now he ends up
with the state A, C, and D.

23
00:01:12,267 --> 00:01:14,534
Now, these happen concurrently.

24
00:01:14,534 --> 00:01:16,634
So how do they communicate

25
00:01:16,634 --> 00:01:19,901
that they've done these things
on both sides?

26
00:01:19,901 --> 00:01:22,300
So what they do
is they send the action,

27
00:01:22,300 --> 00:01:24,434
which we call operation
on the wire.

28
00:01:24,434 --> 00:01:32,467
So the client sends an insert X
at position 0, 1, 2, and 3.

29
00:01:32,467 --> 00:01:35,601
And the server
sends the operation

30
00:01:35,601 --> 00:01:41,200
delete character B
at position 0 and 1.

31
00:01:41,200 --> 00:01:45,367
So now when the other side
gets the message,

32
00:01:45,367 --> 00:01:48,400
they could choose to blindly
execute it if they wanted to.

33
00:01:48,400 --> 00:01:49,834
But what would happen

34
00:01:49,834 --> 00:01:51,934
if you actually blindly execute
an operation?

35
00:01:51,934 --> 00:01:55,934
So if the server executed
the operation from a client,

36
00:01:55,934 --> 00:01:58,234
insert the X blindly,

37
00:01:58,234 --> 00:02:00,801
you'd end up with the state
A, C, D, and X.

38
00:02:00,801 --> 00:02:03,801
But that's clearly not what
the client wants to do.

39
00:02:03,801 --> 00:02:05,300
So what we have to do

40
00:02:05,300 --> 00:02:08,501
is go through a process
called transformation.

41
00:02:08,501 --> 00:02:10,033
So what happens
is that the server

42
00:02:10,033 --> 00:02:12,200
takes the client operation

43
00:02:12,200 --> 00:02:15,567
and transforms against
its own operation,

44
00:02:15,567 --> 00:02:17,801
and it results in
a new operation

45
00:02:17,801 --> 00:02:21,400
where he inserts char X,
now at position 2

46
00:02:21,400 --> 00:02:23,534
because he has to subtract
a position

47
00:02:23,534 --> 00:02:25,501
for its own deleted character.

48
00:02:25,501 --> 00:02:27,667
And now the server
applies the operation,

49
00:02:27,667 --> 00:02:32,400
and you end up with the state
A, C, X, and D.

50
00:02:32,400 --> 00:02:34,133
The client, on the other hand,

51
00:02:34,133 --> 00:02:36,467
does the exact same
transformation.

52
00:02:36,467 --> 00:02:38,601
However, in this case,
it just happens

53
00:02:38,601 --> 00:02:43,334
the operation gets transformed
into the exact same operation.

54
00:02:43,334 --> 00:02:46,567
So the client now ends up
with B deleted

55
00:02:46,567 --> 00:02:48,667
with A, C, X, and D.

56
00:02:48,667 --> 00:02:50,300
So as you can see,

57
00:02:50,300 --> 00:02:52,968
now both the client
and the server

58
00:02:52,968 --> 00:02:55,334
ends in the exact same state

59
00:02:55,334 --> 00:02:58,300
even though they have done
the operation concurrently

60
00:02:58,300 --> 00:03:00,934
at different locations.

61
00:03:00,934 --> 00:03:03,767
So why is this liveliness
important?

62
00:03:03,767 --> 00:03:05,567
So let's take an analogy,
let's say.

63
00:03:05,567 --> 00:03:08,734
Imagine you and your friend
walked in a cafe,

64
00:03:08,734 --> 00:03:11,467
and you were just having a
conversation between each other.

65
00:03:11,467 --> 00:03:14,601
When was the last time
you closed off your ears

66
00:03:14,601 --> 00:03:17,501
and said to your friend,
"Wait, finish your sentence

67
00:03:17,501 --> 00:03:20,334
and tell me about it
afterwards"?

68
00:03:20,334 --> 00:03:22,734
Well, this is clearly what
we experience today

69
00:03:22,734 --> 00:03:24,234
on instant messaging

70
00:03:24,234 --> 00:03:26,501
where someone else
types a message,

71
00:03:26,501 --> 00:03:28,000
and you wait for them
to finish.

72
00:03:28,000 --> 00:03:29,367
You wait and wait and wait.

73
00:03:29,367 --> 00:03:30,868
But you don't really wait
in the cafe

74
00:03:30,868 --> 00:03:32,467
for your friend
to finish talking

75
00:03:32,467 --> 00:03:33,834
before you listen
to him, do you?

76
00:03:33,834 --> 00:03:37,033
It would really break
the flow of conversation.

77
00:03:37,033 --> 00:03:40,934
Now, by making things live
and concurrent,

78
00:03:40,934 --> 00:03:42,767
you now have a very
engaging conversation

79
00:03:42,767 --> 00:03:45,400
just like how you would
actually talk to a person

80
00:03:45,400 --> 00:03:47,934
where you can converse
very quickly.

81
00:03:47,934 --> 00:03:51,501
One of the important things
we have done in Google Wave

82
00:03:51,501 --> 00:03:55,501
is that we've chosen to use a
client and server architecture.

83
00:03:55,501 --> 00:03:59,567
It's a very interesting
academic area

84
00:03:59,567 --> 00:04:04,968
to use this complete client
system without any servers.

85
00:04:04,968 --> 00:04:08,300
However, we've purposely chosen
client/server architecture

86
00:04:08,300 --> 00:04:11,501
because it allows us to scout
the large number of clients

87
00:04:11,501 --> 00:04:14,400
without complicating the system.

88
00:04:14,400 --> 00:04:17,400
So imagine in this case

89
00:04:17,400 --> 00:04:20,300
we had a client, client one,

90
00:04:20,300 --> 00:04:22,501
connecting to a server,

91
00:04:22,501 --> 00:04:27,167
and another client
connecting to the server.

92
00:04:27,167 --> 00:04:32,467
They now interact
to the server...

93
00:04:32,467 --> 00:04:35,033
by communicating
and using the server

94
00:04:35,033 --> 00:04:36,701
as a point of relay.

95
00:04:36,701 --> 00:04:38,634
So what does that buy you?

96
00:04:38,634 --> 00:04:41,200
What this buys you is that,
number one,

97
00:04:41,200 --> 00:04:45,300
there is a single system
which holds the source of truth.

98
00:04:45,300 --> 00:04:48,868
So even if the clients crash
or go offline for a long time,

99
00:04:48,868 --> 00:04:52,367
there's one place where
you can go and fetch a document.

100
00:04:52,367 --> 00:04:54,601
The other important thing

101
00:04:54,601 --> 00:04:57,934
is that by modifying operational
transformations slightly,

102
00:04:57,934 --> 00:05:02,167
we're able to have a very
efficient single source of truth

103
00:05:02,167 --> 00:05:03,400
which is the server.

104
00:05:03,400 --> 00:05:05,467
What modification we've done

105
00:05:05,467 --> 00:05:08,133
is that we've changed
the operational transformation

106
00:05:08,133 --> 00:05:10,701
by forcing the client...

107
00:05:10,701 --> 00:05:12,300
wait for the server

108
00:05:12,300 --> 00:05:15,467
to acknowledge this operation
that the client has just sent.

109
00:05:15,467 --> 00:05:19,000
What this means is that
the client always stays

110
00:05:19,000 --> 00:05:22,367
on the server's operational
transformation path.

111
00:05:22,367 --> 00:05:24,701
This allows the server

112
00:05:24,701 --> 00:05:27,534
to keep a single history
of operations

113
00:05:27,534 --> 00:05:31,234
without having to keep
a mirror of the client state

114
00:05:31,234 --> 00:05:33,801
for each client
that's connected.

115
00:05:33,801 --> 00:05:35,434
What this means is that now

116
00:05:35,434 --> 00:05:39,100
for as many clients
that's connected to the server,

117
00:05:39,100 --> 00:05:42,100
there's only a single copy
of the document on the server.

118
00:05:42,100 --> 00:05:43,734
What's even more important

119
00:05:43,734 --> 00:05:46,868
is that because there is
a single stream of operation

120
00:05:46,868 --> 00:05:49,100
that is now happening
on the server--

121
00:05:49,100 --> 00:05:50,434
so in this case,

122
00:05:50,434 --> 00:05:52,267
there's a little
operation that happens here,

123
00:05:52,267 --> 00:05:55,234
there's a little operation
that happens here--

124
00:05:55,234 --> 00:05:57,701
you can now do
the single playback.

125
00:05:57,701 --> 00:05:59,133
What this means is that

126
00:05:59,133 --> 00:06:02,667
you can actually see
how things happened.

127
00:06:02,667 --> 00:06:05,567
So you've probably seen
in Lars's demo

128
00:06:05,567 --> 00:06:08,200
where he was able to look
into the past

129
00:06:08,200 --> 00:06:11,501
and see what someone else
edited.

130
00:06:11,501 --> 00:06:13,200
But how did he do that?

131
00:06:13,200 --> 00:06:15,834
He did this by simply
going back to the server

132
00:06:15,834 --> 00:06:17,467
and asked the server,

133
00:06:17,467 --> 00:06:21,167
"Please give me the operations
that you executed

134
00:06:21,167 --> 00:06:25,934
in coarse digestible amounts
that make sense to me."

135
00:06:25,934 --> 00:06:27,133
And in this case,
for example,

136
00:06:27,133 --> 00:06:29,834
a client operation
can be played back

137
00:06:29,834 --> 00:06:31,334
in a single step.

138
00:06:31,334 --> 00:06:33,567
Another client operation
can be played back

139
00:06:33,567 --> 00:06:34,901
in another step.

140
00:06:34,901 --> 00:06:38,234
I think this is a very cool
piece of technology.

141
00:06:38,234 --> 00:06:42,434
It allows very live
and concurrent communication,

142
00:06:42,434 --> 00:06:44,834
just like how people
sit in the same room

143
00:06:44,834 --> 00:06:47,601
and communicate
in an engaging conversation.

144
00:06:47,601 --> 00:06:51,100
And so I hope this technology
will be useful to you too.

