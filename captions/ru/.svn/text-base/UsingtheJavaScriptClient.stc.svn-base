*TC 00:00:06;19
Привет, меня зовут Остин Чо.

*TC 00:00:08;05
Я работаю в группе
API Календаря Google.

*TC 00:00:10;22
API данных Календаря – 
это API, предоставляющий данные

*TC 00:00:14;08
аккаунта Календаря Google.

*TC 00:00:16;08
С помощью API можно
создавать события,

*TC 00:00:18;26
искать события и даже
создать новую программу

*TC 00:00:21;23
календаря автоматически.

*TC 00:00:23;12
Сегодня я расскажу о том,
как начать использовать

*TC 00:00:25;21
клиентскую библиотеку JavaScript
для работы с API данных Календаря.

*TC 00:00:29;02
Я также покажу презентацию
нового интерактивного руководства

*TC 00:00:31;18
разработчика, которое я написал.

*TC 00:00:33;29
Это новое руководство разработчика
позволяет работать с кодом

*TC 00:00:36;01
прямо в браузере.

*TC 00:00:37;06
Это отличное руководство для тех, кто хочет научиться

*TC 00:00:39;16 
использовать клиентскую
библиотеку.

*TC 00:00:41;07
Клиентская библиотека
JavaScript – последняя

*TC 00:00:43;18
добавленная в список
клиентских библиотек, которые

*TC 00:00:45;19
официально поддерживаем,
а это Java, CSharp, PHP,

*TC 00:00:49;15
и Python.

*TC 00:00:50;26
Клиентская библиотека JavaScript
особенно полезна,

*TC 00:00:53;16
потому что позволяет легко
интегрировать HTML и для

*TC 00:00:56;18
нет зависимости от
службы.

*TC 00:00:58;24
Клиентская библиотека JavaScript
содержит также технологию

*TC 00:01:00;20 
сборки, которая обеспечивает 
связь между доменами, то есть

*TC 00:01:04;09
теперь можно использовать
JavaScript не только для

*TC 00:01:06;10
операций чтения, но и для записи.

*TC 00:01:08;21
С помощью клиентской
библиотеки JavaScript это очень просто.

*TC 00:01:11;09 
Я покажу вам, что нужно
сделать, чтобы настроить

*TC 00:01:13;20
свой код для использования ее.

*TC 00:01:16;27
Этап 1: Нужно зарегистрироваться и 
получить ключ разработчика. Для этого

*TC 00:01:20;03
нужно пойти на этот веб-сайт.

*TC 00:01:22;20
Этап 2: Нужно включить загрузчик
клиентской библиотеки

*TC 00:01:26;01
на свой веб-сайт, разместив
сценарий, полученный вместе

*TC 00:01:28;07
с ключом разработчика.

*TC 00:01:30;05
Этап 3: Нужно добавить 
картинку на тот же домен, где

*TC 00:01:32;17
будет код JavaScript. Она не обязательно должна

*TC 00:01:35;13
быть видимой. 

*TC 00:01:36;09
Как видите, я размещаю ее
далеко за границами страницы.

*TC 00:01:39;06
Это нужно для
связи между

*TC 00:01:40;12
доменами.

*TC 00:01:42;12
Этап 4: Следует воспользоваться
загрузчиком для загрузки

*TC 00:01:45;04
клиентской библиотеки JavaScript.

*TC 00:01:46;23
Этап 5: Теперь нужно установить
функцию callback, которая будет

*TC 00:01:49;14
вызвана, когда библиотека
загрузится и будет готова.

*TC 00:01:52;02
Этап 6: В функции callback
сперва нужно проверить,

*TC 00:01:55;10
зашел ли пользователь
в систему. 

*TC 00:01:56;19
Если нет, его нужно переправить
на страницу аккаунта

*TC 00:01:58;29
Google, чтобы он вошел.

*TC 00:02:00;26
Затем пользователь будет
направлен обратно на вашу
страницу после

*TC 00:02:03;00
аутентификации.

*TC 00:02:04;19
Теперь вы готовы использовать
клиентскую библиотеку JavaScript для

*TC 00:02:06;15
вызов к API
данных Календаря.

*TC 00:02:09;28
Теперь перейдем к 
Интерактивному руководству
разработчика.

*TC 00:02:12;09
Попасть туда можно по
этому адресу.

*TC 00:02:17;03
Интерактивное руководство
разработчика похоже на обычное

*TC 00:02:19;03
руководство разработчика с 
примерами кода, показывающими

*TC 00:02:21;12
обычные применения API.

*TC 00:02:24;13
Но в отличие от обычного
руководства разработчика, теперь

*TC 00:02:26;16
можно изменять исходный код с
помощью встроенного редактора

*TC 00:02:29;05
и выполнять код
прямо из браузера.

*TC 00:02:31;14
Это увлекательный и
интуитивно понятный способ
учиться, ведь вы

*TC 00:02:34;06
сразу видите результаты
выполненного действия.

*TC 00:02:37;16
Посмотрим на некоторые
примеры кода и

*TC 00:02:39;12
попробуем их выполнить.

*TC 00:02:40;28
Выполним вот этот пример кода
и посмотрим, что получится.

*TC 00:02:44;21
Фрагмент, который вы выполнили,
получает список всех ваших

*TC 00:02:47;02
календарей и выводит
названия.

*TC 00:02:49;25
Можно посмотреть встроенную
версию Календаря Google и

*TC 00:02:52;03
убедиться, что это действительно
все принадлежащие вам календари.

*TC 00:02:58;20
Посмотрим на код, чтобы 
понять, как это сделано.

*TC 00:03:02;12
Сперва нужно создать объект
службы календаря и передать

*TC 00:03:05;18
название приложения.

*TC 00:03:09;27
Затем нужно определить
"feedURL", куда будет отправлен

*TC 00:03:12;18
этот запрос.

*TC 00:03:15;09
Мы используем
канал "allcalendar".

*TC 00:03:17;16
Затем нужно определить
функцию callback.

*TC 00:03:20;13
Внутри функции мы просто
смотрим на список

*TC 00:03:24;17
ваших календарей и выводим
названия.

*TC 00:03:27;08
Мы используем функцию
print, которая является

*TC 00:03:29;13 
вспомогательным методом,
предоставленным в этом

*TC 00:03:31;15
руководстве разработчика.

*TC 00:03:34;13
Затем, нужно создать
функцию callback для

*TC 00:03:37;02
"обработки ошибок".

*TC 00:03:39;13
Теперь мы просто выводим
сообщение об ошибке во

*TC 00:03:41;27
вкладку "Output".

*TC 00:03:43;08
Наконец, нужно отправить
этот запрос на

*TC 00:03:45;04
сервер, вызвав
"getALLCalendarsFeed" через

*TC 00:03:49;10
объект службы календаря, 
передав "feedURL",

*TC 00:03:52;23
функцию callback и
функцию "callback при ошибках".

*TC 00:03:55;21
Давайте изменим код на
что-нибудь другое.

*TC 00:03:58;04
Добавим код для вывода
часового пояса

*TC 00:03:59;29
вашего календаря.

*TC 00:04:01;17
Это можно легко сделать
в текстовом редакторе,

*TC 00:04:03;12
изменив код.

*TC 00:04:07;02
Давайте выполним код.

*TC 00:04:12;22
Как видите, нужно взять
название и часовой пояс

*TC 00:04:15;25
и вывести их.

*TC 00:04:18;19
OК. Считывать данные из
календаря очень увлекательно, но

*TC 00:04:20;29
записывать – 
интереснее.

*TC 00:04:23;14
Давайте создадим событие
в аккаунте Календаря Google.

*TC 00:04:26;04
Сперва нужно снова
создать объект службы.

*TC 00:04:29;16
Теперь нужно определить
другой URL для

*TC 00:04:31;25
создания события.

*TC 00:04:33;21
Вот URL, который мы
будем использовать 

*TC 00:04:35;24
URL "private/full".

*TC 00:04:38;24
Теперь нужно создать
объект MDB для представления

*TC 00:04:41;06
нового события.

*TC 00:04:43;08
Выберем название 
"youtube video shoot".

*TC 00:04:48;18
Для связи события со
временем создается

*TC 00:04:50;16
"объект When".

*TC 00:04:51;24 
Теперь нужно установить
времена начала и конца

*TC 00:04:53;09
"объекта When", используя
ограничения времени дня.

*TC 00:04:56;03
Итак, укажем время
начала сегодня

*TC 00:04:58;23
в 9:00 утра.

*TC 00:05:00;16
время остановки укажем
сегодня...10:00 АM.

*TC 00:05:06;04
Теперь установим
время в "объект When".

*TC 00:05:11;06
Затем нужно добавить
"объект When" в событие.

*TC 00:05:14;11
Также нужно определить
функцию callback, которая

*TC 00:05:16;13
скажет вам, что
создано событие.

*TC 00:05:19;05
Также нужно определить
"метод обработки ошибок", если

*TC 00:05:21;23
случаются ошибки.

*TC 00:05:23;16
Наконец, нужно отправить
этот запрос на сервер,

*TC 00:05:26;06
вызвав
"метод вставки события".

*TC 00:05:30;07
Давайте выполним код.

*TC 00:05:35;09
Посмотрим на этот
календарь данных.

*TC 00:05:40;20
Вот оно.

*TC 00:05:44;13
Я надеюсь, вам понравилось, как
легко использовать

*TC 00:05:46;13
клиентскую библиотеку JavaScript.

*TC 00:05:48;07
В интерактивном руководстве
разработчика есть еще много примеров,

*TC 00:05:50;19
показывающих другие
функции API данных Календаря.

*TC 00:05:53;10
Советую вам почитать его
и попробовать примеры.

*TC 00:05:56;00
Дополнительные сведения можно
найти на главной странице API

*TC 00:05:58;06
данных Календаря на "code.google.com".

*TC 00:06:01;03
Спасибо. Программируйте с удовольствием.