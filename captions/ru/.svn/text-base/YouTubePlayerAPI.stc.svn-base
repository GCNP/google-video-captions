*TC 00:00:07;06
Привет, меня зовут Стефани Лю,
я работаю в группе API и

*TC 00:00:10;00
и Инструментов YouTube. 

*TC 00:00:11;06
Сегодня я покажу несколько
простых примеров использования

*TC 00:00:13;21
API проигрывателя и
Chromeless Player. Небольшая

*TC 00:00:16;24
вводная. Раньше, если вы хотели
встроить видео YouTube

*TC 00:00:19;06
на свой сайт, все, что можно
было сделать – это выбрать

*TC 00:00:21;21
один из стандартных встраиваемых
проигрывателей и разместить его. Как разработчик,

*TC 00:00:24;24
вы не знали, что 
происходит

*TC 00:00:26;15
внутри. Теперь же можно делать
гораздо больше. API  JavaScript и

*TC 00:00:26;15
Flash, которые мы только что
выпустили, позволят вам

*TC 00:00:31;27
контролировать наши
встраиваемые проигрыватели.
Делать такие команды, как
воспроизвести,

*TC 00:00:35;00
пауза, перейти к определенному
месту в видео, убрать звук, установить

*TC 00:00:38;12
громкость; получать данные, 
например, текущее время, и то,
насколько видео

*TC 00:00:42;09
загрузилось в буфер. Можно также подписываться
на события, например

*TC 00:00:44;12
, изменения состояния
проигрывателя.
Chromeless Player – это

*TC 00:00:47;18
SWF без элементов управления.
Никаких кнопок YouTube и

*TC 00:00:51;03
полоски состояния. Вы можете добавить
собственные кнопки и настроить

*TC 00:00:53;18
его так, чтобы он подходил под
стиль вашего сайта. Итак, начнем с

*TC 00:00:57;09
того, что может делать
JavaScript API проигрывателя.

*TC 00:01:00;29
Итак, у нас есть обычный встраиваемый
проигрыватель YouTube. Я

*TC 00:01:03;11
полагаю, все с этим
хорошо знакомы.

*TC 00:01:06;29
Вот оно играет. Сейчас я
покажу, как настроить этот

*TC 00:01:11;11
встроенный проигрыватель так,
чтобы делать к нему вызовы API. Сперва

*TC 00:01:14;26
надо включить
"swfobject.js". Я

*TC 00:01:19;02
советую использовать swfobject,
потому что он значительно
упрощает встраивание 

*TC 00:01:21;05
содержания Flash.
Он позаботится о таких вещах,

*TC 00:01:23;20
как определение версии Flash
пользователя. У них

*TC 00:01:27;02
должна быть версия 8 или
выше, чтобы правильно

*TC 00:01:29;20
видеть проигрыватель. Вот div, в котором
будет находиться

*TC 00:01:36;20
встраиваемое. Вы видите, что
мы называем его "ytapiplayer".

*TC 00:01:40;17
Это понадобится нам
дальше. Если у пользователя нет

*TC 00:01:43;26
версии 8 или выше, вместо
неработающего проигрывателя

*TC 00:01:46;02
он увидит этот текст..
Теперь пойдем по

*TC 00:01:50;02
сути. Здесь мы
будем настраивать

*TC 00:01:52;17
встроенный объект. 

*TC 00:01:58;08
Здесь 
параметры, которые будут

*TC 00:02:00;28
нужны во встроенном объекте.
Нам нужен

*TC 00:02:02;28
"allowScriptAccess: "always" (всегда).
Это значит, что SWF YouTube 

*TC 00:02:07;10
может делать вызовы к 
вашей странице HTML.
А страница HTML может делать

*TC 00:02:10;10
вызовы к проигрывателю SWF. Один
из атрибутов, который нужно
установить,

*TC 00:02:14;22
– это идентификатор "myytplayer". Это
будет название

*TC 00:02:20;10
встроенного объекта. Его можно
использовать для ссылки на

*TC 00:02:24;01
проигрыватель впоследствии через
JavaScript с помощью get element по
идентификатору.

*TC 00:02:33;22
Теперь"swfobject.embedSWF" 
загрузит проигрыватель с

*TC 00:02:37;07
YouTube и встроит его на вашу
страницу HTML. Пройдемся по

*TC 00:02:41;10 
параметрам, которые
здесь нужны. Первый параметр –

*TC 00:02:45;28
это URL SWF.
"enableksopi=1",

*TC 00:02:53;04
позволяет проигрывателю
принимать вызовы API. 

*TC 00:02:57;25 
"playerapiid" – это 
параметр, который будет

*TC 00:03:02;03
передан "onYouTubePlayerReady"
как первый аргумент

*TC 00:03:05;24
при загрузке и готовности
проигрывателя. Теперь нужно

*TC 00:03:09;06
дать проигрывателю название,
потому что если у вас будет
много видео

*TC 00:03:12;18
на странице, вам нужно
знать, который 

*TC 00:03:16;21
только что сказал, что он
готов. Второй параметр –

*TC 00:03:23;15
это идентификатор HTML div,
в котором будет находиться

*TC 00:03:26;24
встроенный объект. Как видите, это "ytapiplayer",
как мы

*TC 00:03:31;18
назвали его выше. Дальше у нас
ширина, высота и

*TC 00:03:36;15
обязательная версия Flash,
которая должна быть у пользователя. Помните,

*TC 00:03:41;06
что это должно быть "8" или выше,
чтобы они могли видеть ваше
содержание

*TC 00:03:43;18
правильно. Дальше пара 
дополнительных параметров,

*TC 00:03:48;09
которые мы не будем
использовать. А 
параметры и атрибуты мы

*TC 00:03:51;03
установили здесь. Теперь встроенный
объект готов принимать

*TC 00:03:55;03
вызовы API. Займемся
чем-нибудь более интересным.

*TC 00:03:57;15
Давайте попробуем вводить команды.

*TC 00:03:58;27
Я добавила пару
ссылок.

*TC 00:04:01;14
Мы можем управлять
проигрывателем ими, вместо

*TC 00:04:03;17
кнопок. Я запущу и остановлю
его. Стоп. Выключить звук. Включить звук. И

*TC 00:04:12;08
теперь посмотрим на простые
вызовы, которые нужно

*TC 00:04:15;11
сделать, чтобы это настроить. Как я говорила,
когда проигрыватель

*TC 00:04:18;20
загрузился и готов работать,
он вызовет

*TC 00:04:20;29
"onYouTubePlayerReady".

*TC 00:04:23;02
Здесь мы определяем
функцию. Мы возьмем

*TC 00:04:26;23
ссылку на проигрыватель
и сохраним ее, чтобы

*TC 00:04:29;14
можно было делать к нему
вызовы API. Теперь
мы готовы 

*TC 00:04:33;11
начать действовать.

*TC 00:04:35;17
Так мы настраиваем эти
ссылки. Это очень просто,

*TC 00:04:39;29
просто ссылка с "onclick"
на эту функцию воспроизведения. И

*TC 00:04:44;20
так мы ее определяем.
Проверим немного

*TC 00:04:44;20
на ошибки, убедимся,
что оно не равно нулю и

*TC 00:04:50;08
вызовем "ytplayer.playVideo".
Это просто. Сходно,

*TC 00:04:55;23
с паузой у нас
".pauseVideo", "stop",

*TC 00:04:59;20
"stopVideo", и "mute"
и "unmute". Вот как просто

*TC 00:05:05;16
давать проигрывателю
эти команды. Теперь,

*TC 00:05:08;07
дав несколько основных
команд, попробуем

*TC 00:05:10;28
взять какой-нибудь ввод и
перейдем на 90 секунд видео.

*TC 00:05:18;19
Это не сложнее
остальных команд, я 

*TC 00:05:21;01
покажу, как это сделать.

*TC 00:05:22;28
Вот небольшая форма, которую
мы сделали, чтобы получать ввод
пользователя о том,

*TC 00:05:27;16
в какое место видео в секундах
перейти. Здесь мы вызываем

*TC 00:05:30;16
функцию "seekTo" и 
получаем значение

*TC 00:05:33;10
в текстовом окне. Вот как
мы определяем

*TC 00:05:36;13
функцию, сходно с тем,
что мы делали раньше в

*TC 00:05:38;16
"ytplayer.seekTo" . Мы
передали только секунды и

*TC 00:05:42;16
хотим ли мы делать новый
запрос на сервер, если

*TC 00:05:46;01
положение "seekTo" дальше,
чем видео загрузилось. Я

*TC 00:05:52;07
теперь мы умеем давать команды
проигрывателю, попробуем

*TC 00:05:54;07
получить из него данные. Полезные данные
– каково текущее

*TC 00:05:58;10
время проигрывателя, в каком
месте видео пользователь. Я

*TC 00:06:01;24
Если нажать воспроизведение,
вы заметите, что div текущего
времени

*TC 00:06:07;18
обновляется.

*TC 00:06:10;09
Для постоянного отображения
текущего времени видео, нам

*TC 00:06:12;09
вернуться назад

*TC 00:06:13;21
"onYouTubePlayerReady". Добавить интервал

*TC 00:06:18;21
каждые 250 миллисекунд. Таким образом,
каждый 250 миллисекунд

*TC 00:06:21;24
будет вызываться
"updateCurrentTime," который

*TC 00:06:23;18
просто вызывает
"ytplayer.getCurrentTime" и

*TC 00:06:26;15
обновляет HTML. Можно также
получать другие данные,

*TC 00:06:30;06
например, длину видео, URL
видео и встраиваемый

*TC 00:06:34;18
код.  Теперь мы умеем
давать проигрывателю команды,

*TC 00:06:38;15
получать у него данные. Посмотрим,
как подписываться на события.

*TC 00:06:41;24
В этом случае, пусть
проигрыватель говорит нам,

*TC 00:06:46;06
когда он изменяет состояние. Здесь
можно видеть, что

*TC 00:06:49;09
проигрыватель в состоянии
5, то есть "видео в очереди". Если я нажму воспроизведение,

*TC 00:06:53;21
он начнет буферизацию,
а затем 1, то есть
воспроизведение.

*TC 00:06:58;03
Если сделать паузу, будет 2
и так далее. Посмотрим, как

*TC 00:07:01;08
подписаться на событие.
Если мы хотим постоянно

*TC 00:07:04;20
показывать состояние
проигрывателя, нужно вернуться к

*TC 00:07:07;26
"onYouTubePlayerReady" и
добавить приемник

*TC 00:07:10;20
событий, сказав
"ytplayer.addEventListener".

*TC 00:07:15;20
Мы подпишемся на
событие "onStateChange".

*TC 00:07:19;08
Событие "onStateChange"
использует нашу callback-

*TC 00:07:22;29
функцию и передаст ей
текущее состояние.

*TC 00:07:28;11
Вот мы обновляем HTML. Вы узнали

*TC 00:07:33;11
основы JavaScript API.
Как давать команды, как

*TC 00:07:36;02
получать данные и как 
принимать события. Flash API

*TC 00:07:39;08
имеют те же вызовы и
функции, но

*TC 00:07:41;29
загрузка SWF проигрывателей
YouTube в другой SWF 

*TC 00:07:44;14
немного труднее. Из-за
архитектуры

*TC 00:07:47;11
SWF проигрывателя, 
использование встроенного в
сценарий действия

*TC 00:07:49;08
"MovieClipLoader" не даст 
точной информации о

*TC 00:07:51;17
том, когда готов проигрыватель.

*TC 00:07:52;26
Вот фрагмент кода,
загружающий проигрыватель
YouTube

*TC 00:07:55;05
в Flash. Мы создаем новый
"MovieClipLoader".

*TC 00:08:01;13
Затем мы загружаем в него
SWF YouTube и называем "ytPlayer".

*TC 00:08:07;10
Приемник проверяет каждые
250 миллисекунд, загрузился

*TC 00:08:12;07
ли проигрыватель. Вот
дополнительный вызов,

*TC 00:08:16;13
которого нет в JavaScript  API.
"ytplayer.isPlayerLoaded" –

*TC 00:08:20;07
то, что нужно использовать в
сценарии действия для проверки,
загрузился ли

*TC 00:08:22;16
проигрыватель. Когда ответ
на это "true", можно продолжать и

*TC 00:08:27;25
делать все то, о чем я говорила
раньше в ключе JavaScript  API,

*TC 00:08:30;01
например addEventListeners.

*TC 00:08:33;13
Теперь вы знаете все о API
нашего проигрывателя.
Поговорим

*TC 00:08:36;04
о Chromeless Player.

*TC 00:08:37;25
Я уже говорила, что
Chromeless Player – это просто

*TC 00:08:40;07
SWF без кнопок. Его вид
можно настроить так,

*TC 00:08:44;07
как нужно. Например, на этом
сайте используется 

*TC 00:08:48;07
Chromeless Player. Они используют

*TC 00:08:51;04
собственные кнопки и API
проигрывателя для управления.

*TC 00:09:03;03
Вот пример, очень похожий
на то, что было раньше, 

*TC 00:09:05;12
только здесь мы используем
Chromeless Player. Заметьте,

*TC 00:09:07;24
что нет ни кнопок, ни
полоски состояния.

*TC 00:09:10;09
Все, что осталось – 
логотип YouTube внизу справа

*TC 00:09:13;03
в углу. Он использует те же
JavaScript API, о которых мы

*TC 00:09:16;09
говорили, то есть можно
контролировать его ссылками.

*TC 00:09:19;09
Воспроизвести. Пауза. Вы уже знаете, как
это настроить, только

*TC 00:09:23;21
URL SWF другой. Сейчас я вам это

*TC 00:09:26;27
покажу. Единственное
отличие

*TC 00:09:29;15
Chromeless Player от обычного
 встраиваемого проигрывателя –

*TC 00:09:32;12
для доступа к нему нужен ключ
разработчика. Если у вас нет

*TC 00:09:35;03
ключа разработчика, идите
на code.google.com и

*TC 00:09:38;12
получите его. Зарегистрироваться легко
и бесплатно. Этот код

*TC 00:09:43;18
должен показаться вам
знакомым. Единственное отличие

*TC 00:09:47;15
встраивания в страницу
Chromeless Player и

*TC 00:09:49;21
обычного проигрывателя
YouTube –

*TC 00:09:52;00
это URL SWF. Вот
URL на SWF

*TC 00:09:55;24
Chromeless Player:
gdata.youtube.com/apiplayer.

*TC 00:10:00;27
Сюда нужно разместить свой
ключ разработчика.

*TC 00:10:03;06
Два других параметра
такие же.

*TC 00:10:09;06
Теперь вы знаете, как
загружать Chromeless Player,

*TC 00:10:11;12
я покажу вам некоторые
отличия от обычного

*TC 00:10:13;15
JavaScript API. Вот на
что похож

*TC 00:10:16;24
SWF Chromeless при
первой загрузке,

*TC 00:10:18;21
потому что в нем еще
нет идентификатора видео.

*TC 00:10:21;03
Мы можем вызвать функцию
загрузки идентификатора видео.

*TC 00:10:28;09
Вот она. Есть также
функция очереди видео,

*TC 00:10:36;03
которую можно вызвать. Она
загружает эскиз и

*TC 00:10:40;12
получает видео, но не начинает
воспроизведение. Для загрузки нового

*TC 00:10:44;27
видео в Chromeless
Player, мы вызываем

*TC 00:10:47;06 
"ytplaer.loadVideoById", передаем
"id" и дополнительно

*TC 00:10:51;21
место проигрывателя, в котором
нужно запуститься. Сходно для 

*TC 00:10:56;06
"cueNewVideo" мы вызываем
"ytplaer.cueVideoBGyId", передаем

*TC 00:11:00;29
"id" и в каком месте видео
нужно начать, когда

*TC 00:11:04;29
проигрыватель даст команду
воспроизводить. Надеюсь, это

*TC 00:11:09;29
помогло вам понять, что такое
эти новые средства и что

*TC 00:11:12;05
с ними можно делать. Есть
много вещей, о которых

*TC 00:11:14;05
я не говорила, поэтому стоит
посмотреть документацию

*TC 00:11:16;17
code.google.com



